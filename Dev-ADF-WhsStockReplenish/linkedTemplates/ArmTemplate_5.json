{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Dev-ADF-WhsStockReplenish"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_IC4Way')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendor"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "Vendors"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyVendorColumns"
						},
						{
							"name": "FilterONKRVendors",
							"description": "Filter vendors based on ONKR legal entity"
						},
						{
							"name": "SelectCustomer"
						},
						{
							"name": "SelectIntercompanyRelation"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "L1VendPartner"
						},
						{
							"name": "L2SelectCustPartner"
						},
						{
							"name": "L2GetCustomer"
						},
						{
							"name": "L1SelectVendPartnerRecId"
						},
						{
							"name": "L1VendRelation"
						},
						{
							"name": "L1SelectCustRelation"
						},
						{
							"name": "L2SelectCustAccount"
						},
						{
							"name": "IntercompanyPartner"
						},
						{
							"name": "L3GetVendorBasedOnSourcing"
						},
						{
							"name": "FilterVendorsWithONSourcing",
							"description": "Filter vendors that have ONSourcingVendAccount not NULL"
						},
						{
							"name": "L3SelectVendorPartyAndDataArea"
						},
						{
							"name": "L3GetVendorPartner"
						},
						{
							"name": "L3SelectPartnerRecId"
						},
						{
							"name": "L3RelationCustomerVendor"
						},
						{
							"name": "L4ICCustomer"
						},
						{
							"name": "join1"
						},
						{
							"name": "L4SelectCustPartyAndDataAreaId"
						},
						{
							"name": "L4GetCustomer"
						},
						{
							"name": "FinalSelectCustomer"
						},
						{
							"name": "L1CustPartner"
						},
						{
							"name": "ICCustomer"
						},
						{
							"name": "SelectONSourcingVendors"
						},
						{
							"name": "LowercaseDataArea"
						},
						{
							"name": "join2"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "select1"
						},
						{
							"name": "ConvertVendorParty"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          onsource as string,",
						"          onexternalid as string,",
						"          vrmglobalvendor as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned') ~> Vendor",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          irs1099cindicator as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          prepaytype as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          onnoshortpickallowed as long,",
						"          onmarketplaceautomaticsettlement as long,",
						"          onhrccreditlimitupdated as long,",
						"          qmscustomercheckitem as long,",
						"          qmsprintcustspecificcertofanalysis as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          identificationnumber as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          passportno_hu as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxlicensenum as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          prepaymentvalue as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          hsoprofileid as string,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          onmarketplacejournalname as string,",
						"          onhrccreditlimitstagingid as string,",
						"          qmsapprovedcustomergroupid as string,",
						"          qmscertofanalysiscustgroup as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned') ~> Customer",
						"Vendor select(mapColumn(",
						"          DATAAREAID = dataareaid,",
						"          VENDACCOUNT = accountnum,",
						"          VENDPARTYORIG = party,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
						"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
						"Customer select(mapColumn(",
						"          PARTY = party,",
						"          ACCOUNTNUM = accountnum,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
						"InterCompanyTradingRelationVendor select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
						"InterCompanyTradingPartner select(mapColumn(",
						"          partnerrecid = recid,",
						"          customerparty,",
						"          vendorparty,",
						"          vendordataareaid,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"ConvertVendorParty, IntercompanyPartner join(VENDPARTYORIG == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendPartner",
						"L1CustPartner select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustPartner",
						"L2SelectCustPartner, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L2GetCustomer",
						"L1VendPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG = DATAAREAID,",
						"          VENDACCOUNTORIG = VENDACCOUNT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectVendPartnerRecId",
						"L1SelectVendPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendRelation",
						"L1VendRelation select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG,",
						"          VENDACCOUNTORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectCustRelation",
						"L2GetCustomer select(mapColumn(",
						"          ACCOUNTNUM,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
						"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
						"          customerdataareaid = lower(customerdataareaid),",
						"          vendorparty = toString(vendorparty)) ~> IntercompanyPartner",
						"L2SelectCustAccount, SelectONSourcingVendors join(ACCOUNTNUM == onsourcingvendaccount",
						"     && customerdataareaid == DATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
						"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
						"L3GetVendorBasedOnSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          VENDPARTY,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
						"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(DATAAREAID == vendordataareaid",
						"     && VENDPARTY == vendorparty,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorPartner",
						"L3GetVendorPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
						"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3RelationCustomerVendor",
						"L3RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
						"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
						"L4SelectCustPartyAndDataAreaId, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L4GetCustomer",
						"L4GetCustomer select(mapColumn(",
						"          INVENTLOCATION = inventlocation,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
						"L1SelectCustRelation, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1CustPartner",
						"join2 select(mapColumn(",
						"          PARTY,",
						"          ACCOUNTNUM,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ICCustomer",
						"select1 derive(DATAAREAID = lower(DATAAREAID),",
						"          VENDPARTY = toString(VENDPARTY)) ~> SelectONSourcingVendors",
						"SelectCustomer derive(dataareaid = lower(dataareaid)) ~> LowercaseDataArea",
						"LowercaseDataArea, IntercompanyPartner join(PARTY == customerparty",
						"     && dataareaid == customerdataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"FinalSelectCustomer alterRow(updateIf(true())) ~> Upsert",
						"FilterVendorsWithONSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          onsourcingvendaccount,",
						"          VENDPARTY = VENDPARTYORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"FilterONKRVendors derive(VENDPARTYORIG = toString(VENDPARTYORIG)) ~> ConvertVendorParty",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_vendorid = VENDPARTYORIG,",
						"          hso_company = DATAAREAIDORIG,",
						"          hso_name = VENDACCOUNTORIG",
						"     )) ~> Vendors"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_SourcingWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendors"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationCustomer"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "VendorsSelect"
						},
						{
							"name": "FilterVendorsWithStoresAsInventLocation"
						},
						{
							"name": "selectWarehouseCols"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColWH"
						},
						{
							"name": "LookUpCustomerParty"
						},
						{
							"name": "GetThePartyTableRecords"
						},
						{
							"name": "SelectInterCoCustomers"
						},
						{
							"name": "LookUpThePartyNumber"
						},
						{
							"name": "FinalCustomerSelectWithPartyNumber"
						},
						{
							"name": "select4"
						},
						{
							"name": "GetCustomerDetails"
						},
						{
							"name": "GetVendorParty"
						},
						{
							"name": "SelectVendorParty"
						},
						{
							"name": "GetVendorParty2"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "GetVendCustRelation"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "ConvertVendorPartyToString"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "GetVendorPartyL2"
						},
						{
							"name": "SelectVendorPartyL2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> Vendors",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousetype as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_uowarehouses\">\\n    <attribute name=\"crd3c_uowarehousesid\" />\\n    <attribute name=\"crd3c_name\" />\\n    <attribute name=\"crd3c_warehousetype\" />\\n    <order attribute=\"crd3c_name\" descending=\"false\" />\\n    <filter type=\"or\">\\n      <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Store\" />\\n       <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Stock\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> UOWarehouses",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationCustomer",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          irs1099cindicator as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          identificationnumber as string,",
						"          passportno_hu as string,",
						"          taxlicensenum as string,",
						"          dynfamilygroupid as string,",
						"          trigeoid as string,",
						"          onnoshortpickallowed as long,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          hsoprofileid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned',",
						"     manifestType: 'manifest') ~> Customers",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"Vendors select(mapColumn(",
						"          hso_site = inventsiteid,",
						"          hso_store = inventlocation,",
						"          hso_company = dataareaid,",
						"          hso_vendorgroup = vendgroup,",
						"          hso_name = accountnum,",
						"          hso_store2 = inventlocation,",
						"          VENDPARTY = party,",
						"          VENDRECID = recid,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> VendorsSelect",
						"VendorsSelect filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithStoresAsInventLocation",
						"UOWarehouses select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCols",
						"FilterVendorsWithStoresAsInventLocation, selectWarehouseCols lookup(hso_store == crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(crd3c_uowarehousesid = concat(concat('crd3c_uowarehouseses','('),concat(crd3c_uowarehousesid,')'))) ~> derivedColWH",
						"InterCompanyTradingRelationCustomer, selectInterCompanyTradingPartner lookup(intercompanytradingcustomer == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpCustomerParty",
						"LookUpCustomerParty, selectParty lookup(customerparty == selectParty@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetThePartyTableRecords",
						"Customers select(mapColumn(",
						"          PARTYRECID = party,",
						"          ACCOUNTNUM = accountnum,",
						"          INVENTLOCATION = inventlocation,",
						"          CUSTGROUP = custgroup,",
						"          INVENTSITEID = inventsiteid,",
						"          CUSTDATAAREA = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInterCoCustomers",
						"SelectInterCoCustomers, selectParty lookup(PARTYRECID == recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpThePartyNumber",
						"LookUpThePartyNumber select(mapColumn(",
						"          CUSTDATAAREA,",
						"          ACCOUNTNUM,",
						"          INVENTSITEID,",
						"          INVENTLOCATION,",
						"          CUSTPARTYNUMBER = partynumber,",
						"          CUSTPARTYRECID = PARTYRECID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalCustomerSelectWithPartyNumber",
						"GetThePartyTableRecords select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          INTERCOMPANYTRADINGCUSTOMER = intercompanytradingcustomer,",
						"          CUSTOMERPARTY = customerparty,",
						"          NAME = name,",
						"          CUSTOMERPARTYNUMBER = partynumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, FinalCustomerSelectWithPartyNumber lookup(CUSTOMERPARTYNUMBER == CUSTPARTYNUMBER,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetCustomerDetails",
						"InterCompanyTradingRelationVendor, selectInterCompanyTradingPartner lookup(intercompanytradingvendor == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty",
						"GetVendorParty select(mapColumn(",
						"          VENDORPARTY1 = vendorparty,",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectVendorParty",
						"GetCustomerDetails, SelectVendorPartyL2 lookup(select4@INTERCOMPANYTRADINGVENDOR == SelectVendorPartyL2@INTERCOMPANYTRADINGVENDOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty2",
						"GetVendorParty2 select(mapColumn(",
						"          CUSTNAME = NAME,",
						"          CUSTOMERPARTYNUMBER,",
						"          CUSTACCOUNTNUM = ACCOUNTNUM,",
						"          INVENTLOCATION,",
						"          VENDORPARTY,",
						"          CUSTDATAAREA,",
						"          INVENTSITEID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"derivedColWH, FinalSelect lookup(VENDPARTY == VENDORPARTY,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendCustRelation",
						"ConvertVendorPartyToString alterRow(upsertIf(true())) ~> alterRow1",
						"GetVendCustRelation derive(VENDPARTY = toString(VENDPARTY)) ~> ConvertVendorPartyToString",
						"InterCompanyTradingPartner select(mapColumn(",
						"          recid,",
						"          customerparty,",
						"          vendorparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          partynumber,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"SelectVendorParty, selectInterCompanyTradingPartner lookup(INTERCOMPANYTRADINGVENDOR == recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorPartyL2",
						"GetVendorPartyL2 select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR,",
						"          VENDORPARTY = vendorparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectVendorPartyL2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_site,",
						"          {hso_store@odata.bind} = crd3c_uowarehousesid,",
						"          hso_name,",
						"          hso_company,",
						"          hso_vendorgroup,",
						"          hso_store2 = hso_store,",
						"          hso_customer = CUSTACCOUNTNUM,",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_companycustomer = CUSTDATAAREA,",
						"          hso_sitecustomer = INVENTSITEID,",
						"          hso_custgroup = CUSTGROUP,",
						"          hso_customername = CUSTNAME,",
						"          hso_vendorid = VENDPARTY",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WarehouseONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "WHONUKONUS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> WHONUKONUS",
						"WHONUKONUS filter(crd3c_dataarea == 'onuk' || crd3c_dataarea == 'onus') ~> filter1",
						"filter1 select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          hso_vendor,",
						"          crd3c_sourcewhname,",
						"          hso_dualpurpose",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['WHONUSONUK.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductCategories",
								"type": "DatasetReference"
							},
							"name": "ProductCategories"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as short,",
						"          Category as string,",
						"          Product as string,",
						"          Amount as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductCategories",
						"ProductCategories aggregate(groupBy(Category),",
						"     Amount = sum(Amount),",
						"          TotalRevenu = sum(Amount)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['CategoryPerProductTotal.xls'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "JoinedWithInventory"
						},
						{
							"name": "FilteredToOnlyWarehouses"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectItemIdSizeWHN"
						},
						{
							"name": "SelectThreeRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"FilteredToOnlyWarehouses, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedWithInventory",
						"Warehouse filter(SourcingWarehouse == 'BLUE' || SourcingWarehouse == 'GREEN' || SourcingWarehouse == 'YELLOW') ~> FilteredToOnlyWarehouses",
						"SelectItemIdSizeWHN, SelectThreeRows join(SelectItemIdSizeWHN@itemid == SelectThreeRows@itemid",
						"     && SelectItemIdSizeWHN@size == SelectThreeRows@Size",
						"     && SourcingWarehouse == WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"JoinedWithInventory select(mapColumn(",
						"          SourcingWarehouse,",
						"          itemid,",
						"          size,",
						"          {PhysicalQuantity }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdSizeWHN",
						"derivedColumn1 select(mapColumn(",
						"          WarehouseName,",
						"          itemid,",
						"          {PhysicalQuantity },",
						"          Ordered,",
						"          Size = MinimumStockLevel@Size,",
						"          Warehouse,",
						"          Company = MinimumStockLevel@Company,",
						"          MSL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectThreeRows",
						"filterMSLGreaterthanPQAndOrdered derive(column1 = MSL-({PhysicalQuantity }+Ordered)) ~> derivedColumn1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"Warehouse, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "JoinedWithInventory"
						},
						{
							"name": "FilteredToOnlyWarehouses"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectItemIdSizeWHN"
						},
						{
							"name": "SelectThreeRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"FilteredToOnlyWarehouses, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedWithInventory",
						"Warehouse filter(SourcingWarehouse == 'BLUE' || SourcingWarehouse == 'GREEN' || SourcingWarehouse == 'YELLOW') ~> FilteredToOnlyWarehouses",
						"SelectItemIdSizeWHN, SelectThreeRows join(SelectItemIdSizeWHN@itemid == SelectThreeRows@itemid",
						"     && SelectItemIdSizeWHN@size == SelectThreeRows@Size",
						"     && SourcingWarehouse == WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"JoinedWithInventory select(mapColumn(",
						"          SourcingWarehouse,",
						"          itemid,",
						"          size,",
						"          {PhysicalQuantity }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdSizeWHN",
						"derivedColumn1 select(mapColumn(",
						"          WarehouseName,",
						"          itemid,",
						"          {PhysicalQuantity },",
						"          Ordered,",
						"          Size = MinimumStockLevel@Size,",
						"          Warehouse,",
						"          Company = MinimumStockLevel@Company,",
						"          MSL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectThreeRows",
						"filterMSLGreaterthanPQAndOrdered derive(column1 = MSL-({PhysicalQuantity }+Ordered)) ~> derivedColumn1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummyorders')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dummy_orders",
								"type": "DatasetReference"
							},
							"name": "dummyorders"
						},
						{
							"dataset": {
								"referenceName": "dummy_company",
								"type": "DatasetReference"
							},
							"name": "dummycompany"
						},
						{
							"dataset": {
								"referenceName": "testOrders",
								"type": "DatasetReference"
							},
							"name": "testOrders"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          itemid as string,",
						"          quantity as short,",
						"          company as string,",
						"          {order date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummyorders",
						"source(output(",
						"          company as string,",
						"          revenue as short,",
						"          {start date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummycompany",
						"source(output(",
						"          itemid as string,",
						"          quantity as short,",
						"          company as string,",
						"          {order date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> testOrders",
						"dummyorders filter(company == 'COMP_A') ~> filter1",
						"dummycompany select(mapColumn(",
						"          company",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"testOrders, dummycompany lookup(testOrders@company == dummycompany@company,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['dummyOrders.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create RecomOrderQty')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateRecOrderQtyCsv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UOWarehouses": {},
									"UOItem": {},
									"LegalEntity": {},
									"createCsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy csv to Dataverse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create RecOrderQtyCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy RecomOrderQty csv to Dataverse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-25T20:06:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create RecomOrderQtyVS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateRecOrderQtyCsv_VirtualStores",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UOWarehouses": {},
									"UOItem": {},
									"Barcode": {},
									"InventDim": {},
									"ForecastSales": {},
									"MSLcreateCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateMSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create RecOrderQtyCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "RecOrderQtyVS.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_key",
								"bypassPowerAutomateFlows": false
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OL/MSL - Forecast"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T09:21:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateMSLOptimization_2_DirectSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "companyFetchXML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateMSLOptimization_2_DirectSink",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"CompanyList": {
										"value": "@variables('CompanyList')",
										"type": "Expression"
									},
									"companyFetchXML": {
										"value": "'@{variables('companyFetchXML')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UOItem": {},
									"InventDim": {},
									"ForecastSales": {},
									"UOWarehouses": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LookupDualPurposeCompanies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": {
									"value": "<fetch version=\"1.0\"\n       mapping=\"logical\"\n       distinct=\"true\"\n       savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\"\n       no-lock=\"false\">\n\t<entity name=\"crd3c_uowarehouses\">\n\t\t<attribute name=\"statecode\"/>\n\t\t<attribute name=\"crd3c_uowarehousesid\"/>\n\t\t<attribute name=\"crd3c_name\"/>\n\t\t<attribute name=\"crd3c_dataarea\"/>\n\t\t<filter type=\"and\">\n\t\t\t<condition attribute=\"statecode\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"0\"/>\n\t\t\t<condition attribute=\"hso_dualpurpose\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t\t<condition attribute=\"crd3c_warehousetype\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"STOCK\"/>\n\t\t\t<condition attribute=\"hso_ordertypesplit\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t</filter>\n\t</entity>\n</fetch>",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DualPurposeCompanies",
						"description": "Iterate all dual purpose companies",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDualPurposeCompanies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check for duplicates",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(contains(variables('CompanyList'), item().crd3c_dataarea))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "AddCompany",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "CompanyList",
													"value": {
														"value": "@item().crd3c_dataarea",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "companyFetchXML",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "companyFetchXML",
							"value": {
								"value": "@concat('<value>', join(variables('CompanyList'), '</value><value>'), '</value>')\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyList": {
						"type": "Array"
					},
					"companiesString": {
						"type": "String"
					},
					"companyFetchXML": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OL/MSL - Forecast"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-19T12:16:15Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePOLInes_standard')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreatePurchaseOrderLines",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines",
								"type": "DataFlowReference",
								"parameters": {
									"Company": "'ONUK'",
									"Store": "'SOU-PF-STK'",
									"Warehouse": "'LUX-KN-STK'",
									"filename": "'PO_STD_Test1'",
									"TriggerSource": "'Manual'",
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"OrderType": "'Purchase Order'"
								},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"UOWarehouse": {},
									"DataImportExecutions": {},
									"InventItemGroupItem": {},
									"RecommendedOrderQty": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-11T08:49:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePOLines_WebStores')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreatePOLines_WebStores",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_v1_0_0",
								"type": "DataFlowReference",
								"parameters": {
									"Company": {
										"value": "'@{pipeline().parameters.Company}'",
										"type": "Expression"
									},
									"Store": {
										"value": "'@{pipeline().parameters.Store}'",
										"type": "Expression"
									},
									"Warehouse": {
										"value": "'@{pipeline().parameters.Warehouse}'",
										"type": "Expression"
									},
									"filename": {
										"value": "'@{pipeline().parameters.filename}'",
										"type": "Expression"
									},
									"TriggerSource": {
										"value": "'@{pipeline().parameters.TriggerSource}'",
										"type": "Expression"
									},
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"OrderType": {
										"value": "'@{pipeline().parameters.OrderType}'",
										"type": "Expression"
									},
									"isDualPurposeStore": {
										"value": "@pipeline().parameters.isDualPurposeStore",
										"type": "Expression"
									},
									"isItemGroupingEnabled": {
										"value": "@pipeline().parameters.ItemGroupingEnabled",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"RecommendedOrderQty": {},
									"DataImportExecutions": {},
									"InventItemGroupItem": {},
									"UOWarehouse": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"ItemGroupingEnabled": {
						"type": "bool"
					},
					"isDualPurposeStore": {
						"type": "bool"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-12T06:52:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTransferPurchaseOrderLines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Company",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Company",
							"value": {
								"value": "@toUpper(pipeline().parameters.Company)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Store",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Store",
							"value": {
								"value": "@toUpper(pipeline().parameters.Store)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Warehouse",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Warehouse",
							"value": {
								"value": "@toUpper(pipeline().parameters.Warehouse)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failure message",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Error Copy_TO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Error Copy_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.SlackMessageLogicAppUrl",
								"type": "Expression"
							},
							"body": {
								"value": "{\n\"Channel\": \"stock-replenishment-app\",\n\"Message\": \" Inbound Data Run failed in @{pipeline().globalParameters.Environment} Environemnt \\n```Company: @{variables('Company')} \\nStore: @{variables('Store')} \\nWarehouse: @{variables('Warehouse')}``` \\n\\nDataFactoryName: @{pipeline().DataFactory} \\nPipelineName: @{pipeline().Pipeline} \\nError: @{variables('Error')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Copy_TO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_TO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "OrderType",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OrderType",
							"value": {
								"value": "@toUpper(pipeline().parameters.OrderType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition_Check TO_PO",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Company",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Store",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "OrderType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "MaxOrderQty",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "isDualPurposeStore",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ItemGroupingEnabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.OrderType, 'Transfer Order')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Dataverse_PO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": "SampleFileWithFTS.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "hso_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_fromwhsqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fromwhsqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_fts",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fts",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_orderquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_orderquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_purchaseorderlinesid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_purchaseorderlinesid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_sourceicwarehouse",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_sourceicwarehouse",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_store",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_store",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_storeminquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storeminquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_storequantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storequantity",
														"type": "Decimal"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataversePurchaseOrderLines",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_PO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreatePurchaseOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreatePurchaseOrderLines_v1_0_0",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												},
												"isDualPurposeStore": {
													"value": "@variables('isDualPurposeStore')",
													"type": "Expression"
												},
												"isItemGroupingEnabled": {
													"value": "@variables('ItemGroupingEnabled')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"UOWarehouse": {},
												"DataExecutionsTO": {},
												"PurchaseOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_PO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreatePurchaseOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Dataverse_TO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(variables('Filename'), '_Transformed.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "cr5b1_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "cr5b1_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_fromwhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_fromwhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_towhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_towhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_fromwhsstockqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_fromwhsstockqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_storeavailqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeavailqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_storeminqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeminqty",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "crd3c_toqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_toqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_transferorderid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_transferorderid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataverseTransferOrder",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_TO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreateTransferOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreateTransferOrderLines",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"UOWarehouse": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"DataExecutionsTO": {},
												"TransferOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_TO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreateTransferOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Error Copy_PO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_PO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MaxOrderQty",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxOrderQty",
							"value": {
								"value": "@pipeline().parameters.MaxOrderQty",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ItemGroupingEnabled",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ItemGroupingEnabled",
							"value": {
								"value": "@pipeline().parameters.ItemGroupingEnabled",
								"type": "Expression"
							}
						}
					},
					{
						"name": "isDualPurposeStore",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "isDualPurposeStore",
							"value": {
								"value": "@pipeline().parameters.isDualPurposeStore",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"MaxOrderQty": {
						"type": "string",
						"defaultValue": "0"
					},
					"ItemGroupingEnabled": {
						"type": "bool",
						"defaultValue": false
					},
					"isDualPurposeStore": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"Filename": {
						"type": "String",
						"defaultValue": "guid()"
					},
					"Company": {
						"type": "String"
					},
					"Store": {
						"type": "String"
					},
					"Warehouse": {
						"type": "String"
					},
					"Error": {
						"type": "String"
					},
					"OrderType": {
						"type": "String"
					},
					"MaxOrderQty": {
						"type": "String"
					},
					"ItemGroupingEnabled": {
						"type": "Boolean"
					},
					"isDualPurposeStore": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTransferPurchaseOrderLines_Optimization_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Company",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Company",
							"value": {
								"value": "@toUpper(pipeline().parameters.Company)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Store",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Store",
							"value": {
								"value": "@toUpper(pipeline().parameters.Store)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Warehouse",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Warehouse",
							"value": {
								"value": "@toUpper(pipeline().parameters.Warehouse)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failure message",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Error Copy_TO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Error Copy_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.SlackMessageLogicAppUrl",
								"type": "Expression"
							},
							"body": {
								"value": "{\n\"Channel\": \"stock-replenishment-app\",\n\"Message\": \" Inbound Data Run failed in @{pipeline().globalParameters.Environment} Environemnt \\n```Company: @{variables('Company')} \\nStore: @{variables('Store')} \\nWarehouse: @{variables('Warehouse')}``` \\n\\nDataFactoryName: @{pipeline().DataFactory} \\nPipelineName: @{pipeline().Pipeline} \\nError: @{variables('Error')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Copy_TO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_TO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "OrderType",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OrderType",
							"value": {
								"value": "@toUpper(pipeline().parameters.OrderType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition_Check TO_PO",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Company",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Store",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "OrderType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "MaxOrderQty",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "isDualPurposeStore",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.OrderType, 'Transfer Order')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Dataverse_PO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": "SampleFileWithFTS.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "hso_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_fromwhsqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fromwhsqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_fts",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fts",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_orderquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_orderquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_purchaseorderlinesid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_purchaseorderlinesid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_sourceicwarehouse",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_sourceicwarehouse",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_store",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_store",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_storeminquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storeminquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_storequantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storequantity",
														"type": "Decimal"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataversePurchaseOrderLines",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_PO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreatePurchaseOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreatePurchaseOrderLines_v1_0_0",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												},
												"isDualPurposeStore": {
													"value": "@variables('isDualPurposeStore')",
													"type": "Expression"
												},
												"isItemGroupingEnabled": {
													"value": "@variables('ItemGroupingEnabled')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"UOWarehouse": {},
												"DataExecutionsTO": {},
												"PurchaseOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_PO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreatePurchaseOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Dataverse_TO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(variables('Filename'), '_Transformed.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "cr5b1_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "cr5b1_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_fromwhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_fromwhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_towhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_towhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_fromwhsstockqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_fromwhsstockqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_storeavailqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeavailqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_storeminqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeminqty",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "crd3c_toqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_toqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_transferorderid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_transferorderid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataverseTransferOrder",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_TO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreateTransferOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreateTransferOrderLines",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"UOWarehouse": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"DataExecutionsTO": {},
												"TransferOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_TO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreateTransferOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Error Copy_PO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_PO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MaxOrderQty",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxOrderQty",
							"value": {
								"value": "@pipeline().parameters.MaxOrderQty",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ItemGroupingEnabled",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ItemGroupingEnabled",
							"value": {
								"value": "@pipeline().parameters.ItemGroupingEnabled",
								"type": "Expression"
							}
						}
					},
					{
						"name": "isDualPurposeStore",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "isDualPurposeStore",
							"value": {
								"value": "@pipeline().parameters.isDualPurposeStore",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"MaxOrderQty": {
						"type": "string",
						"defaultValue": "0"
					},
					"ItemGroupingEnabled": {
						"type": "bool",
						"defaultValue": false
					},
					"isDualPurposeStore": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"Filename": {
						"type": "String",
						"defaultValue": "guid()"
					},
					"Company": {
						"type": "String"
					},
					"Store": {
						"type": "String"
					},
					"Warehouse": {
						"type": "String"
					},
					"Error": {
						"type": "String"
					},
					"OrderType": {
						"type": "String"
					},
					"MaxOrderQty": {
						"type": "String"
					},
					"ItemGroupingEnabled": {
						"type": "Boolean"
					},
					"isDualPurposeStore": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "OL/CreateTOPO_Optimization"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateUOItemsCsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateUOItemsCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateUOItemsCsv",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ecoResProduct": {},
									"EcoResProductVariantDimensionValue": {},
									"EcoResSize": {},
									"Translation": {},
									"InventItemBarcode": {},
									"LegalEntity": {},
									"EcoResDistinctProduct": {},
									"EcoResProductVariantSize": {},
									"sinkUOItem": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T13:19:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Items')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete UOItems",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeleteUOItems",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UOItem": {},
									"UOItemCsv": {},
									"sinkDelete": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T13:29:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemsONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ItemONUK",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ItemsONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ItemONUK": {},
									"WriteToItemONUK": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POCreate_Opt_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POCreate_Opt_1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_v1_0_0_Optimization",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"RecommendedOrderQty": {},
									"InventItemGroupItem": {},
									"UOWarehouse": {},
									"UOWarehousesTest": {},
									"UOWarehousesSource": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/CreateTOPO_Optimization"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-18T21:01:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/POCreate_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POCreate_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_SampleData",
								"type": "DataFlowReference",
								"parameters": {
									"Company": "'ONUK'",
									"Store": "'SOU-PF-STK'",
									"Warehouse": "'LUX-KN-STK'",
									"filename": "'SamplePO_1'",
									"TriggerSource": "'Manual'",
									"Container": "'dataverse-ontest-unqccd0037834be4cec846b41a3ea290'",
									"OrderType": "'Purchase Order'",
									"isDualPurposeStore": "true()"
								},
								"datasetParameters": {
									"EcoResProductSample": {},
									"EcoResProductTranslationSample": {},
									"RecommendedOrderQtySample": {},
									"DataImportExecutionsSample": {},
									"UOWarehouseSample": {},
									"InventSumSample": {},
									"InventItemGroupItemSample": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-11T20:03:59Z"
			},
			"dependsOn": []
		}
	]
}