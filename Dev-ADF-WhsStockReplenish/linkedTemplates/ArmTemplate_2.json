{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Dev-ADF-WhsStockReplenish"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/MinimumStockTask"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Warehouse.xlsx",
						"folderPath": "JL/MinimumStockTask",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_company')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy_companies (1).xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy_orders.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inventSum_Sample.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "inventsiteid",
						"type": "String"
					},
					{
						"name": "inventlocationid",
						"type": "String"
					},
					{
						"name": "availphysical",
						"type": "String"
					},
					{
						"name": "ordered",
						"type": "String"
					},
					{
						"name": "inventsizeid",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/testOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test_Orders.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BarcodeONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "BarcodeONUKONUS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "SelectMainCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          blocked as long,",
						"          retailshowforitem as long,",
						"          useforinput as long,",
						"          useforprinting as long,",
						"          hsoisuniqueidentifier as long,",
						"          sysdatastatecode as long,",
						"          barcodesetupid as string,",
						"          description as string,",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          qty as decimal(38,6),",
						"          retailvariantid as string,",
						"          unitid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventitembarcode_partitioned') ~> BarcodeONUKONUS",
						"BarcodeONUKONUS filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          inventdimid,",
						"          itembarcode,",
						"          itemid,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainCols",
						"SelectMainCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['BarcodeONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProductTranslationSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslationSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned') ~> EcoResProductTranslationSample",
						"EcoResProductTranslationSample filter(toString(product) == \"5637329349\" ||\r",
						"toString(product) == \"5637299854\" ||\r",
						"toString(product) == \"5637323867\" ||\r",
						"toString(product) == \"5637267029\" ||\r",
						"toString(product) == \"5637453590\" ||\r",
						"toString(product) == \"5637338094\") ~> filter1",
						"filter1 select(mapColumn(",
						"          description,",
						"          product,",
						"          partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EcoResProductTranslationSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProduct_Sample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/ecoresproduct_partitioned') ~> EcoResProduct",
						"EcoResProduct filter(displayproductnumber == \"3ME10140264\" || \r",
						"displayproductnumber == \"3WF10061508\" || \r",
						"displayproductnumber == \"2UF10080069\" ||\r",
						"displayproductnumber == \"3WF10053037\" || \r",
						"displayproductnumber == \"2UE30660553\" || \r",
						"displayproductnumber == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          displayproductnumber,",
						"          searchname,",
						"          recid,",
						"          partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EcoResProduct_Sample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesFull_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Performance"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesFull_Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "SelectMainCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(itemid == \"3ME10140264\" || ",
						"itemid == \"3WF10061508\" || ",
						"itemid == \"2UF10080069\" ||",
						"itemid == \"3WF10053037\" || ",
						"itemid == \"2UE30660553\" || ",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          dataareaid,",
						"          itemid,",
						"          salesqty,",
						"          inventdimid,",
						"          startdate,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainCols",
						"SelectMainCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && dataareaid == 'onuk') ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Performance"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && dataareaid == 'onuk') ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesSample_Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventItemGroupSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupSample",
						"InventItemGroupSample filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['InventItemGroupSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventSum"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventsum_partitioned') ~> InventSum",
						"InventSum filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          dataareaid,",
						"          itemid,",
						"          inventsiteid,",
						"          inventlocationid,",
						"          availphysical,",
						"          ordered,",
						"          inventsizeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['inventSum_Sample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventdimONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventdimONUKONUS"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventdimONUKONUS",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"join1 select(mapColumn(",
						"          inventdimid = InventdimONUKONUS@inventdimid,",
						"          inventlocationid,",
						"          inventsizeid,",
						"          dataareaid = InventdimONUKONUS@dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter2 select(mapColumn(",
						"          inventdimid,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ForecastSales filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter2",
						"InventdimONUKONUS, select2 join(InventdimONUKONUS@inventdimid == select2@inventdimid",
						"     && InventdimONUKONUS@dataareaid == select2@dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['InventdimONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync forecast sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sync forecasted sales",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSalesSource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSalesTmp"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea29')",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSalesSource",
						"ForecastSalesSource filter(equals(itemid, '3ME10033290')) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesTmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ForecastSalesTmp"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_CustWH_SourcingWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendors"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "OLTestSink",
							"description": "OLTestSink"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyVendorColumns"
						},
						{
							"name": "FilterONKRVendors",
							"description": "Filter vendors based on ONKR legal entity"
						},
						{
							"name": "SelectCustomer"
						},
						{
							"name": "SelectIntercompanyRelation"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "L1GetVendorPartner"
						},
						{
							"name": "L2SelectCustomerPartyAndDataArea"
						},
						{
							"name": "L2GetCustomer"
						},
						{
							"name": "SelectPartnerRecId"
						},
						{
							"name": "L1RelationCustomerVendor"
						},
						{
							"name": "SelectRelatedCustomer"
						},
						{
							"name": "L2SelectCustAccount"
						},
						{
							"name": "IntercompanyPartner"
						},
						{
							"name": "L3GetVendorBasedOnSourcing"
						},
						{
							"name": "FilterVendorsWithONSourcing",
							"description": "Filter vendors that have ONSourcingVendAccount not NULL"
						},
						{
							"name": "L3SelectVendorPartyAndDataArea"
						},
						{
							"name": "L3GetVendorPartner"
						},
						{
							"name": "L3SelectPartnerRecId"
						},
						{
							"name": "L3RelationCustomerVendor"
						},
						{
							"name": "L4ICCustomer"
						},
						{
							"name": "join1"
						},
						{
							"name": "L4SelectCustPartyAndDataAreaId"
						},
						{
							"name": "L4GetCustomer"
						},
						{
							"name": "FinalSelectCustomer"
						},
						{
							"name": "L1GetCustomerPartyAndDataArea"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> Vendors",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          irs1099cindicator as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          identificationnumber as string,",
						"          passportno_hu as string,",
						"          taxlicensenum as string,",
						"          dynfamilygroupid as string,",
						"          trigeoid as string,",
						"          onnoshortpickallowed as long,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          hsoprofileid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned',",
						"     manifestType: 'manifest') ~> Customers",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"Vendors select(mapColumn(",
						"          DATAAREAID = dataareaid,",
						"          VENDACCOUNT = accountnum,",
						"          VENDPARTY = party,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
						"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
						"Customers select(mapColumn(",
						"          PARTY = party,",
						"          ACCOUNTNUM = accountnum,",
						"          INVENTLOCATION = inventlocation,",
						"          CUSTGROUP = custgroup,",
						"          INVENTSITEID = inventsiteid,",
						"          CUSTDATAAREA = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
						"InterCompanyTradingRelationVendor select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
						"InterCompanyTradingPartner select(mapColumn(",
						"          partnerrecid = recid,",
						"          customerparty,",
						"          vendorparty,",
						"          vendordataareaid,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"FilterONKRVendors, IntercompanyPartner join(VENDPARTY == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1GetVendorPartner",
						"L1GetCustomerPartyAndDataArea select(mapColumn(",
						"          customerparty,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustomerPartyAndDataArea",
						"L2SelectCustomerPartyAndDataArea, SelectCustomer join(customerparty == PARTY",
						"     && customerdataareaid == CUSTDATAAREA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L2GetCustomer",
						"L1GetVendorPartner select(mapColumn(",
						"          partnerrecid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPartnerRecId",
						"SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1RelationCustomerVendor",
						"L1RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelatedCustomer",
						"L2GetCustomer select(mapColumn(",
						"          ACCOUNTNUM,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
						"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
						"          customerdataareaid = lower(customerdataareaid)) ~> IntercompanyPartner",
						"L2SelectCustAccount, FilterVendorsWithONSourcing join(ACCOUNTNUM == onsourcingvendaccount",
						"     && customerdataareaid == DATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
						"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
						"L3GetVendorBasedOnSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          VENDPARTY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
						"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(VENDPARTY == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorPartner",
						"L3GetVendorPartner select(mapColumn(",
						"          partnerrecid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
						"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == intercompanytradingcustomer,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3RelationCustomerVendor",
						"L3RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
						"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customerparty,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
						"L4SelectCustPartyAndDataAreaId, SelectCustomer join(customerparty == PARTY",
						"     && customerdataareaid == CUSTDATAAREA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L4GetCustomer",
						"L4GetCustomer select(mapColumn(",
						"          PARTY,",
						"          ACCOUNTNUM,",
						"          INVENTLOCATION,",
						"          CUSTGROUP,",
						"          INVENTSITEID,",
						"          CUSTDATAAREA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
						"SelectRelatedCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1GetCustomerPartyAndDataArea",
						"FinalSelectCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['IntercompanyChain4_OL.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OLTestSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vendors ONKR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "VendorsONKR",
							"description": "Pull only vendors ONKR from Synapse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "SinkVendorONKR"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'silver_delta/vend_onkr') ~> VendorsONKR",
						"VendorsONKR select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['vendorONKR_1'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkVendorONKR"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_sinkfile_customers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get a file based on vendors input",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "CustTable",
							"description": "F&O Vendors"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Intercompany"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "olsinkcusttable"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "FilterCustomers"
						},
						{
							"name": "IntercompanyCustomer"
						},
						{
							"name": "FinalCustomer"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          irs1099cindicator as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          prepaytype as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          onnoshortpickallowed as long,",
						"          onmarketplaceautomaticsettlement as long,",
						"          onhrccreditlimitupdated as long,",
						"          qmscustomercheckitem as long,",
						"          qmsprintcustspecificcertofanalysis as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          identificationnumber as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          passportno_hu as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxlicensenum as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          prepaymentvalue as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          hsoprofileid as string,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          onmarketplacejournalname as string,",
						"          onhrccreditlimitstagingid as string,",
						"          qmsapprovedcustomergroupid as string,",
						"          qmscertofanalysiscustgroup as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned') ~> CustTable",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-onuat-unqcf615afe7fa74991bdf042631c79c',",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned') ~> Intercompany",
						"CustTable select(mapColumn(",
						"          vendorId = accountnum,",
						"          party,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, IntercompanyCustomer join(party == customerparty,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"Intercompany filter(notEquals(toString(customerparty), 'NULL')) ~> FilterCustomers",
						"FilterCustomers select(mapColumn(",
						"          customerparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> IntercompanyCustomer",
						"join1 select(mapColumn(",
						"          vendorId,",
						"          party,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalCustomer",
						"FinalCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('OL-CustTable', concat(toString(currentDate(), 'yyyyMMdd'), '.csv')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> olsinkcusttable"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_sinkfile_vendors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get a file based on vendors input",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "VendTable",
							"description": "F&O Vendors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "olsinkvendors"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          onsource as string,",
						"          onexternalid as string,",
						"          vrmglobalvendor as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned') ~> VendTable",
						"VendTable select(mapColumn(",
						"          vendorId = accountnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('OL-', concat(toString(currentDate(), 'yyyyMMdd'), '.csv')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> olsinkvendors"
					]
				}
			},
			"dependsOn": []
		}
	]
}