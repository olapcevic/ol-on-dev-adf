{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Dev-ADF-WhsStockReplenish"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BarcodeONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BarcodeONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BarcodeONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BarcodeONUKONUS": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Items csv to Dataverse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy csv to Dataverse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "UOItem.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_le_variant"
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "storageaccount",
										"type": "LinkedServiceReference"
									},
									"path": "whsstockreplenish/UOItem_UpsertLogs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TempCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UOItem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy RecomOrderQty csv to Dataverse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy csv to dataverse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "RecOrderQty.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_key"
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "storageaccount",
										"type": "LinkedServiceReference"
									},
									"path": "whsstockreplenish/RecomOrderQtyLogs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecomOrderQtyCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T11:19:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProductTranslationSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EcoResProductTranslationSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcoResProductTranslationSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcoResProductTranslationSample": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProduct_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EcoResProduct_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcoResProduct_Sample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcoResProduct": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesFull_Performance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesFull_Performance",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesFull_Performance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Performance"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T11:47:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesONUSONUK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-15T20:35:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample_Performance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesSample_Performance",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesSample_Performance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Performance"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T11:47:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventItemGroupSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventItemGroupSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventItemGroupSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventItemGroupSample": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventSum_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventSum_Sample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventSum": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventdimONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventdimONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventdimONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventdimONUKONUS": {},
									"ForecastSales": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink Customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sink Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "get_sinkfile_customers",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CustTable": {},
									"Intercompany": {},
									"olsinkcusttable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sink vendors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "get_sinkfile_vendors",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"VendTable": {},
									"olsinkvendors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Vendors ONKR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncVendorWH_IntercompanyChain4",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncVendors_CustWH_SourcingWH",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Vendors": {},
									"Customers": {},
									"InterCompanyTradingPartner": {},
									"Party": {},
									"InterCompanyTradingRelationVendor": {},
									"OLTestSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync forecast sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sync forecast sales",
				"activities": [
					{
						"name": "Sync forecast sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Sync forecast sales",
								"type": "DataFlowReference",
								"parameters": {
									"Container": "'dataverse-ontest-unqccd0037834be4cec846b41a3ea29'"
								},
								"datasetParameters": {
									"ForecastSalesSource": {},
									"ForecastSalesTmp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BooleanValueTest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WHONUKONUS",
								"type": "DatasetReference"
							},
							"name": "WH"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     isDualPurpose as boolean",
						"}",
						"source(output(",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          hso_vendor as string,",
						"          crd3c_sourcewhname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WH",
						"derivedColumn1 filter(isDP == $isDualPurpose) ~> filter1",
						"WH derive(isDP = true()) ~> derivedColumn1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['BooleanTest'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateMSLOptimization_2_DirectSink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Lookup activity, array of companies, Dataverse query taking in the array.",
				"folder": {
					"name": "OL/MSL Sync"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventDim"
						},
						{
							"dataset": {
								"referenceName": "ForecastSalesSample",
								"type": "DatasetReference"
							},
							"name": "ForecastSales"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filterModelCustGroupChannel"
						},
						{
							"name": "SelectItemIdForecastQtyInventDimId"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "MSL"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "joinMSL"
						},
						{
							"name": "filterCompany"
						},
						{
							"name": "JoinDualPurposeStores"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string,",
						"     CompanyList as string[],",
						"     companyFetchXML as string",
						"}",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><attribute name=\"crd3c_productnumber\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"crd3c_dataarea\" operator=\"in\">',$companyFetchXML,' </condition></filter></entity></fetch>')),",
						"     wildcardPaths:['UOItem.csv']) ~> UOItem",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
						"source(output(",
						"          itemid as string,",
						"          startdate as date,",
						"          inventdimid as string,",
						"          salesqty as integer,",
						"          dataareaid as string,",
						"          suntafforecastchannelid as string,",
						"          modelid as string,",
						"          custgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ForecastSales",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          statecode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/><condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"STOCK\"/><condition attribute=\"hso_ordertypesplit\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehouses",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && in($CompanyList, dataareaid)) ~> filterModelCustGroupChannel",
						"filterModelCustGroupChannel select(mapColumn(",
						"          itemid,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
						"joinMSL select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site = inventlocationid,",
						"          crd3c_dataarea = UOItem@crd3c_dataarea,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          hso_size = crd3c_size,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"JoinDualPurposeStores select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"CalculateMSL select(mapColumn(",
						"          crd3c_dataarea = dataareaid,",
						"          itemid,",
						"          salesqty,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid,",
						"          inventsizeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"UOWarehouses select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"UOItem, MSL join(crd3c_productnumber == itemid",
						"     && coalesce(crd3c_size, '') == coalesce(inventsizeid, '')",
						"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMSL",
						"InventDim filter(in($CompanyList, dataareaid)) ~> filterCompany",
						"filterCompany, SelectDualPurposeStores join(inventlocationid == crd3c_name,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDualPurposeStores",
						"filter1 alterRow(upsertIf(true())) ~> alterRow1",
						"AddMSL derive(crd3c_itemvariantlookup = concat('/crd3c_uoitems(',crd3c_itemvariantlookup, ')'),",
						"          crd3c_warehouselookup = concat('/crd3c_uowarehouses(', crd3c_warehouselookup, ')')) ~> derivedColumn1",
						"derivedColumn1 filter(crd3c_barcode == '7630867853759') ~> filter1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     alternateKeyName: 'crd3c_key',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site,",
						"          crd3c_dataarea,",
						"          crd3c_quantity,",
						"          crd3c_itemvariant,",
						"          crd3c_variantname,",
						"          {crd3c_ItemVariantLookup@odata.bind} = crd3c_itemvariantlookup,",
						"          hso_size,",
						"          {crd3c_WarehouseLookup@odata.bind} = crd3c_warehouselookup,",
						"          crd3c_name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string,",
						"     Store as string,",
						"     Warehouse as string,",
						"     filename as string,",
						"     TriggerSource as string,",
						"     Container as string,",
						"     OrderType as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_icwarehousename as string,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\" /><attribute name=\"crd3c_dataarea\" /><attribute name=\"crd3c_site\" /><attribute name=\"crd3c_name\" /><attribute name=\"crd3c_itemvariant\" /><attribute name=\"crd3c_quantity\" /><attribute name=\"crd3c_barcode\" /><attribute name=\"createdon\" /><order attribute=\"crd3c_name\" descending=\"false\" /><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\" /></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter((coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty ))),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MinOrderQty = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MinOrderQty > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_SampleData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Including virtual/web stores",
				"folder": {
					"name": "OL/Create POs - Dual Purpose"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EcoResProductSample",
								"type": "DatasetReference"
							},
							"name": "EcoResProductSample"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslationSample"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQtySample"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutionsSample"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouseSample"
						},
						{
							"dataset": {
								"referenceName": "inventSum_Sample",
								"type": "DatasetReference"
							},
							"name": "InventSumSample"
						},
						{
							"dataset": {
								"referenceName": "InventItemGroupSample",
								"type": "DatasetReference"
							},
							"name": "InventItemGroupItemSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum",
							"description": "Filtering rows using expressions on columns 'AVAILPHYSICAL, ORDERED, MinOrderQty' + hso_FTS"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string ('ONUK'),",
						"     Store as string ('SOU-PF-STK'),",
						"     Warehouse as string ('LUX-KN-STK'),",
						"     filename as string ('POCreate_Opt1'),",
						"     TriggerSource as string ('Manual'),",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     OrderType as string ('Purchase Order'),",
						"     isDualPurposeStore as boolean (true())",
						"}",
						"source(output(",
						"          displayproductnumber as string,",
						"          searchname as string,",
						"          recid as long,",
						"          partition as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     manifestType: 'manifest') ~> EcoResProductSample",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslationSample",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"b616874b-dc9e-ec11-b400-000d3ab75270\" no-lock=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_itemvariant\"/><attribute name=\"crd3c_name\"/><attribute name=\"createdon\"/><attribute name=\"modifiedon\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"hso_size\"/><order attribute=\"crd3c_dataarea\" descending=\"false\"/><order attribute=\"crd3c_site\" descending=\"false\"/><order attribute=\"hso_size\" descending=\"false\"/><attribute name=\"hso_fts\"/><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\"/><condition attribute=\"crd3c_dataarea\" operator=\"eq\" value=\"',$Company,'\"/><filter type=\"or\"><condition attribute=\"crd3c_quantity\" operator=\"gt\" value=\"0\"/><condition attribute=\"hso_fts\" operator=\"gt\" value=\"0\"/></filter></filter></entity></fetch>'))) ~> RecommendedOrderQtySample",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutionsSample",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouseSample",
						"source(output(",
						"          dataareaid as string,",
						"          itemid as string,",
						"          inventsiteid as string,",
						"          inventlocationid as string,",
						"          availphysical as integer,",
						"          ordered as integer,",
						"          inventsizeid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventSumSample",
						"source(output(",
						"          itemid as string,",
						"          itemgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventItemGroupItemSample",
						"InventSumSample derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter(iif($isDualPurposeStore, coalesce(AVAILPHYSICAL,0), coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProductSample select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslationSample filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif($isDualPurposeStore,\r",
						"    iif((crd3c_storeminqty-crd3c_storeavailqtyzero) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-crd3c_storeavailqtyzero)),\r",
						"    iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )))\r",
						"),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQtySample select(mapColumn(",
						"          crd3c_name,",
						"          FreeToSell = hso_fts,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MSL = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouseSample derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(MinOrderQty = coalesce(MSL,0) + coalesce(FreeToSell,0),",
						"          dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutionsSample select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouseSample lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouseSample@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouseSample@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItemSample select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": []
		}
	]
}