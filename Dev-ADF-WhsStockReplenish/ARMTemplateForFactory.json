{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "Dev-ADF-WhsStockReplenish"
		},
		"AzureFunction_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction'"
		},
		"AzureFunction_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://dev-replappgeneralhelper.azurewebsites.net"
		},
		"D365FODataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://onuatdatalakesps.dfs.core.windows.net/"
		},
		"D365FOSynapseDelta_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ontestsynapsestorage.dfs.core.windows.net/"
		},
		"ONKeys_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://ON-Keys-DEV.vault.azure.net/"
		},
		"powerappdataverse_properties_typeProperties_servicePrincipalId": {
			"type": "string",
			"defaultValue": "614b099c-972d-418d-b1de-5a3b1e582328"
		},
		"storageaccount_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "Repl-inv-app-storage-connectionstring"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BarcodeONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BarcodeONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BarcodeONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"BarcodeONUKONUS": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/BarcodeONUKONUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy Items csv to Dataverse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy csv to Dataverse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "UOItem.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_le_variant"
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "storageaccount",
										"type": "LinkedServiceReference"
									},
									"path": "whsstockreplenish/UOItem_UpsertLogs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TempCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "UOItem",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TempCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copy RecomOrderQty csv to Dataverse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy csv to dataverse",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "RecOrderQty.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_key"
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "storageaccount",
										"type": "LinkedServiceReference"
									},
									"path": "whsstockreplenish/RecomOrderQtyLogs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecomOrderQtyCsvFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T11:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/RecommendedOrderQty')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create RecomOrderQty')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateRecOrderQtyCsv",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UOWarehouses": {},
									"UOItem": {},
									"LegalEntity": {},
									"createCsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy csv to Dataverse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create RecOrderQtyCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy RecomOrderQty csv to Dataverse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-08-25T20:06:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateRecOrderQtyCsv')]",
				"[concat(variables('factoryId'), '/pipelines/Copy RecomOrderQty csv to Dataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create RecomOrderQtyVS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateRecOrderQtyCsv_VirtualStores",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UOWarehouses": {},
									"UOItem": {},
									"Barcode": {},
									"InventDim": {},
									"ForecastSales": {},
									"MSLcreateCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateMSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create RecOrderQtyCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "RecOrderQtyVS.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_key",
								"bypassPowerAutomateFlows": false
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OL/MSL - Forecast"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T09:21:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateRecOrderQtyCsv_VirtualStores')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile_virtualStore')]",
				"[concat(variables('factoryId'), '/datasets/RecommendedOrderQty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateMSLOptimization_2_DirectSink')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create RecOrderQtyCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "companyFetchXML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateMSLOptimization_2_DirectSink",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"CompanyList": {
										"value": "@variables('CompanyList')",
										"type": "Expression"
									},
									"companyFetchXML": {
										"value": "'@{variables('companyFetchXML')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UOItem": {},
									"InventDim": {},
									"ForecastSales": {},
									"UOWarehouses": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LookupDualPurposeCompanies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": {
									"value": "<fetch version=\"1.0\"\n       mapping=\"logical\"\n       distinct=\"true\"\n       savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\"\n       no-lock=\"false\">\n\t<entity name=\"crd3c_uowarehouses\">\n\t\t<attribute name=\"statecode\"/>\n\t\t<attribute name=\"crd3c_uowarehousesid\"/>\n\t\t<attribute name=\"crd3c_name\"/>\n\t\t<attribute name=\"crd3c_dataarea\"/>\n\t\t<filter type=\"and\">\n\t\t\t<condition attribute=\"statecode\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"0\"/>\n\t\t\t<condition attribute=\"hso_dualpurpose\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t\t<condition attribute=\"crd3c_warehousetype\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"STOCK\"/>\n\t\t\t<condition attribute=\"hso_ordertypesplit\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t</filter>\n\t</entity>\n</fetch>",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DualPurposeCompanies",
						"description": "Iterate all dual purpose companies",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDualPurposeCompanies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check for duplicates",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(contains(variables('CompanyList'), item().crd3c_dataarea))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "AddCompany",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "CompanyList",
													"value": {
														"value": "@item().crd3c_dataarea",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "companyFetchXML",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "companyFetchXML",
							"value": {
								"value": "@concat('<value>', join(variables('CompanyList'), '</value><value>'), '</value>')\n",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyList": {
						"type": "Array"
					},
					"companiesString": {
						"type": "String"
					},
					"companyFetchXML": {
						"type": "String"
					}
				},
				"folder": {
					"name": "OL/MSL - Forecast"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-19T12:16:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateMSLOptimization_2_DirectSink')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePOLInes_standard')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreatePurchaseOrderLines",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines",
								"type": "DataFlowReference",
								"parameters": {
									"Company": "'ONUK'",
									"Store": "'SOU-PF-STK'",
									"Warehouse": "'LUX-KN-STK'",
									"filename": "'PO_STD_Test1'",
									"TriggerSource": "'Manual'",
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"OrderType": "'Purchase Order'"
								},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"UOWarehouse": {},
									"DataImportExecutions": {},
									"InventItemGroupItem": {},
									"RecommendedOrderQty": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-11T08:49:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePOLines_WebStores')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreatePOLines_WebStores",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_v1_0_0",
								"type": "DataFlowReference",
								"parameters": {
									"Company": {
										"value": "'@{pipeline().parameters.Company}'",
										"type": "Expression"
									},
									"Store": {
										"value": "'@{pipeline().parameters.Store}'",
										"type": "Expression"
									},
									"Warehouse": {
										"value": "'@{pipeline().parameters.Warehouse}'",
										"type": "Expression"
									},
									"filename": {
										"value": "'@{pipeline().parameters.filename}'",
										"type": "Expression"
									},
									"TriggerSource": {
										"value": "'@{pipeline().parameters.TriggerSource}'",
										"type": "Expression"
									},
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"OrderType": {
										"value": "'@{pipeline().parameters.OrderType}'",
										"type": "Expression"
									},
									"isDualPurposeStore": {
										"value": "@pipeline().parameters.isDualPurposeStore",
										"type": "Expression"
									},
									"isItemGroupingEnabled": {
										"value": "@pipeline().parameters.ItemGroupingEnabled",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"RecommendedOrderQty": {},
									"DataImportExecutions": {},
									"InventItemGroupItem": {},
									"UOWarehouse": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"ItemGroupingEnabled": {
						"type": "bool"
					},
					"isDualPurposeStore": {
						"type": "bool"
					},
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-12T06:52:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_v1_0_0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTransferPurchaseOrderLines')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Company",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Company",
							"value": {
								"value": "@toUpper(pipeline().parameters.Company)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Store",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Store",
							"value": {
								"value": "@toUpper(pipeline().parameters.Store)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Warehouse",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Warehouse",
							"value": {
								"value": "@toUpper(pipeline().parameters.Warehouse)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failure message",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Error Copy_TO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Error Copy_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.SlackMessageLogicAppUrl",
								"type": "Expression"
							},
							"body": {
								"value": "{\n\"Channel\": \"stock-replenishment-app\",\n\"Message\": \" Inbound Data Run failed in @{pipeline().globalParameters.Environment} Environemnt \\n```Company: @{variables('Company')} \\nStore: @{variables('Store')} \\nWarehouse: @{variables('Warehouse')}``` \\n\\nDataFactoryName: @{pipeline().DataFactory} \\nPipelineName: @{pipeline().Pipeline} \\nError: @{variables('Error')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Copy_TO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_TO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "OrderType",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OrderType",
							"value": {
								"value": "@toUpper(pipeline().parameters.OrderType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition_Check TO_PO",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Company",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Store",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "OrderType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "MaxOrderQty",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "isDualPurposeStore",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ItemGroupingEnabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.OrderType, 'Transfer Order')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Dataverse_PO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": "SampleFileWithFTS.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "hso_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_fromwhsqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fromwhsqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_fts",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fts",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_orderquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_orderquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_purchaseorderlinesid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_purchaseorderlinesid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_sourceicwarehouse",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_sourceicwarehouse",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_store",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_store",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_storeminquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storeminquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_storequantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storequantity",
														"type": "Decimal"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataversePurchaseOrderLines",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_PO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreatePurchaseOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreatePurchaseOrderLines_v1_0_0",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												},
												"isDualPurposeStore": {
													"value": "@variables('isDualPurposeStore')",
													"type": "Expression"
												},
												"isItemGroupingEnabled": {
													"value": "@variables('ItemGroupingEnabled')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"UOWarehouse": {},
												"DataExecutionsTO": {},
												"PurchaseOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_PO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreatePurchaseOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Dataverse_TO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(variables('Filename'), '_Transformed.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "cr5b1_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "cr5b1_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_fromwhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_fromwhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_towhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_towhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_fromwhsstockqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_fromwhsstockqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_storeavailqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeavailqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_storeminqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeminqty",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "crd3c_toqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_toqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_transferorderid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_transferorderid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataverseTransferOrder",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_TO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreateTransferOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreateTransferOrderLines",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"UOWarehouse": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"DataExecutionsTO": {},
												"TransferOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_TO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreateTransferOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Error Copy_PO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_PO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MaxOrderQty",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxOrderQty",
							"value": {
								"value": "@pipeline().parameters.MaxOrderQty",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ItemGroupingEnabled",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ItemGroupingEnabled",
							"value": {
								"value": "@pipeline().parameters.ItemGroupingEnabled",
								"type": "Expression"
							}
						}
					},
					{
						"name": "isDualPurposeStore",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "isDualPurposeStore",
							"value": {
								"value": "@pipeline().parameters.isDualPurposeStore",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"MaxOrderQty": {
						"type": "string",
						"defaultValue": "0"
					},
					"ItemGroupingEnabled": {
						"type": "bool",
						"defaultValue": false
					},
					"isDualPurposeStore": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"Filename": {
						"type": "String",
						"defaultValue": "guid()"
					},
					"Company": {
						"type": "String"
					},
					"Store": {
						"type": "String"
					},
					"Warehouse": {
						"type": "String"
					},
					"Error": {
						"type": "String"
					},
					"OrderType": {
						"type": "String"
					},
					"MaxOrderQty": {
						"type": "String"
					},
					"ItemGroupingEnabled": {
						"type": "Boolean"
					},
					"isDualPurposeStore": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TempCsvFilePO')]",
				"[concat(variables('factoryId'), '/datasets/DataversePurchaseOrderLines')]",
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_v1_0_0')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction')]",
				"[concat(variables('factoryId'), '/datasets/TempCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/DataverseTransferOrder')]",
				"[concat(variables('factoryId'), '/dataflows/CreateTransferOrderLines')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTransferPurchaseOrderLines_Optimization_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Company",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Company",
							"value": {
								"value": "@toUpper(pipeline().parameters.Company)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Store",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Store",
							"value": {
								"value": "@toUpper(pipeline().parameters.Store)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Warehouse",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Warehouse",
							"value": {
								"value": "@toUpper(pipeline().parameters.Warehouse)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set filename",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Filename",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Failure message",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Error Copy_TO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Error Copy_PO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.SlackMessageLogicAppUrl",
								"type": "Expression"
							},
							"body": {
								"value": "{\n\"Channel\": \"stock-replenishment-app\",\n\"Message\": \" Inbound Data Run failed in @{pipeline().globalParameters.Environment} Environemnt \\n```Company: @{variables('Company')} \\nStore: @{variables('Store')} \\nWarehouse: @{variables('Warehouse')}``` \\n\\nDataFactoryName: @{pipeline().DataFactory} \\nPipelineName: @{pipeline().Pipeline} \\nError: @{variables('Error')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Error Copy_TO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_TO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "OrderType",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OrderType",
							"value": {
								"value": "@toUpper(pipeline().parameters.OrderType)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition_Check TO_PO",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Company",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Store",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Warehouse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set filename",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "OrderType",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "MaxOrderQty",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "isDualPurposeStore",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.OrderType, 'Transfer Order')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data to Dataverse_PO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": "SampleFileWithFTS.csv",
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "hso_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_fromwhsqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fromwhsqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_fts",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_fts",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "hso_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_orderquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_orderquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_purchaseorderlinesid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_purchaseorderlinesid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_sourceicwarehouse",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_sourceicwarehouse",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_store",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_store",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_storeminquantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storeminquantity",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "hso_storequantity",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_storequantity",
														"type": "Decimal"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataversePurchaseOrderLines",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_PO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_PO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFilePO",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreatePurchaseOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreatePurchaseOrderLines_v1_0_0",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												},
												"isDualPurposeStore": {
													"value": "@variables('isDualPurposeStore')",
													"type": "Expression"
												},
												"isItemGroupingEnabled": {
													"value": "@variables('ItemGroupingEnabled')",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"UOWarehouse": {},
												"DataExecutionsTO": {},
												"PurchaseOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_PO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreatePurchaseOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data to Dataverse_TO",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Azure Function_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@concat(variables('Filename'), '_Transformed.csv')",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "CommonDataServiceForAppsSink",
											"writeBatchSize": 100,
											"writeBehavior": "upsert",
											"ignoreNullValues": false,
											"bypassPowerAutomateFlows": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "cr5b1_createddate",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_createddate",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "cr5b1_dataarea",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_dataarea",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_fromwhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_fromwhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_item",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_item",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemdescription",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemdescription",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_itemvariant",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_itemvariant",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_site",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_site",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_size",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_size",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "cr5b1_towhs",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "cr5b1_towhs",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_batchid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_batchid",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_fromwhsstockqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_fromwhsstockqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_inboundorderqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_inboundorderqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_name",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_name",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "crd3c_storeavailqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeavailqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_storeminqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_storeminqty",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "crd3c_toqty",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_toqty",
														"type": "Decimal"
													}
												},
												{
													"source": {
														"name": "crd3c_transferorderid",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "crd3c_transferorderid",
														"type": "Guid"
													}
												},
												{
													"source": {
														"name": "hso_barcode",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_barcode",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "hso_batchnumber",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "hso_batchnumber",
														"type": "Int32"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DataverseTransferOrder",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Delete file_TO",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Copy data to Dataverse_TO",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "TempCsvFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"prefix": {
												"value": "@{variables('Filename')}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "CreateTransferOrderLines",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "1.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 60,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "CreateTransferOrderLines",
											"type": "DataFlowReference",
											"parameters": {
												"Company": {
													"value": "'@{variables('Company')}'",
													"type": "Expression"
												},
												"Store": {
													"value": "'@{variables('Store')}'",
													"type": "Expression"
												},
												"Warehouse": {
													"value": "'@{variables('Warehouse')}'",
													"type": "Expression"
												},
												"filename": {
													"value": "'@{variables('Filename')}'",
													"type": "Expression"
												},
												"TriggerSource": {
													"value": "'@{pipeline().parameters.TriggerSource}'",
													"type": "Expression"
												},
												"Container": {
													"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
													"type": "Expression"
												},
												"OrderType": {
													"value": "'@{variables('OrderType')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"Inventsum": {},
												"EcoResProduct": {},
												"EcoResProductTranslation": {},
												"UOWarehouse": {},
												"RecommendedOrderQty": {},
												"DataImportExecutions": {},
												"InventItemGroupItem": {},
												"DataExecutionsTO": {},
												"TransferOrdersSink": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"runConcurrently": true,
										"cacheSinks": {
											"firstRowOnly": true
										}
									}
								},
								{
									"name": "Azure Function_TO",
									"type": "AzureFunctionActivity",
									"dependsOn": [
										{
											"activity": "CreateTransferOrderLines",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"functionName": "PopulateBatchNumber",
										"body": {},
										"headers": {
											"fileName": {
												"value": "@variables('Filename')",
												"type": "Expression"
											},
											"maxOrderQty": {
												"value": "@variables('MaxOrderQty')",
												"type": "Expression"
											},
											"orderType": {
												"value": "@variables('OrderType')",
												"type": "Expression"
											},
											"itemGroupingEnabled": {
												"value": "@pipeline().parameters.ItemGroupingEnabled",
												"type": "Expression"
											}
										},
										"method": "POST"
									},
									"linkedServiceName": {
										"referenceName": "AzureFunction",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Set Error Copy_PO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Condition_Check TO_PO",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy data to Dataverse_PO').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "MaxOrderQty",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "MaxOrderQty",
							"value": {
								"value": "@pipeline().parameters.MaxOrderQty",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ItemGroupingEnabled",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ItemGroupingEnabled",
							"value": {
								"value": "@pipeline().parameters.ItemGroupingEnabled",
								"type": "Expression"
							}
						}
					},
					{
						"name": "isDualPurposeStore",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "isDualPurposeStore",
							"value": {
								"value": "@pipeline().parameters.isDualPurposeStore",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Company": {
						"type": "string"
					},
					"Store": {
						"type": "string"
					},
					"Warehouse": {
						"type": "string"
					},
					"TriggerSource": {
						"type": "string"
					},
					"OrderType": {
						"type": "string"
					},
					"MaxOrderQty": {
						"type": "string",
						"defaultValue": "0"
					},
					"ItemGroupingEnabled": {
						"type": "bool",
						"defaultValue": false
					},
					"isDualPurposeStore": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"variables": {
					"Filename": {
						"type": "String",
						"defaultValue": "guid()"
					},
					"Company": {
						"type": "String"
					},
					"Store": {
						"type": "String"
					},
					"Warehouse": {
						"type": "String"
					},
					"Error": {
						"type": "String"
					},
					"OrderType": {
						"type": "String"
					},
					"MaxOrderQty": {
						"type": "String"
					},
					"ItemGroupingEnabled": {
						"type": "Boolean"
					},
					"isDualPurposeStore": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "OL/CreateTOPO_Optimization"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-20T07:42:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TempCsvFilePO')]",
				"[concat(variables('factoryId'), '/datasets/DataversePurchaseOrderLines')]",
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_v1_0_0')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction')]",
				"[concat(variables('factoryId'), '/datasets/TempCsvFile')]",
				"[concat(variables('factoryId'), '/datasets/DataverseTransferOrder')]",
				"[concat(variables('factoryId'), '/dataflows/CreateTransferOrderLines')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateUOItemsCsv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateUOItemsCsv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateUOItemsCsv",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ecoResProduct": {},
									"EcoResProductVariantDimensionValue": {},
									"EcoResSize": {},
									"Translation": {},
									"InventItemBarcode": {},
									"LegalEntity": {},
									"EcoResDistinctProduct": {},
									"EcoResProductVariantSize": {},
									"sinkUOItem": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T13:19:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateUOItemsCsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Items')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete UOItems",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeleteUOItems",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"UOItem": {},
									"UOItemCsv": {},
									"sinkDelete": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T13:29:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DeleteUOItems')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProductTranslationSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EcoResProductTranslationSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcoResProductTranslationSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcoResProductTranslationSample": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EcoResProductTranslationSample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProduct_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "EcoResProduct_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "EcoResProduct_Sample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"EcoResProduct": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/EcoResProduct_Sample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesFull_Performance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesFull_Performance",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesFull_Performance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Performance"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T11:47:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ForecastSalesFull_Performance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesONUSONUK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ForecastSalesONUKONUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-15T20:35:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ForecastSalesSample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample_Performance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForecastSalesSample_Performance",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ForecastSalesSample_Performance",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ForecastSales": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Performance"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T11:47:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ForecastSalesSample_Performance')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventItemGroupSample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventItemGroupSample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventItemGroupSample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventItemGroupSample": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/InventItemGroupSample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventSum_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventSum_Sample",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventSum": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/InventSum_Sample')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventdimONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "InventdimONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "InventdimONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"InventdimONUKONUS": {},
									"ForecastSales": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/InventdimONUKONUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemsONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ItemONUK",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ItemsONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ItemONUK": {},
									"WriteToItemONUK": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ItemsONUKONUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/POCreate_Opt_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POCreate_Opt_1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_v1_0_0_Optimization",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"RecommendedOrderQty": {},
									"InventItemGroupItem": {},
									"UOWarehouse": {},
									"UOWarehousesTest": {},
									"UOWarehousesSource": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/CreateTOPO_Optimization"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-18T21:01:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_v1_0_0_Optimization')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/POCreate_Sample')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POCreate_Sample",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_SampleData",
								"type": "DataFlowReference",
								"parameters": {
									"Company": "'ONUK'",
									"Store": "'SOU-PF-STK'",
									"Warehouse": "'LUX-KN-STK'",
									"filename": "'SamplePO_1'",
									"TriggerSource": "'Manual'",
									"Container": "'dataverse-ontest-unqccd0037834be4cec846b41a3ea290'",
									"OrderType": "'Purchase Order'",
									"isDualPurposeStore": "true()"
								},
								"datasetParameters": {
									"EcoResProductSample": {},
									"EcoResProductTranslationSample": {},
									"RecommendedOrderQtySample": {},
									"DataImportExecutionsSample": {},
									"UOWarehouseSample": {},
									"InventSumSample": {},
									"InventItemGroupItemSample": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-11T20:03:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_SampleData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/POCreate_test')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "POCreate_test",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreatePurchaseOrderLines_v1_0_0",
								"type": "DataFlowReference",
								"parameters": {
									"Company": "'ONUK'",
									"Store": "'SOU-PF-STK'",
									"Warehouse": "'LUX-KN-STK'",
									"filename": "'SampleFileWithFTS'",
									"TriggerSource": "'Manual'",
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"OrderType": "'Purchase Order'",
									"isDualPurposeStore": "true()",
									"isItemGroupingEnabled": "true()"
								},
								"datasetParameters": {
									"Inventsum": {},
									"EcoResProduct": {},
									"EcoResProductTranslation": {},
									"RecommendedOrderQty": {},
									"DataImportExecutions": {},
									"InventItemGroupItem": {},
									"UOWarehouse": {},
									"DataExecutionsTO": {},
									"PurchaseOrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-17T12:13:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreatePurchaseOrderLines_v1_0_0')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResetMSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ResetMSL",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Reset MSL when no forecast",
								"type": "DataFlowReference",
								"parameters": {
									"companyFetchXML": "'<value>onuk</value>'",
									"CompanyList": "[['onuk']",
									"StoreList": "[['SOU-PF-STK']",
									"storeFetchXML": "'<value>SOU-PF-STK</value>'"
								},
								"datasetParameters": {
									"RecommendedOrderQty": {},
									"RecommendedOrderQtyResetMSL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/MSL - Forecast"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T20:41:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Reset MSL when no forecast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RevenuePerProduct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RevenuePerProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RevenuePerProduct": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-18T14:40:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RevenuePerProduct')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProductTest')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RevenuePerProductTest",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "RevenuePerProduct1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"RevenuePerProduct1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-18T14:40:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/RevenuePerProduct1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink Customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sink Customers",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "get_sinkfile_customers",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CustTable": {},
									"Intercompany": {},
									"olsinkcusttable": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/get_sinkfile_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sink Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sink vendors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "get_sinkfile_vendors",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"VendTable": {},
									"olsinkvendors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/get_sinkfile_vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Items')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create UOItems csv",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateUOItemsCsv",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ecoResProduct": {},
									"EcoResProductVariantDimensionValue": {},
									"EcoResSize": {},
									"Translation": {},
									"InventItemBarcode": {},
									"LegalEntity": {},
									"EcoResDistinctProduct": {},
									"EcoResProductVariantSize": {},
									"sinkUOItem": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Copy  Item csv to Dataverse",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create UOItems csv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Copy Items csv to Dataverse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create RecomOrderQty",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy  Item csv to Dataverse",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Sync Warehouses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create RecomOrderQty",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Sync Warehouses",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Sync Warehouses",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Container": {
									"value": "@pipeline().globalParameters.FO_Synapse_Container",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Send Failure message",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set Create RecomOrderQty Error",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Sync Warehouses Error",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set Copy Item Error",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set UI items Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@pipeline().globalParameters.SlackMessageLogicAppUrl",
								"type": "Expression"
							},
							"body": {
								"value": "{\n\"Channel\": \"stock-replenishment-app\",\n\"Message\": \" Inbound Data Run failed in @{pipeline().globalParameters.Environment} Environemnt \\nDataFactoryName: @{pipeline().DataFactory} \\nPipelineName: @{pipeline().Pipeline} \\nError: @{variables('Error')}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set UI items Error",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create UOItems csv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Create UOItems csv').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Copy Item Error",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy  Item csv to Dataverse",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Copy  Item csv to Dataverse').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Sync Warehouses Error",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Sync Warehouses",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Sync Warehouses').error?.message",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Create RecomOrderQty Error",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create RecomOrderQty",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Error",
							"value": {
								"value": "@activity('Create RecomOrderQty').error?.message",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T11:19:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateUOItemsCsv')]",
				"[concat(variables('factoryId'), '/pipelines/Copy Items csv to Dataverse')]",
				"[concat(variables('factoryId'), '/pipelines/Create RecomOrderQty')]",
				"[concat(variables('factoryId'), '/pipelines/Sync Warehouses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync MSL to Forecast Sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create msl based on forecast",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ResetMSL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Sync MSL based on forecast sales",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									},
									"CompanyList": {
										"value": "@variables('CompanyList')",
										"type": "Expression"
									},
									"companyFetchXML": {
										"value": "'@{variables('companyFetchXML')}'",
										"type": "Expression"
									},
									"storeList": {
										"value": "@variables('StoreList')",
										"type": "Expression"
									},
									"storeFetchXML": {
										"value": "'@{variables('storeFetchXML')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UOItem": {},
									"InventDim": {},
									"ForecastSales": {},
									"UOWarehouses": {},
									"MSLcreateCSV": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LookupDualPurposeCompanies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "CommonDataServiceForAppsSource",
								"query": {
									"value": "<fetch version=\"1.0\"\n       mapping=\"logical\"\n       distinct=\"true\"\n       savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\"\n       no-lock=\"false\">\n\t<entity name=\"crd3c_uowarehouses\">\n\t\t<attribute name=\"statecode\"/>\n\t\t<attribute name=\"crd3c_uowarehousesid\"/>\n\t\t<attribute name=\"crd3c_name\"/>\n\t\t<attribute name=\"crd3c_dataarea\"/>\n\t\t<filter type=\"and\">\n\t\t\t<condition attribute=\"statecode\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"0\"/>\n\t\t\t<condition attribute=\"hso_dualpurpose\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t\t<condition attribute=\"crd3c_warehousetype\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"STOCK\"/>\n\t\t\t<condition attribute=\"hso_ordertypesplit\"\n\t\t\t           operator=\"eq\"\n\t\t\t           value=\"1\"/>\n\t\t</filter>\n\t</entity>\n</fetch>",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DualPurposeCompanies",
						"description": "Iterate all dual purpose companies",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupDualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupDualPurposeCompanies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Check for duplicates",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@not(contains(variables('CompanyList'), item().crd3c_dataarea))\n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "AddCompany",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "CompanyList",
													"value": {
														"value": "@item().crd3c_dataarea",
														"type": "Expression"
													}
												}
											},
											{
												"name": "AddStore",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "StoreList",
													"value": {
														"value": "@item().crd3c_name",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "companyFetchXML",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "companyFetchXML",
							"value": {
								"value": "@concat('<value>', join(variables('CompanyList'), '</value><value>'), '</value>')\n",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ResetMSL",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "companyFetchXML",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "storeFetchXML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Reset MSL when no forecast",
								"type": "DataFlowReference",
								"parameters": {
									"companyFetchXML": {
										"value": "'@{variables('companyFetchXML')}'",
										"type": "Expression"
									},
									"CompanyList": {
										"value": "@variables('CompanyList')",
										"type": "Expression"
									},
									"StoreList": {
										"value": "@variables('StoreList')",
										"type": "Expression"
									},
									"storeFetchXML": {
										"value": "'@{variables('storeFetchXML')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"RecommendedOrderQty": {},
									"RecommendedOrderQtyResetMSL": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "storeFetchXML",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DualPurposeCompanies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "storeFetchXML",
							"value": {
								"value": "@concat('<value>', join(variables('StoreList'), '</value><value>'), '</value>')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyMSLToDataverse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create msl based on forecast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "RecOrderQtyVS.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "CommonDataServiceForAppsSink",
								"writeBatchSize": 999,
								"writeBehavior": "upsert",
								"ignoreNullValues": false,
								"alternateKeyName": "crd3c_key",
								"bypassPowerAutomateFlows": false
							},
							"enableStaging": false,
							"parallelCopies": 30,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyList": {
						"type": "Array"
					},
					"companiesString": {
						"type": "String"
					},
					"companyFetchXML": {
						"type": "String"
					},
					"StoreList": {
						"type": "Array"
					},
					"storeFetchXML": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-21T20:41:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Sync MSL based on forecast sales')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/dataflows/Reset MSL when no forecast')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile_virtualStore')]",
				"[concat(variables('factoryId'), '/datasets/RecommendedOrderQty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Vendors IC 4 Way')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sync Vendors IC 4 Way",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncVendors_CustWH_SourcingWH_Test",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InterCompanyTradingPartner": {},
									"Party": {},
									"InterCompanyTradingRelationVendor": {},
									"myTempFile": {},
									"CustTableTmp": {},
									"Vendors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Container": {
						"type": "string"
					}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SyncVendors_CustWH_SourcingWH_Test')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Vendors ONKR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SyncVendorWH_IntercompanyChain4",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncVendors_CustWH_SourcingWH",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Vendors": {},
									"Customers": {},
									"InterCompanyTradingPartner": {},
									"Party": {},
									"InterCompanyTradingRelationVendor": {},
									"OLTestSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SyncVendors_CustWH_SourcingWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Vendors",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DeleteVendors",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"VendTable": {},
									"Vendors": {},
									"DeleteVendors": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Sync Vendors",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Delete Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncVendors",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Vendors": {},
									"UOWarehouses": {},
									"InterCompanyTradingRelationCustomer": {},
									"Customers": {},
									"InterCompanyTradingPartner": {},
									"Party": {},
									"InterCompanyTradingRelationVendor": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Sync Vendors_SourcingWH",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Sync Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncVendors_SourcingWH",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().globalParameters.FO_Synapse_Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Vendors": {},
									"UOWarehouses": {},
									"InterCompanyTradingRelationCustomer": {},
									"Customers": {},
									"InterCompanyTradingPartner": {},
									"Party": {},
									"InterCompanyTradingRelationVendor": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-09-12T11:42:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DeleteVendors')]",
				"[concat(variables('factoryId'), '/dataflows/SyncVendors')]",
				"[concat(variables('factoryId'), '/dataflows/SyncVendors_SourcingWH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync Warehouses')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Sync Warehouses",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SyncOUWarehouse",
								"type": "DataFlowReference",
								"parameters": {
									"Container": {
										"value": "'@{pipeline().parameters.Container}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InventLocation": {},
									"SinkOUWarehouse": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Container": {
						"type": "string"
					}
				},
				"variables": {
					"Error": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T11:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SyncOUWarehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync forecast sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sync forecast sales",
				"activities": [
					{
						"name": "Sync forecast sales",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Sync forecast sales",
								"type": "DataFlowReference",
								"parameters": {
									"Container": "'dataverse-ontest-unqccd0037834be4cec846b41a3ea29'"
								},
								"datasetParameters": {
									"ForecastSalesSource": {},
									"ForecastSalesTmp": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Sync forecast sales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Virtual store qtys')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Virtual store qtys",
				"activities": [
					{
						"name": "CreateRecQty_VS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "CreateRecOrderQtyCsv_VirtualStores_v1",
								"type": "DataFlowReference",
								"parameters": {
									"Container": "'dataverse-ontest-unqccd0037834be4cec846b41a3ea290'"
								},
								"datasetParameters": {
									"ForecastSalesONUKONUS": {},
									"BarcodeONUKONUS": {},
									"InventdimONUKONUS": {},
									"ItemONUKONUS": {},
									"WHONUKONUS": {},
									"createCsv": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-05T14:54:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/CreateRecOrderQtyCsv_VirtualStores_v1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WHONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "WarehouseONUKONUS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "WarehouseONUKONUS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"WHONUKONUS": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "OL/Sample"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-06T12:03:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/WarehouseONUKONUS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/isDualPurpose')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "isDualPurpose",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('isDualPurpose')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Wait for false",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Wait for true",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					},
					{
						"name": "isDualPurpose",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "isDualPurpose",
							"value": {
								"value": "@pipeline().parameters.isDualPurpose",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "BooleanValueTest",
								"type": "DataFlowReference",
								"parameters": {
									"isDualPurpose": {
										"value": "@variables('isDualPurpose')",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"WH": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"isDualPurpose": {
						"type": "bool"
					}
				},
				"variables": {
					"isDualPurpose": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-07T15:10:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/BooleanValueTest')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test011111')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dummyfile",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dummyorders",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"dummyorders": {},
									"dummycompany": {},
									"testOrders": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"lastPublishTime": "2025-09-18T14:40:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dummyorders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1ME10030553')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "1ME10030553.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "salesqty",
						"type": "String"
					},
					{
						"name": "inventdimid",
						"type": "String"
					},
					{
						"name": "startdate",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BarcodeONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "BarcodeONUKONUS.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "inventdimid",
						"type": "String"
					},
					{
						"name": "itembarcode",
						"type": "String"
					},
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "dataareaid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataImportExecution')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_dataimportexecution"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataversePurchaseOrderLines')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "hso_purchaseorderlines"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataverseTransferOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_transferorder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProductSample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "EcoResProduct_Sample.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "displayproductnumber",
						"type": "String"
					},
					{
						"name": "searchname",
						"type": "String"
					},
					{
						"name": "recid",
						"type": "String"
					},
					{
						"name": "partition",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "hso_recommendedorderqty_virtualwebstore"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ForecastSalesONUKONUS.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "salesqty",
						"type": "String"
					},
					{
						"name": "inventdimid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ForecastSalesSample.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "startdate",
						"type": "String"
					},
					{
						"name": "inventdimid",
						"type": "String"
					},
					{
						"name": "salesqty",
						"type": "String"
					},
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "suntafforecastchannelid",
						"type": "String"
					},
					{
						"name": "modelid",
						"type": "String"
					},
					{
						"name": "custgroupid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventItemGroupSample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "InventItemGroupSample.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "itemgroupid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventdimONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "InventdimONUKONUS.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "inventdimid",
						"type": "String"
					},
					{
						"name": "inventlocationid",
						"type": "String"
					},
					{
						"name": "inventsizeid",
						"type": "String"
					},
					{
						"name": "dataareaid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inventory')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/MinimumStockTask"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Inventory.xlsx",
						"folderPath": "JL/MinimumStockTask",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Item')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/MinimumStockTask"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Item.xlsx",
						"folderPath": "JL/MinimumStockTask",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ItemONUKONUS.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_barcode",
						"type": "String"
					},
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_size",
						"type": "String"
					},
					{
						"name": "crd3c_simpleid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LegalEntity')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_legalentities"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MinimumStockLevel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/MinimumStockTask"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "MinimumStockLevel.xlsx",
						"folderPath": "JL/MinimumStockTask",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OL_13082025_0914')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OL-13082025-0914.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "SinkCreatedOn",
						"type": "String"
					},
					{
						"name": "SinkModifiedOn",
						"type": "String"
					},
					{
						"name": "bidonly",
						"type": "String"
					},
					{
						"name": "blocked",
						"type": "String"
					},
					{
						"name": "cashaccountingregime_es",
						"type": "String"
					},
					{
						"name": "changerequestallowoverride",
						"type": "String"
					},
					{
						"name": "changerequestenabled",
						"type": "String"
					},
					{
						"name": "changerequestoverride",
						"type": "String"
					},
					{
						"name": "cisstatus",
						"type": "String"
					},
					{
						"name": "companytype_mx",
						"type": "String"
					},
					{
						"name": "disabledowned",
						"type": "String"
					},
					{
						"name": "fatcafilingrequirement",
						"type": "String"
					},
					{
						"name": "femaleowned",
						"type": "String"
					},
					{
						"name": "foreignentityindicator",
						"type": "String"
					},
					{
						"name": "foreignresident_ru",
						"type": "String"
					},
					{
						"name": "heir_it",
						"type": "String"
					},
					{
						"name": "hubzone",
						"type": "String"
					},
					{
						"name": "icmscontributor_br",
						"type": "String"
					},
					{
						"name": "incltax",
						"type": "String"
					},
					{
						"name": "inventprofiletype_ru",
						"type": "String"
					},
					{
						"name": "ispaymfeecovered_jp",
						"type": "String"
					},
					{
						"name": "isresident_lv",
						"type": "String"
					},
					{
						"name": "locallyowned",
						"type": "String"
					},
					{
						"name": "mandatoryvatdate_pl",
						"type": "String"
					},
					{
						"name": "matchingpolicy",
						"type": "String"
					},
					{
						"name": "minorityowned",
						"type": "String"
					},
					{
						"name": "nontaxable_br",
						"type": "String"
					},
					{
						"name": "offsetaccounttype",
						"type": "String"
					},
					{
						"name": "onetimevendor",
						"type": "String"
					},
					{
						"name": "operationtype_mx",
						"type": "String"
					},
					{
						"name": "presencetype_br",
						"type": "String"
					},
					{
						"name": "purchamountpurchaseorder",
						"type": "String"
					},
					{
						"name": "secondtin",
						"type": "String"
					},
					{
						"name": "servicecodeondlvaddress_br",
						"type": "String"
					},
					{
						"name": "smallbusiness",
						"type": "String"
					},
					{
						"name": "tax1099namechoice",
						"type": "String"
					},
					{
						"name": "tax1099reports",
						"type": "String"
					},
					{
						"name": "taxidtype",
						"type": "String"
					},
					{
						"name": "taxwithholdcalculate",
						"type": "String"
					},
					{
						"name": "taxwithholdvendortype_th",
						"type": "String"
					},
					{
						"name": "unitedvatinvoice_lt",
						"type": "String"
					},
					{
						"name": "usecashdisc",
						"type": "String"
					},
					{
						"name": "vatpartnerkind_ru",
						"type": "String"
					},
					{
						"name": "vattaxagent_ru",
						"type": "String"
					},
					{
						"name": "vendconsumption_br",
						"type": "String"
					},
					{
						"name": "vendortype_mx",
						"type": "String"
					},
					{
						"name": "veteranowned",
						"type": "String"
					},
					{
						"name": "w9",
						"type": "String"
					},
					{
						"name": "w9included",
						"type": "String"
					},
					{
						"name": "vendvendorcollaborationtype",
						"type": "String"
					},
					{
						"name": "withholdingtaxpayertype_mx",
						"type": "String"
					},
					{
						"name": "originalvendorinreporting_it",
						"type": "String"
					},
					{
						"name": "isselfinvoicevendor_it",
						"type": "String"
					},
					{
						"name": "workflowstate",
						"type": "String"
					},
					{
						"name": "iscprb_br",
						"type": "String"
					},
					{
						"name": "cxmlorderenable",
						"type": "String"
					},
					{
						"name": "vatnumtabletype",
						"type": "String"
					},
					{
						"name": "overridesalestax",
						"type": "String"
					},
					{
						"name": "accruesalestaxtype",
						"type": "String"
					},
					{
						"name": "taxvendorchargetaxtolerancevalidation",
						"type": "String"
					},
					{
						"name": "revenuetypology_it",
						"type": "String"
					},
					{
						"name": "ispublicsector_it",
						"type": "String"
					},
					{
						"name": "istaxationoverpayroll_br",
						"type": "String"
					},
					{
						"name": "einvoiceregister_it",
						"type": "String"
					},
					{
						"name": "isunidentifiedbenef_br",
						"type": "String"
					},
					{
						"name": "itmimportcostingvendor",
						"type": "String"
					},
					{
						"name": "itmservicesprovider",
						"type": "String"
					},
					{
						"name": "itmvendtype",
						"type": "String"
					},
					{
						"name": "exf_porequired",
						"type": "String"
					},
					{
						"name": "exf_classified",
						"type": "String"
					},
					{
						"name": "exf_vendorportalinvoicesmustbeapproved",
						"type": "String"
					},
					{
						"name": "exf_istmsfreight",
						"type": "String"
					},
					{
						"name": "sunplmsyncwithplm",
						"type": "String"
					},
					{
						"name": "hsooscaenabled",
						"type": "String"
					},
					{
						"name": "hsogitincludevendorinquery",
						"type": "String"
					},
					{
						"name": "oninterface",
						"type": "String"
					},
					{
						"name": "onsourcingdeliverytype",
						"type": "String"
					},
					{
						"name": "onsourcingupdatechain",
						"type": "String"
					},
					{
						"name": "onpoplacementenabled",
						"type": "String"
					},
					{
						"name": "sysdatastatecode",
						"type": "String"
					},
					{
						"name": "taxwithholdgroup",
						"type": "String"
					},
					{
						"name": "residenceforeigncountryregionid",
						"type": "String"
					},
					{
						"name": "paymtermid",
						"type": "String"
					},
					{
						"name": "linedisc",
						"type": "String"
					},
					{
						"name": "accountnum",
						"type": "String"
					},
					{
						"name": "bankaccount",
						"type": "String"
					},
					{
						"name": "bankcentralbankpurposecode",
						"type": "String"
					},
					{
						"name": "bankcentralbankpurposetext",
						"type": "String"
					},
					{
						"name": "bankcentralbanktranstypecur_ru",
						"type": "String"
					},
					{
						"name": "bankorderofpayment_ru",
						"type": "String"
					},
					{
						"name": "birthcountycode_it",
						"type": "String"
					},
					{
						"name": "birthplace",
						"type": "String"
					},
					{
						"name": "blockedreleasedate",
						"type": "String"
					},
					{
						"name": "cashdisc",
						"type": "String"
					},
					{
						"name": "ccmnum_br",
						"type": "String"
					},
					{
						"name": "ciscompanyregnum",
						"type": "String"
					},
					{
						"name": "cisnationalinsurancenum",
						"type": "String"
					},
					{
						"name": "cisuniquetaxpayerref",
						"type": "String"
					},
					{
						"name": "cisverificationdate",
						"type": "String"
					},
					{
						"name": "cisverificationnum",
						"type": "String"
					},
					{
						"name": "clearingperiod",
						"type": "String"
					},
					{
						"name": "cnae_br",
						"type": "String"
					},
					{
						"name": "cnpjcpfnum_br",
						"type": "String"
					},
					{
						"name": "commercialregister",
						"type": "String"
					},
					{
						"name": "commercialregisterinsetnumber",
						"type": "String"
					},
					{
						"name": "commercialregistersection",
						"type": "String"
					},
					{
						"name": "companychainid",
						"type": "String"
					},
					{
						"name": "companyidsiret",
						"type": "String"
					},
					{
						"name": "companynafcode",
						"type": "String"
					},
					{
						"name": "consday_jp",
						"type": "String"
					},
					{
						"name": "contactpersonid",
						"type": "String"
					},
					{
						"name": "creditmax",
						"type": "String"
					},
					{
						"name": "creditrating",
						"type": "String"
					},
					{
						"name": "curp_mx",
						"type": "String"
					},
					{
						"name": "currency",
						"type": "String"
					},
					{
						"name": "dba",
						"type": "String"
					},
					{
						"name": "defaultdimension",
						"type": "String"
					},
					{
						"name": "defaultinventstatusid",
						"type": "String"
					},
					{
						"name": "destinationcodeid",
						"type": "String"
					},
					{
						"name": "diotcountrycode_mx",
						"type": "String"
					},
					{
						"name": "dlvmode",
						"type": "String"
					},
					{
						"name": "dlvterm",
						"type": "String"
					},
					{
						"name": "enddisc",
						"type": "String"
					},
					{
						"name": "enterprisenumber",
						"type": "String"
					},
					{
						"name": "ethnicoriginid",
						"type": "String"
					},
					{
						"name": "factoringaccount",
						"type": "String"
					},
					{
						"name": "finecode_br",
						"type": "String"
					},
					{
						"name": "fiscalcode",
						"type": "String"
					},
					{
						"name": "foreignerid_br",
						"type": "String"
					},
					{
						"name": "foreigntaxregistration_mx",
						"type": "String"
					},
					{
						"name": "freightzone",
						"type": "String"
					},
					{
						"name": "ienum_br",
						"type": "String"
					},
					{
						"name": "insscei_br",
						"type": "String"
					},
					{
						"name": "intbank_lv",
						"type": "String"
					},
					{
						"name": "interestcode_br",
						"type": "String"
					},
					{
						"name": "inventlocation",
						"type": "String"
					},
					{
						"name": "inventprofileid_ru",
						"type": "String"
					},
					{
						"name": "inventsiteid",
						"type": "String"
					},
					{
						"name": "invoiceaccount",
						"type": "String"
					},
					{
						"name": "itembuyergroupid",
						"type": "String"
					},
					{
						"name": "lineofbusinessid",
						"type": "String"
					},
					{
						"name": "lvpaymtranscodes",
						"type": "String"
					},
					{
						"name": "maincontactworker",
						"type": "String"
					},
					{
						"name": "markupgroup",
						"type": "String"
					},
					{
						"name": "memo",
						"type": "String"
					},
					{
						"name": "multilinedisc",
						"type": "String"
					},
					{
						"name": "namecontrol",
						"type": "String"
					},
					{
						"name": "nationality_mx",
						"type": "String"
					},
					{
						"name": "nit_br",
						"type": "String"
					},
					{
						"name": "numbersequencegroup",
						"type": "String"
					},
					{
						"name": "offsetledgerdimension",
						"type": "String"
					},
					{
						"name": "organizationnumber",
						"type": "String"
					},
					{
						"name": "orgid",
						"type": "String"
					},
					{
						"name": "party",
						"type": "String"
					},
					{
						"name": "paymdayid",
						"type": "String"
					},
					{
						"name": "paymid",
						"type": "String"
					},
					{
						"name": "paymmode",
						"type": "String"
					},
					{
						"name": "paymsched",
						"type": "String"
					},
					{
						"name": "paymspec",
						"type": "String"
					},
					{
						"name": "pricegroup",
						"type": "String"
					},
					{
						"name": "purchcalendarid",
						"type": "String"
					},
					{
						"name": "purchpoolid",
						"type": "String"
					},
					{
						"name": "rfc_mx",
						"type": "String"
					},
					{
						"name": "segmentid",
						"type": "String"
					},
					{
						"name": "separatedivisionid_ru",
						"type": "String"
					},
					{
						"name": "stateinscription_mx",
						"type": "String"
					},
					{
						"name": "structdepartment_ru",
						"type": "String"
					},
					{
						"name": "subsegmentid",
						"type": "String"
					},
					{
						"name": "suppitemgroupid",
						"type": "String"
					},
					{
						"name": "tamrebategroupid",
						"type": "String"
					},
					{
						"name": "tax1099fields",
						"type": "String"
					},
					{
						"name": "tax1099regnum",
						"type": "String"
					},
					{
						"name": "taxgroup",
						"type": "String"
					},
					{
						"name": "taxperiodpaymentcode_pl",
						"type": "String"
					},
					{
						"name": "vatnum",
						"type": "String"
					},
					{
						"name": "vatoperationcode_ru",
						"type": "String"
					},
					{
						"name": "vendexceptiongroup",
						"type": "String"
					},
					{
						"name": "vendgroup",
						"type": "String"
					},
					{
						"name": "vendincomecode_br",
						"type": "String"
					},
					{
						"name": "vendinvoicedeclaration_is",
						"type": "String"
					},
					{
						"name": "venditemgroupid",
						"type": "String"
					},
					{
						"name": "vendorportaladministratorrecid",
						"type": "String"
					},
					{
						"name": "vendpaymfeegroup_jp",
						"type": "String"
					},
					{
						"name": "vendpricetolerancegroupid",
						"type": "String"
					},
					{
						"name": "youraccountnum",
						"type": "String"
					},
					{
						"name": "legalrepresentativecurp_mx",
						"type": "String"
					},
					{
						"name": "legalrepresentativename_mx",
						"type": "String"
					},
					{
						"name": "legalrepresentativerfc_mx",
						"type": "String"
					},
					{
						"name": "withholdingtypecode_mx",
						"type": "String"
					},
					{
						"name": "birthdate",
						"type": "String"
					},
					{
						"name": "regnum_w",
						"type": "String"
					},
					{
						"name": "enterprisecode",
						"type": "String"
					},
					{
						"name": "vatnumrecid",
						"type": "String"
					},
					{
						"name": "purchaseshipcalendarid",
						"type": "String"
					},
					{
						"name": "taxvendorchargetaxtoleranceamount",
						"type": "String"
					},
					{
						"name": "taxvendorchargetaxtolerancepercent",
						"type": "String"
					},
					{
						"name": "freenotesgroup_it",
						"type": "String"
					},
					{
						"name": "coderevenuetypology_it",
						"type": "String"
					},
					{
						"name": "itmfromport",
						"type": "String"
					},
					{
						"name": "itmoverundertolerancegroupid",
						"type": "String"
					},
					{
						"name": "itmagent",
						"type": "String"
					},
					{
						"name": "itmvendaccount",
						"type": "String"
					},
					{
						"name": "itmcosttypegroupid",
						"type": "String"
					},
					{
						"name": "exf_systemapprovalgroupid",
						"type": "String"
					},
					{
						"name": "exf_invoicetype",
						"type": "String"
					},
					{
						"name": "gupdiscountvendorclaimgroupname",
						"type": "String"
					},
					{
						"name": "hsolocalname",
						"type": "String"
					},
					{
						"name": "onsourcingvendaccount",
						"type": "String"
					},
					{
						"name": "onsource",
						"type": "String"
					},
					{
						"name": "onexternalid",
						"type": "String"
					},
					{
						"name": "vrmglobalvendor",
						"type": "String"
					},
					{
						"name": "modifieddatetime",
						"type": "String"
					},
					{
						"name": "modifiedby",
						"type": "String"
					},
					{
						"name": "modifiedtransactionid",
						"type": "String"
					},
					{
						"name": "createddatetime",
						"type": "String"
					},
					{
						"name": "createdby",
						"type": "String"
					},
					{
						"name": "createdtransactionid",
						"type": "String"
					},
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "recversion",
						"type": "String"
					},
					{
						"name": "partition",
						"type": "String"
					},
					{
						"name": "sysrowversion",
						"type": "String"
					},
					{
						"name": "recid",
						"type": "String"
					},
					{
						"name": "tableid",
						"type": "String"
					},
					{
						"name": "versionnumber",
						"type": "String"
					},
					{
						"name": "createdon",
						"type": "String"
					},
					{
						"name": "modifiedon",
						"type": "String"
					},
					{
						"name": "IsDelete",
						"type": "String"
					},
					{
						"name": "createdonpartition",
						"type": "String"
					},
					{
						"name": "PartitionId",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OL_Tmp_CustTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "OL-CustTable20250813.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "vendorId",
						"type": "String"
					},
					{
						"name": "party",
						"type": "String"
					},
					{
						"name": "inventlocation",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProductCategories')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ProductsCategories.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecomOrderQtyCsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RecomOrderQty.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "crd3c_variantname",
						"type": "String"
					},
					{
						"name": "crd3c_barcode",
						"type": "String"
					},
					{
						"name": "crd3c_productnumber",
						"type": "String"
					},
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_size",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecomOrderQtyCsvFile_virtualStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RecOrderQtyVS.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "crd3c_variantname",
						"type": "String"
					},
					{
						"name": "crd3c_barcode",
						"type": "String"
					},
					{
						"name": "crd3c_productnumber",
						"type": "String"
					},
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_size",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecommendedOrderQty')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_orderqties"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProduct')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "new 16",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RevenuePerProduct.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProduct1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "new_16",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RevenuePerProduct1.xls",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TempCsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cr5b1_dataarea",
						"type": "String"
					},
					{
						"name": "cr5b1_item",
						"type": "String"
					},
					{
						"name": "cr5b1_size",
						"type": "String"
					},
					{
						"name": "cr5b1_site",
						"type": "String"
					},
					{
						"name": "crd3c_storeavailqty",
						"type": "String"
					},
					{
						"name": "cr5b1_itemvariant",
						"type": "String"
					},
					{
						"name": "crd3c_storeminqty",
						"type": "String"
					},
					{
						"name": "cr5b1_itemdescription",
						"type": "String"
					},
					{
						"name": "cr5b1_towhs",
						"type": "String"
					},
					{
						"name": "cr5b1_fromwhs",
						"type": "String"
					},
					{
						"name": "crd3c_fromwhsstockqty",
						"type": "String"
					},
					{
						"name": "crd3c_inboundorderqty",
						"type": "String"
					},
					{
						"name": "crd3c_batchid",
						"type": "String"
					},
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "crd3c_toqty",
						"type": "String"
					},
					{
						"name": "cr5b1_createddate",
						"type": "String"
					},
					{
						"name": "crd3c_transferorderid",
						"type": "String"
					},
					{
						"name": "hso_barcode",
						"type": "String"
					},
					{
						"name": "hso_batchnumber",
						"type": "String"
					},
					{
						"name": "hso_itemgroupid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TempCsvFilePO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "hso_dataarea",
						"type": "String"
					},
					{
						"name": "hso_fromwhsqty",
						"type": "String"
					},
					{
						"name": "hso_inboundorderqty",
						"type": "String"
					},
					{
						"name": "hso_item",
						"type": "String"
					},
					{
						"name": "hso_itemdescription",
						"type": "String"
					},
					{
						"name": "hso_itemvariant",
						"type": "String"
					},
					{
						"name": "hso_name",
						"type": "String"
					},
					{
						"name": "hso_orderquantity",
						"type": "String"
					},
					{
						"name": "hso_ponumber",
						"type": "String"
					},
					{
						"name": "hso_ponumbername",
						"type": "String"
					},
					{
						"name": "hso_purchaseorderlinesid",
						"type": "String"
					},
					{
						"name": "hso_purchaseorderplaced",
						"type": "String"
					},
					{
						"name": "hso_purchaseorderplacedname",
						"type": "String"
					},
					{
						"name": "hso_site",
						"type": "String"
					},
					{
						"name": "hso_size",
						"type": "String"
					},
					{
						"name": "hso_sourceicwarehouse",
						"type": "String"
					},
					{
						"name": "hso_store",
						"type": "String"
					},
					{
						"name": "hso_storeminquantity",
						"type": "String"
					},
					{
						"name": "hso_storequantity",
						"type": "String"
					},
					{
						"name": "hso_batchid",
						"type": "String"
					},
					{
						"name": "hso_barcode",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UOItem')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_uoitem"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UOItemCsvFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UOItem.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "crd3c_variantname",
						"type": "String"
					},
					{
						"name": "crd3c_barcode",
						"type": "String"
					},
					{
						"name": "crd3c_productnumber",
						"type": "String"
					},
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_size",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UOItemTemp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/General"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UOItemTmp_2.csv",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_barcode",
						"type": "String"
					},
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_datastatus",
						"type": "String"
					},
					{
						"name": "crd3c_datastatusname",
						"type": "String"
					},
					{
						"name": "crd3c_gender",
						"type": "String"
					},
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "crd3c_productnumber",
						"type": "String"
					},
					{
						"name": "crd3c_simpleid",
						"type": "String"
					},
					{
						"name": "crd3c_size",
						"type": "String"
					},
					{
						"name": "crd3c_uoitemid",
						"type": "String"
					},
					{
						"name": "crd3c_variantname",
						"type": "String"
					},
					{
						"name": "createdbyname",
						"type": "String"
					},
					{
						"name": "createdbyyominame",
						"type": "String"
					},
					{
						"name": "createdon",
						"type": "String"
					},
					{
						"name": "createdonbehalfbyname",
						"type": "String"
					},
					{
						"name": "createdonbehalfbyyominame",
						"type": "String"
					},
					{
						"name": "importsequencenumber",
						"type": "String"
					},
					{
						"name": "modifiedbyname",
						"type": "String"
					},
					{
						"name": "modifiedbyyominame",
						"type": "String"
					},
					{
						"name": "modifiedon",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfbyname",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfbyyominame",
						"type": "String"
					},
					{
						"name": "overriddencreatedon",
						"type": "String"
					},
					{
						"name": "owneridname",
						"type": "String"
					},
					{
						"name": "owneridtype",
						"type": "String"
					},
					{
						"name": "owneridyominame",
						"type": "String"
					},
					{
						"name": "owningbusinessunitname",
						"type": "String"
					},
					{
						"name": "statecode",
						"type": "String"
					},
					{
						"name": "statecodename",
						"type": "String"
					},
					{
						"name": "statuscode",
						"type": "String"
					},
					{
						"name": "statuscodename",
						"type": "String"
					},
					{
						"name": "timezoneruleversionnumber",
						"type": "String"
					},
					{
						"name": "utcconversiontimezonecode",
						"type": "String"
					},
					{
						"name": "versionnumber",
						"type": "String"
					},
					{
						"name": "createdonbehalfby",
						"type": "String"
					},
					{
						"name": "owninguser",
						"type": "String"
					},
					{
						"name": "modifiedby",
						"type": "String"
					},
					{
						"name": "modifiedonbehalfby",
						"type": "String"
					},
					{
						"name": "ownerid",
						"type": "String"
					},
					{
						"name": "odata",
						"type": "String"
					},
					{
						"name": "createdby",
						"type": "String"
					},
					{
						"name": "owningbusinessunit",
						"type": "String"
					},
					{
						"name": "owningteam",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UOWarehouses')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "crd3c_uowarehouses"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vendors')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "powerappdataverse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CommonDataServiceForAppsEntity",
				"schema": [],
				"typeProperties": {
					"entityName": "hso_vendors"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WHONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "WHONUSONUK.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "crd3c_dataarea",
						"type": "String"
					},
					{
						"name": "crd3c_name",
						"type": "String"
					},
					{
						"name": "hso_vendor",
						"type": "String"
					},
					{
						"name": "crd3c_sourcewhname",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Warehouse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/MinimumStockTask"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Warehouse.xlsx",
						"folderPath": "JL/MinimumStockTask",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_company')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy_companies (1).xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy_orders.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "OL/Sample Data"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "inventSum_Sample.csv",
						"folderPath": "OL",
						"container": "whsstockreplenish"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dataareaid",
						"type": "String"
					},
					{
						"name": "itemid",
						"type": "String"
					},
					{
						"name": "inventsiteid",
						"type": "String"
					},
					{
						"name": "inventlocationid",
						"type": "String"
					},
					{
						"name": "availphysical",
						"type": "String"
					},
					{
						"name": "ordered",
						"type": "String"
					},
					{
						"name": "inventsizeid",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/testOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "storageaccount",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "JL/New folder"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Sheet1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test_Orders.xlsx",
						"folderPath": "JL",
						"container": "whsstockreplenish"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/D365FODataLake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('D365FODataLake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ONKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "D365foDataLakeStorageKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/D365FOSynapseDelta')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Synapse Delta source",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('D365FOSynapseDelta_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ONKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "D365foSynapseStorageKey"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ONKeys')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ONKeys_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/powerappdataverse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CommonDataServiceForApps",
				"typeProperties": {
					"deploymentType": "Online",
					"serviceUri": "https://org1d92e709.crm4.dynamics.com/",
					"authenticationType": "AADServicePrincipal",
					"servicePrincipalId": "[parameters('powerappdataverse_properties_typeProperties_servicePrincipalId')]",
					"servicePrincipalCredential": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ONKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "AppRegistrationClientSecret"
					},
					"servicePrincipalCredentialType": "ServicePrincipalKey"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storageaccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ONKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('storageaccount_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONKeys')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/once a day')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Sync Items",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Sync Vendors",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-07-08T05:00:00",
						"timeZone": "W. Europe Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Sync Items')]",
				"[concat(variables('factoryId'), '/pipelines/Sync Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/once a week')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2022-07-07T07:04:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							],
							"weekDays": [
								"Monday"
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BarcodeONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "BarcodeONUKONUS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "SelectMainCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          blocked as long,",
						"          retailshowforitem as long,",
						"          useforinput as long,",
						"          useforprinting as long,",
						"          hsoisuniqueidentifier as long,",
						"          sysdatastatecode as long,",
						"          barcodesetupid as string,",
						"          description as string,",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          qty as decimal(38,6),",
						"          retailvariantid as string,",
						"          unitid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventitembarcode_partitioned') ~> BarcodeONUKONUS",
						"BarcodeONUKONUS filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          inventdimid,",
						"          itembarcode,",
						"          itemid,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainCols",
						"SelectMainCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['BarcodeONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BooleanValueTest')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WHONUKONUS",
								"type": "DatasetReference"
							},
							"name": "WH"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     isDualPurpose as boolean",
						"}",
						"source(output(",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          hso_vendor as string,",
						"          crd3c_sourcewhname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WH",
						"derivedColumn1 filter(isDP == $isDualPurpose) ~> filter1",
						"WH derive(isDP = true()) ~> derivedColumn1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['BooleanTest'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WHONUKONUS')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateMSLOptimization_2_DirectSink')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Lookup activity, array of companies, Dataverse query taking in the array.",
				"folder": {
					"name": "OL/MSL Sync"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventDim"
						},
						{
							"dataset": {
								"referenceName": "ForecastSalesSample",
								"type": "DatasetReference"
							},
							"name": "ForecastSales"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filterModelCustGroupChannel"
						},
						{
							"name": "SelectItemIdForecastQtyInventDimId"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "MSL"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "joinMSL"
						},
						{
							"name": "filterCompany"
						},
						{
							"name": "JoinDualPurposeStores"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string,",
						"     CompanyList as string[],",
						"     companyFetchXML as string",
						"}",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><attribute name=\"crd3c_productnumber\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"crd3c_dataarea\" operator=\"in\">',$companyFetchXML,' </condition></filter></entity></fetch>')),",
						"     wildcardPaths:['UOItem.csv']) ~> UOItem",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
						"source(output(",
						"          itemid as string,",
						"          startdate as date,",
						"          inventdimid as string,",
						"          salesqty as integer,",
						"          dataareaid as string,",
						"          suntafforecastchannelid as string,",
						"          modelid as string,",
						"          custgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ForecastSales",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          statecode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/><condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"STOCK\"/><condition attribute=\"hso_ordertypesplit\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehouses",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && in($CompanyList, dataareaid)) ~> filterModelCustGroupChannel",
						"filterModelCustGroupChannel select(mapColumn(",
						"          itemid,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
						"joinMSL select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site = inventlocationid,",
						"          crd3c_dataarea = UOItem@crd3c_dataarea,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          hso_size = crd3c_size,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"JoinDualPurposeStores select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"CalculateMSL select(mapColumn(",
						"          crd3c_dataarea = dataareaid,",
						"          itemid,",
						"          salesqty,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid,",
						"          inventsizeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"UOWarehouses select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"UOItem, MSL join(crd3c_productnumber == itemid",
						"     && coalesce(crd3c_size, '') == coalesce(inventsizeid, '')",
						"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMSL",
						"InventDim filter(in($CompanyList, dataareaid)) ~> filterCompany",
						"filterCompany, SelectDualPurposeStores join(inventlocationid == crd3c_name,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDualPurposeStores",
						"filter1 alterRow(upsertIf(true())) ~> alterRow1",
						"AddMSL derive(crd3c_itemvariantlookup = concat('/crd3c_uoitems(',crd3c_itemvariantlookup, ')'),",
						"          crd3c_warehouselookup = concat('/crd3c_uowarehouses(', crd3c_warehouselookup, ')')) ~> derivedColumn1",
						"derivedColumn1 filter(crd3c_barcode == '7630867853759') ~> filter1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: false,",
						"     updateable: false,",
						"     upsertable: true,",
						"     alternateKeyName: 'crd3c_key',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site,",
						"          crd3c_dataarea,",
						"          crd3c_quantity,",
						"          crd3c_itemvariant,",
						"          crd3c_variantname,",
						"          {crd3c_ItemVariantLookup@odata.bind} = crd3c_itemvariantlookup,",
						"          hso_size,",
						"          {crd3c_WarehouseLookup@odata.bind} = crd3c_warehouselookup,",
						"          crd3c_name",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/ForecastSalesSample')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string,",
						"     Store as string,",
						"     Warehouse as string,",
						"     filename as string,",
						"     TriggerSource as string,",
						"     Container as string,",
						"     OrderType as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_icwarehousename as string,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\" /><attribute name=\"crd3c_dataarea\" /><attribute name=\"crd3c_site\" /><attribute name=\"crd3c_name\" /><attribute name=\"crd3c_itemvariant\" /><attribute name=\"crd3c_quantity\" /><attribute name=\"crd3c_barcode\" /><attribute name=\"createdon\" /><order attribute=\"crd3c_name\" descending=\"false\" /><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\" /></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter((coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty ))),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MinOrderQty = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MinOrderQty > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_SampleData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Including virtual/web stores",
				"folder": {
					"name": "OL/Create POs - Dual Purpose"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "EcoResProductSample",
								"type": "DatasetReference"
							},
							"name": "EcoResProductSample"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslationSample"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQtySample"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutionsSample"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouseSample"
						},
						{
							"dataset": {
								"referenceName": "inventSum_Sample",
								"type": "DatasetReference"
							},
							"name": "InventSumSample"
						},
						{
							"dataset": {
								"referenceName": "InventItemGroupSample",
								"type": "DatasetReference"
							},
							"name": "InventItemGroupItemSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum",
							"description": "Filtering rows using expressions on columns 'AVAILPHYSICAL, ORDERED, MinOrderQty' + hso_FTS"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string ('ONUK'),",
						"     Store as string ('SOU-PF-STK'),",
						"     Warehouse as string ('LUX-KN-STK'),",
						"     filename as string ('POCreate_Opt1'),",
						"     TriggerSource as string ('Manual'),",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     OrderType as string ('Purchase Order'),",
						"     isDualPurposeStore as boolean (true())",
						"}",
						"source(output(",
						"          displayproductnumber as string,",
						"          searchname as string,",
						"          recid as long,",
						"          partition as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     manifestType: 'manifest') ~> EcoResProductSample",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslationSample",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"b616874b-dc9e-ec11-b400-000d3ab75270\" no-lock=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_itemvariant\"/><attribute name=\"crd3c_name\"/><attribute name=\"createdon\"/><attribute name=\"modifiedon\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"hso_size\"/><order attribute=\"crd3c_dataarea\" descending=\"false\"/><order attribute=\"crd3c_site\" descending=\"false\"/><order attribute=\"hso_size\" descending=\"false\"/><attribute name=\"hso_fts\"/><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\"/><condition attribute=\"crd3c_dataarea\" operator=\"eq\" value=\"',$Company,'\"/><filter type=\"or\"><condition attribute=\"crd3c_quantity\" operator=\"gt\" value=\"0\"/><condition attribute=\"hso_fts\" operator=\"gt\" value=\"0\"/></filter></filter></entity></fetch>'))) ~> RecommendedOrderQtySample",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutionsSample",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouseSample",
						"source(output(",
						"          dataareaid as string,",
						"          itemid as string,",
						"          inventsiteid as string,",
						"          inventlocationid as string,",
						"          availphysical as integer,",
						"          ordered as integer,",
						"          inventsizeid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventSumSample",
						"source(output(",
						"          itemid as string,",
						"          itemgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventItemGroupItemSample",
						"InventSumSample derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter(iif($isDualPurposeStore, coalesce(AVAILPHYSICAL,0), coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProductSample select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslationSample filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif($isDualPurposeStore,\r",
						"    iif((crd3c_storeminqty-crd3c_storeavailqtyzero) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-crd3c_storeavailqtyzero)),\r",
						"    iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )))\r",
						"),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQtySample select(mapColumn(",
						"          crd3c_name,",
						"          FreeToSell = hso_fts,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MSL = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouseSample derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(MinOrderQty = coalesce(MSL,0) + coalesce(FreeToSell,0),",
						"          dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutionsSample select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouseSample lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouseSample@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouseSample@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItemSample select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/EcoResProductSample')]",
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/datasets/inventSum_Sample')]",
				"[concat(variables('factoryId'), '/datasets/InventItemGroupSample')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink3"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink4"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						},
						{
							"name": "select6"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string ('ONUK'),",
						"     Store as string ('SOU-PF-STK'),",
						"     Warehouse as string ('LUX-KN-STK'),",
						"     filename as string (\"cbb0e0c0-3ccc-417a-8c39-8831faf6d3a5\"),",
						"     TriggerSource as string ('Manual'),",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     OrderType as string ('PURCHASE ORDER')",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_icwarehousename as string,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\" /><attribute name=\"crd3c_dataarea\" /><attribute name=\"crd3c_site\" /><attribute name=\"crd3c_name\" /><attribute name=\"crd3c_itemvariant\" /><attribute name=\"crd3c_quantity\" /><attribute name=\"crd3c_barcode\" /><attribute name=\"createdon\" /><order attribute=\"crd3c_name\" descending=\"false\" /><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\" /></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter((coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty ))),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MinOrderQty = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MinOrderQty > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) && itemid == '2UE30800553') ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          each(match(/* All input columns */true()),",
						"               /* Input name */$$ = $$)",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink",
						"select6 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['sink1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"filterMinOrderQty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['RecOrderQty_Test_1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['sink2.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['sink3.csv'],",
						"     partitionBy('hash', 1)) ~> sink4"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_v1_0_0')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Including virtual/web stores",
				"folder": {
					"name": "OL/Create POs - Dual Purpose"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum",
							"description": "Filtering rows using expressions on columns 'AVAILPHYSICAL, ORDERED, MinOrderQty' + hso_FTS"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string,",
						"     Store as string,",
						"     Warehouse as string,",
						"     filename as string,",
						"     TriggerSource as string,",
						"     Container as string,",
						"     OrderType as string,",
						"     isDualPurposeStore as boolean,",
						"     isItemGroupingEnabled as boolean",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_itemvariant\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"createdon\"/><attribute name=\"hso_fts\"/><order attribute=\"crd3c_name\" descending=\"false\"/><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\"/></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter(iif($isDualPurposeStore, coalesce(AVAILPHYSICAL,0), coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MSL + FreeToSell) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          crd3c_storeminqty = MSL,",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid,",
						"          hso_fts = FreeToSell",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif($isDualPurposeStore,\r",
						"    iif((crd3c_storeminqty + hso_fts-crd3c_storeavailqtyzero) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty+hso_fts-crd3c_storeavailqtyzero)),\r",
						"    iif((crd3c_storeminqty + hso_fts-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty+hso_fts-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )))\r",
						"),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1,",
						"          hso_itemgroupid = iif($isItemGroupingEnabled, hso_itemgroupid, '00')) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          FreeToSell = hso_fts,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MSL = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MSL > 0 || FreeToSell > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          MSL = coalesce(MSL,0),",
						"          FreeToSell = coalesce(FreeToSell,0),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid,",
						"          hso_fts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_v1_0_0_Optimization')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Including virtual/web stores",
				"folder": {
					"name": "OL/Create POs - Dual Purpose"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "inventSum_Sample",
								"type": "DatasetReference"
							},
							"name": "Inventsum"
						},
						{
							"dataset": {
								"referenceName": "EcoResProductSample",
								"type": "DatasetReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						},
						{
							"dataset": {
								"referenceName": "InventItemGroupSample",
								"type": "DatasetReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehousesTest"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehousesSource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum",
							"description": "Filtering rows using expressions on columns 'AVAILPHYSICAL, ORDERED, MinOrderQty' + hso_FTS"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						},
						{
							"name": "select6"
						},
						{
							"name": "split1"
						},
						{
							"name": "SelectSourcingWH"
						},
						{
							"name": "BatchId"
						},
						{
							"name": "filter5"
						},
						{
							"name": "FullOuterJoinWithSourceWH"
						},
						{
							"name": "SelectStoreAndSourceStore"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string ('onuk'),",
						"     Store as string ('SOU-PF-STK'),",
						"     Warehouse as string ('LUX-KN-STK'),",
						"     filename as string ('Test'),",
						"     TriggerSource as string ('Manual'),",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     OrderType as string ('Purchase Order'),",
						"     isDualPurposeStore as boolean (true()),",
						"     isItemGroupingEnabled as boolean (true())",
						"}",
						"source(output(",
						"          dataareaid as string,",
						"          itemid as string,",
						"          inventsiteid as string,",
						"          inventlocationid as string,",
						"          availphysical as integer,",
						"          ordered as integer,",
						"          inventsizeid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          displayproductnumber as string,",
						"          searchname as string,",
						"          recid as string,",
						"          partition as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_itemvariant\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"createdon\"/><attribute name=\"hso_fts\"/><order attribute=\"crd3c_name\" descending=\"false\"/><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\"/><condition attribute=\"crd3c_dataarea\" operator=\"eq\" value=\"',$Company,'\"/></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"source(output(",
						"          itemid as string,",
						"          itemgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_resetfts as boolean,",
						"          hso_resetftsname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"hso_sourceicwarehouse\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_warehousename\"/><order attribute=\"hso_ordertypesplit\" descending=\"true\"/><order attribute=\"crd3c_warehousename\" descending=\"false\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"crd3c_name\" operator=\"eq\" value=\"',$Store,'\"/><condition attribute=\"crd3c_dataarea\" operator=\"eq\" value=\"',$Company,'\"/><condition attribute=\"hso_ordertypesplit\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>'))) ~> UOWarehousesTest",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_resetfts as boolean,",
						"          hso_resetftsname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_site\"/><attribute name=\"hso_sourceicwarehouse\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><filter type=\"or\"><condition attribute=\"crd3c_name\" operator=\"eq\" value=\"',$Store,'\"/><condition attribute=\"crd3c_name\" operator=\"eq\" value=\"',$Warehouse,'\"/></filter></filter></entity></fetch>'))) ~> UOWarehousesSource",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter(iif($isDualPurposeStore, coalesce(AVAILPHYSICAL,0), coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MSL + FreeToSell) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, SelectStoreAndSourceStore join(lower(crd3c_site) == lower(SelectStoreAndSourceStore@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(SOURCEINVENTLOCATIONID) == lower(STKINVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"filter5 select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          crd3c_storeminqty = MSL,",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = SelectStoreAndSourceStore@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = SelectStoreAndSourceStore@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = SOURCEINVENTLOCATIONID,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid,",
						"          hso_fts = FreeToSell",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif($isDualPurposeStore,\r",
						"    iif((crd3c_storeminqty + hso_fts-crd3c_storeavailqtyzero) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty+hso_fts-crd3c_storeavailqtyzero)),\r",
						"    iif((crd3c_storeminqty + hso_fts-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty+hso_fts-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )))\r",
						"),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1,",
						"          hso_itemgroupid = iif($isItemGroupingEnabled, hso_itemgroupid, '00')) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          FreeToSell = hso_fts,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MSL = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MSL > 0 || FreeToSell > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          MSL = coalesce(MSL,0),",
						"          FreeToSell = coalesce(FreeToSell,0),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"filter2 select(mapColumn(",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid,",
						"          hso_fts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"UOWarehousesSource select(mapColumn(",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTLOCATIONID = crd3c_name,",
						"          INVENTSITEID = crd3c_site,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select6",
						"select6 split(DATAAREAID == $Company && $Store == INVENTLOCATIONID,",
						"     disjoint: false) ~> split1@(Store, SourcingWarehouse)",
						"split1@SourcingWarehouse select(mapColumn(",
						"          SOURCEDATAAREAID = DATAAREAID,",
						"          SOURCEINVENTLOCATIONID = INVENTLOCATIONID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectSourcingWH",
						"FullOuterJoinWithSourceWH derive(crd3c_batchid = uuid()) ~> BatchId",
						"selectInventSum filter(ItemSize == '3ME10140264_7') ~> filter5",
						"split1@Store, SelectSourcingWH join(hso_sourceicwarehouse == SOURCEINVENTLOCATIONID,",
						"     joinType:'outer',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> FullOuterJoinWithSourceWH",
						"BatchId select(mapColumn(",
						"          DATAAREAID,",
						"          INVENTLOCATIONID,",
						"          INVENTSITEID,",
						"          SOURCEDATAAREAID,",
						"          SOURCEINVENTLOCATIONID,",
						"          crd3c_batchid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSourceStore",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inventSum_Sample')]",
				"[concat(variables('factoryId'), '/datasets/EcoResProductSample')]",
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/InventItemGroupSample')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreatePurchaseOrderLines_v1_0_0_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Including virtual/web stores",
				"folder": {
					"name": "OL/Create POs - Dual Purpose"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "PurchaseOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum",
							"description": "Filtering rows using expressions on columns 'AVAILPHYSICAL, ORDERED, MinOrderQty' + hso_FTS"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "select4"
						},
						{
							"name": "join5"
						},
						{
							"name": "filter4"
						},
						{
							"name": "union2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn6"
						},
						{
							"name": "select5"
						},
						{
							"name": "derivedColumn7"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string,",
						"     Store as string,",
						"     Warehouse as string,",
						"     filename as string,",
						"     TriggerSource as string,",
						"     Container as string,",
						"     OrderType as string,",
						"     isDualPurposeStore as boolean,",
						"     isItemGroupingEnabled as boolean",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_itemvariant\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"createdon\"/><attribute name=\"hso_fts\"/><order attribute=\"crd3c_name\" descending=\"false\"/><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\"/></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_itemgroup as boolean,",
						"          hso_itemgroupname as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter(iif($isDualPurposeStore, coalesce(AVAILPHYSICAL,0), coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && source_dataarea == STKDATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif($isDualPurposeStore,\r",
						"    iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty ))),\r",
						"    iif((crd3c_storeminqty-crd3c_storeavailqtyzero) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-crd3c_storeavailqtyzero))\r",
						"),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1,",
						"          hso_itemgroupid = iif($isItemGroupingEnabled, hso_itemgroupid, '00')) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(hso_sourceicwarehouse) && !equals(hso_sourceicwarehouse, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          FreeToSell = hso_fts,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MSL = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MinOrderQty > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(MinOrderQty = iif($isDualPurposeStore, coalesce(MSL,0) + coalesce(FreeToSell,0), coalesce(MSL,0)),",
						"          dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter(((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) || (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"union2 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"derivedColumn7, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID,",
						"          source_dataarea),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"filter2 select(mapColumn(",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_dataarea = cr5b1_dataarea,",
						"          hso_item = cr5b1_item,",
						"          hso_size = cr5b1_size,",
						"          hso_site = cr5b1_site,",
						"          hso_storequantity = crd3c_storeavailqty,",
						"          hso_itemvariant = cr5b1_itemvariant,",
						"          hso_storeminquantity = crd3c_storeminqty,",
						"          hso_itemdescription = cr5b1_itemdescription,",
						"          hso_store = cr5b1_towhs,",
						"          hso_sourceicwarehouse = cr5b1_fromwhs,",
						"          hso_fromwhsqty = crd3c_fromwhsstockqty,",
						"          hso_inboundorderqty = crd3c_inboundorderqty,",
						"          hso_batchid = crd3c_batchid,",
						"          hso_barcode,",
						"          hso_name = crd3c_name,",
						"          hso_orderquantity = crd3c_toqty,",
						"          hso_createddate = cr5b1_createddate,",
						"          hso_purchaseorderlinesid = crd3c_transferorderid,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"filterWarehouse, selectSourceWarehouse join(hso_sourceicwarehouse == source_hso_sourceicwarehouse,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"derivedColumn6 filter((equals(selectWarehouse@crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(selectWarehouse@crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_hso_sourceicwarehouse , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter4",
						"filter3, select5 union(byName: true)~> union2",
						"join5, UOWarehouse lookup(selectWarehouse@hso_sourceicwarehouse == UOWarehouse@crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(source_crd3c_dataarea = UOWarehouse@crd3c_dataarea) ~> derivedColumn6",
						"filter4 select(mapColumn(",
						"          source_crd3c_dataarea,",
						"          source_hso_sourceicwarehouse,",
						"          crd3c_name = selectWarehouse@crd3c_name,",
						"          crd3c_dataarea = selectWarehouse@crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select5",
						"selectWarehouseCombined derive(FromWhs = source_hso_sourceicwarehouse) ~> derivedColumn7",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PurchaseOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateRecOrderQtyCsv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						},
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"dataset": {
								"referenceName": "LegalEntity",
								"type": "DatasetReference"
							},
							"name": "LegalEntity"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RecomOrderQtyCsvFile",
								"type": "DatasetReference"
							},
							"name": "createCsv"
						}
					],
					"transformations": [
						{
							"name": "joinWhsItem"
						},
						{
							"name": "selectJoinWhsItem"
						},
						{
							"name": "selectWarehouses"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "deriveName"
						},
						{
							"name": "filterActiveLegalEntity"
						},
						{
							"name": "selectActiveLegalEntity"
						},
						{
							"name": "joinWarehouseLegalEntity"
						}
					],
					"scriptLines": [
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> UOWarehouses",
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_gender as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     wildcardPaths:['UOItem.csv']) ~> UOItem",
						"source(output(",
						"          createdonbehalfbyyominame as string,",
						"          statecode as integer,",
						"          owneridname as string,",
						"          statecodename as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyyominame as string,",
						"          crd3c_description as string,",
						"          crd3c_legalentitiesid as string,",
						"          utcconversiontimezonecode as integer,",
						"          createdbyyominame as string,",
						"          modifiedbyname as string,",
						"          versionnumber as long,",
						"          timezoneruleversionnumber as integer,",
						"          owneridtype as string,",
						"          statuscodename as string,",
						"          crd3c_legalentity as string,",
						"          owneridyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyyominame as string,",
						"          statuscode as integer,",
						"          createdbyname as string,",
						"          createdon as timestamp,",
						"          owningbusinessunitname as string,",
						"          createdonbehalfbyname as string,",
						"          modifiedonbehalfbyname as string,",
						"          overriddencreatedon as timestamp,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> LegalEntity",
						"UOItem, selectWarehouses join(upper(UOItem@crd3c_dataarea) == upper(selectWarehouses@crd3c_dataarea),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhsItem",
						"joinWhsItem select(mapColumn(",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_barcode,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          crd3c_dataarea = UOItem@crd3c_dataarea,",
						"          crd3c_site = selectWarehouses@crd3c_name,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          hso_size = crd3c_size",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJoinWhsItem",
						"joinWarehouseLegalEntity select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_dataarea,",
						"          crd3c_warehousename,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouses",
						"UOWarehouses filter(or(upper(crd3c_warehousetype) == 'STORE' && statecode == 0,  upper(crd3c_warehousetype) == \"STOCK\" && hso_dualpurpose)) ~> filterWarehouse",
						"selectJoinWhsItem derive(crd3c_name = concat(crd3c_itemvariant, \"_\",crd3c_site)) ~> deriveName",
						"LegalEntity filter(statecode == 0) ~> filterActiveLegalEntity",
						"filterActiveLegalEntity select(mapColumn(",
						"          crd3c_legalentity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectActiveLegalEntity",
						"filterWarehouse, selectActiveLegalEntity join(upper(crd3c_dataarea) == upper(crd3c_legalentity),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWarehouseLegalEntity",
						"deriveName sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          crd3c_name as string,",
						"          crd3c_variantname as string,",
						"          crd3c_barcode as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string",
						"     ),",
						"     partitionFileNames:['RecOrderQty.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> createCsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/datasets/LegalEntity')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateRecOrderQtyCsv_VirtualStores')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/MSL Sync"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						},
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Barcode"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventDim"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference"
							},
							"name": "MSLcreateCSV"
						}
					],
					"transformations": [
						{
							"name": "filterModelCustGroupChannel"
						},
						{
							"name": "SelectItemIdForecastQtyInventDimId"
						},
						{
							"name": "SelectInventDimIdAndBarcodeNum"
						},
						{
							"name": "GetBarcode"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "GetInventSizeId"
						},
						{
							"name": "FinalSelectBarcodeInventSizeId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "MSL"
						},
						{
							"name": "GetDualPurposeStores"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "joinMSL"
						},
						{
							"name": "SelectPreBarcode"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> UOWarehouses",
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_gender as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     wildcardPaths:['UOItem.csv']) ~> UOItem",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          blocked as long,",
						"          retailshowforitem as long,",
						"          useforinput as long,",
						"          useforprinting as long,",
						"          hsoisuniqueidentifier as long,",
						"          sysdatastatecode as long,",
						"          barcodesetupid as string,",
						"          description as string,",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          qty as decimal(38,6),",
						"          retailvariantid as string,",
						"          unitid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitembarcode_partitioned') ~> Barcode",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toDate(toString(startdate)) == addDays(currentDate(),1)) ~> filterModelCustGroupChannel",
						"filterModelCustGroupChannel select(mapColumn(",
						"          itemid,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
						"Barcode select(mapColumn(",
						"          inventdimid,",
						"          itemid,",
						"          dataareaid,",
						"          itembarcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventDimIdAndBarcodeNum",
						"SelectPreBarcode, FinalSelectBarcodeInventSizeId lookup(SelectPreBarcode@itemid == FinalSelectBarcodeInventSizeId@itemid",
						"     && SelectPreBarcode@dataareaid == FinalSelectBarcodeInventSizeId@dataareaid",
						"     && SelectPreBarcode@inventsizeid == FinalSelectBarcodeInventSizeId@inventsizeid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetBarcode",
						"joinMSL select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site = inventlocationid,",
						"          crd3c_dataarea = UOItem@crd3c_dataarea,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          hso_size = crd3c_size,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"InventDim select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectInventDimIdAndBarcodeNum, SelectInventSizeIdAndInventDimId join(SelectInventDimIdAndBarcodeNum@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectInventDimIdAndBarcodeNum@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetInventSizeId",
						"GetInventSizeId select(mapColumn(",
						"          inventdimid = SelectInventDimIdAndBarcodeNum@inventdimid,",
						"          dataareaid = SelectInventDimIdAndBarcodeNum@dataareaid,",
						"          itembarcode,",
						"          inventsizeid,",
						"          itemid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectBarcodeInventSizeId",
						"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"GetBarcode select(mapColumn(",
						"          itembarcode,",
						"          crd3c_dataarea = SelectPreBarcode@dataareaid,",
						"          salesqty,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"UOWarehouses filter(upper(crd3c_warehousetype) == \"STOCK\" && hso_dualpurpose == true() && statecode == 0) ~> GetDualPurposeStores",
						"GetDualPurposeStores select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"UOItem, MSL join(crd3c_barcode == itembarcode",
						"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMSL",
						"CalculateMSL select(mapColumn(",
						"          itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          salesqty,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPreBarcode",
						"AddMSL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          crd3c_name as string,",
						"          crd3c_variantname as string,",
						"          crd3c_barcode as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string",
						"     ),",
						"     partitionFileNames:['RecOrderQtyVS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MSLcreateCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile_virtualStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateRecOrderQtyCsv_VirtualStores_SampleData')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/MSL Sync"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehousesSample"
						},
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItemSample"
						},
						{
							"dataset": {
								"referenceName": "InventdimONUKONUS",
								"type": "DatasetReference"
							},
							"name": "InventDimSample"
						},
						{
							"dataset": {
								"referenceName": "BarcodeONUKONUS",
								"type": "DatasetReference"
							},
							"name": "BarcodeSample"
						},
						{
							"dataset": {
								"referenceName": "ForecastSalesONUKONUS",
								"type": "DatasetReference"
							},
							"name": "ForecastSalesSample"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference"
							},
							"name": "MSLcreateCSV"
						}
					],
					"transformations": [
						{
							"name": "filterModelCustGroupChannel"
						},
						{
							"name": "SelectItemIdForecastQtyInventDimId"
						},
						{
							"name": "SelectInventDimIdAndBarcodeNum"
						},
						{
							"name": "GetBarcode"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "GetInventSizeId"
						},
						{
							"name": "FinalSelectBarcodeInventSizeId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "MSL"
						},
						{
							"name": "GetDualPurposeStores"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "joinMSL"
						},
						{
							"name": "SelectPreBarcode"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><order attribute=\"hso_ordertypesplit\" descending=\"true\"/><order attribute=\"crd3c_warehousename\" descending=\"false\"/><attribute name=\"crd3c_warehousetype\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehousesSample",
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_gender as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: ('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><order attribute=\"crd3c_name\" descending=\"false\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><filter type=\"or\"><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3ME10140264\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WF10061508\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"2UF10080069\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WF10053037\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"2UE30660553\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WD30120958\"/></filter></filter></entity></fetch>'),",
						"     wildcardPaths:['UOItem.csv']) ~> UOItemSample",
						"source(output(",
						"          inventdimid as string,",
						"          inventlocationid as string,",
						"          inventsizeid as string,",
						"          dataareaid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventDimSample",
						"source(output(",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          dataareaid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BarcodeSample",
						"source(output(",
						"          dataareaid as string,",
						"          itemid as string,",
						"          salesqty as double,",
						"          inventdimid as string,",
						"          startdate as timestamp,",
						"          suntafforecastchannelid as string,",
						"          modelid as string,",
						"          custgroupid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ForecastSalesSample",
						"ForecastSalesSample filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toDate(toString(startdate)) == addDays(currentDate(), 1)) ~> filterModelCustGroupChannel",
						"filterModelCustGroupChannel select(mapColumn(",
						"          itemid,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
						"BarcodeSample select(mapColumn(",
						"          inventdimid,",
						"          itemid,",
						"          dataareaid,",
						"          itembarcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventDimIdAndBarcodeNum",
						"SelectPreBarcode, FinalSelectBarcodeInventSizeId lookup(SelectPreBarcode@itemid == FinalSelectBarcodeInventSizeId@itemid",
						"     && SelectPreBarcode@dataareaid == FinalSelectBarcodeInventSizeId@dataareaid",
						"     && SelectPreBarcode@inventsizeid == FinalSelectBarcodeInventSizeId@inventsizeid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetBarcode",
						"joinMSL select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site = inventlocationid,",
						"          crd3c_dataarea = UOItemSample@crd3c_dataarea,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          hso_size = crd3c_size,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"InventDimSample select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectInventDimIdAndBarcodeNum, SelectInventSizeIdAndInventDimId join(SelectInventDimIdAndBarcodeNum@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectInventDimIdAndBarcodeNum@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetInventSizeId",
						"GetInventSizeId select(mapColumn(",
						"          inventdimid = SelectInventDimIdAndBarcodeNum@inventdimid,",
						"          dataareaid = SelectInventDimIdAndBarcodeNum@dataareaid,",
						"          itembarcode,",
						"          inventsizeid,",
						"          itemid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectBarcodeInventSizeId",
						"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"GetBarcode select(mapColumn(",
						"          itembarcode,",
						"          crd3c_dataarea = SelectPreBarcode@dataareaid,",
						"          salesqty,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"UOWarehousesSample filter(upper(crd3c_warehousetype) == \"STOCK\" && statecode == 0) ~> GetDualPurposeStores",
						"GetDualPurposeStores select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"UOItemSample, MSL join(crd3c_barcode == itembarcode",
						"     && UOItemSample@crd3c_dataarea == MSL@crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMSL",
						"CalculateMSL select(mapColumn(",
						"          itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          salesqty,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPreBarcode",
						"AddMSL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          crd3c_name as string,",
						"          crd3c_variantname as string,",
						"          crd3c_barcode as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string",
						"     ),",
						"     partitionFileNames:['RecOrderQtyVS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MSLcreateCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/datasets/InventdimONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/BarcodeONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/ForecastSalesONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile_virtualStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateRecOrderQtyCsv_VirtualStores_v1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/MSL Sync"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "1ME10030553",
								"type": "DatasetReference"
							},
							"name": "ForecastSalesONUKONUS"
						},
						{
							"dataset": {
								"referenceName": "BarcodeONUKONUS",
								"type": "DatasetReference"
							},
							"name": "BarcodeONUKONUS"
						},
						{
							"dataset": {
								"referenceName": "InventdimONUKONUS",
								"type": "DatasetReference"
							},
							"name": "InventdimONUKONUS"
						},
						{
							"dataset": {
								"referenceName": "ItemONUKONUS",
								"type": "DatasetReference"
							},
							"name": "ItemONUKONUS"
						},
						{
							"dataset": {
								"referenceName": "WHONUKONUS",
								"type": "DatasetReference"
							},
							"name": "WHONUKONUS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "createCsv"
						}
					],
					"transformations": [
						{
							"name": "joinWhsItem"
						},
						{
							"name": "selectJoinWhsItem"
						},
						{
							"name": "selectWarehouses"
						},
						{
							"name": "SelectInventDimIdAndBarcodeNum"
						},
						{
							"name": "GetBarcode"
						},
						{
							"name": "LookupMSLForVirtualStores"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "GetInventSizeId"
						},
						{
							"name": "FinalSelectBarcodeInventSizeId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "SelectInventSizeForFS"
						},
						{
							"name": "MSL"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "DualPurposeStores"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "TomorrowDate"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290')",
						"}",
						"source(output(",
						"          dataareaid as string,",
						"          itemid as string,",
						"          salesqty as integer,",
						"          inventdimid as string,",
						"          startdate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ForecastSalesONUKONUS",
						"source(output(",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          dataareaid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BarcodeONUKONUS",
						"source(output(",
						"          inventdimid as string,",
						"          inventlocationid as string,",
						"          inventsizeid as string,",
						"          dataareaid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InventdimONUKONUS",
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string,",
						"          crd3c_simpleid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ItemONUKONUS",
						"source(output(",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          hso_vendor as string,",
						"          crd3c_sourcewhname as string,",
						"          hso_dualpurpose as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> WHONUKONUS",
						"ItemONUKONUS, selectWarehouses join(upper(ItemONUKONUS@crd3c_dataarea) == upper(selectWarehouses@crd3c_dataarea),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhsItem",
						"joinWhsItem select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_name,",
						"          crd3c_dataarea = ItemONUKONUS@crd3c_dataarea,",
						"          crd3c_size,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectJoinWhsItem",
						"WHONUKONUS select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_dataarea,",
						"          hso_dualpurpose",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouses",
						"BarcodeONUKONUS select(mapColumn(",
						"          inventdimid,",
						"          itemid,",
						"          dataareaid,",
						"          itembarcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventDimIdAndBarcodeNum",
						"SelectInventSizeForFS, FinalSelectBarcodeInventSizeId lookup(SelectInventSizeForFS@itemid == FinalSelectBarcodeInventSizeId@itemid",
						"     && SelectInventSizeForFS@inventsizeid == FinalSelectBarcodeInventSizeId@inventsizeid",
						"     && SelectInventSizeForFS@dataareaid == FinalSelectBarcodeInventSizeId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetBarcode",
						"selectJoinWhsItem, MSL lookup(crd3c_barcode == itembarcode",
						"     && crd3c_dataarea == dataareaid",
						"     && crd3c_name == inventlocationid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupMSLForVirtualStores",
						"LookupMSLForVirtualStores select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_Quantity = salesqty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"InventdimONUKONUS select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectInventDimIdAndBarcodeNum, SelectInventSizeIdAndInventDimId join(SelectInventDimIdAndBarcodeNum@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetInventSizeId",
						"GetInventSizeId select(mapColumn(",
						"          inventdimid = SelectInventDimIdAndBarcodeNum@inventdimid,",
						"          dataareaid,",
						"          itembarcode,",
						"          inventsizeid,",
						"          itemid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectBarcodeInventSizeId",
						"TomorrowDate, SelectInventSizeIdAndInventDimId lookup(ForecastSalesONUKONUS@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"CalculateMSL select(mapColumn(",
						"          itemid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid,",
						"          salesqty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeForFS",
						"GetBarcode select(mapColumn(",
						"          itembarcode,",
						"          salesqty,",
						"          dataareaid = SelectInventSizeForFS@dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"selectWarehouses filter(hso_dualpurpose == true()) ~> DualPurposeStores",
						"DualPurposeStores select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"ForecastSalesONUKONUS filter(toDate(toString(startdate)) == addDays(currentDate(), 1)) ~> TomorrowDate",
						"AddMSL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['RecommenderV1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> createCsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/1ME10030553')]",
				"[concat(variables('factoryId'), '/datasets/BarcodeONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/InventdimONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/ItemONUKONUS')]",
				"[concat(variables('factoryId'), '/datasets/WHONUKONUS')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateTransferOrderLines')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Inventsum"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslation"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "UOWarehouse"
						},
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "RecommendedOrderQty"
						},
						{
							"dataset": {
								"referenceName": "DataImportExecution",
								"type": "DatasetReference"
							},
							"name": "DataImportExecutions"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupItem"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "powerappdataverse",
								"type": "LinkedServiceReference"
							},
							"name": "DataExecutionsTO"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "TransferOrdersSink"
						}
					],
					"transformations": [
						{
							"name": "ItemSize"
						},
						{
							"name": "selectInventSum"
						},
						{
							"name": "joinInventSumRecorderQty"
						},
						{
							"name": "filterJoinInventSum"
						},
						{
							"name": "selectEcoResProduct"
						},
						{
							"name": "filterEcoResProductTranslation"
						},
						{
							"name": "selectEcoResProductTranslation"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectProductDescription"
						},
						{
							"name": "StockLessThanMinimum"
						},
						{
							"name": "joinWhs"
						},
						{
							"name": "join2"
						},
						{
							"name": "selectSTKWhs"
						},
						{
							"name": "selectCols"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "selectWarehouse"
						},
						{
							"name": "filterWarehouse"
						},
						{
							"name": "join3"
						},
						{
							"name": "selectSourceWarehouse"
						},
						{
							"name": "selectWarehouseCombined"
						},
						{
							"name": "selectMinOrderQty"
						},
						{
							"name": "filterMinOrderQty"
						},
						{
							"name": "WhsUpperDataArea"
						},
						{
							"name": "MinOrderUpperDataArea"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "filter2"
						},
						{
							"name": "filteronStoreParameter"
						},
						{
							"name": "filteronWarehouseParameter"
						},
						{
							"name": "join4"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "SelectWarehouseOnParameters"
						},
						{
							"name": "filter3"
						},
						{
							"name": "union1"
						},
						{
							"name": "Warehouses"
						},
						{
							"name": "triggersource"
						},
						{
							"name": "crd3cstoreavailqtyzero"
						},
						{
							"name": "select3"
						},
						{
							"name": "derivedColumn5"
						},
						{
							"name": "selectPOBoolean"
						},
						{
							"name": "selectInvItemGrpCols"
						},
						{
							"name": "lookupInventItemGrp"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Company as string,",
						"     Store as string,",
						"     Warehouse as string,",
						"     filename as string,",
						"     TriggerSource as string,",
						"     Container as string,",
						"     OrderType as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventsum_partitioned',",
						"     manifestType: 'manifest') ~> Inventsum",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductTranslation",
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_icwarehousename as string,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_uowarehouses',",
						"     timeout: 30) ~> UOWarehouse",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_size as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_orderqties',",
						"     timeout: 30,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\" /><attribute name=\"crd3c_dataarea\" /><attribute name=\"crd3c_site\" /><attribute name=\"crd3c_name\" /><attribute name=\"crd3c_itemvariant\" /><attribute name=\"crd3c_quantity\" /><attribute name=\"crd3c_barcode\" /><attribute name=\"createdon\" /><order attribute=\"crd3c_name\" descending=\"false\" /><filter type=\"and\"><condition attribute=\"crd3c_site\" operator=\"eq\" value=\"',$Store,'\" /><condition attribute=\"crd3c_dataarea\" operator=\"eq\" value=\"',$Company,'\" /></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"source(output(",
						"          crd3c_company as string,",
						"          crd3c_dataimportexecutionid as string,",
						"          crd3c_name as string,",
						"          crd3c_store as string,",
						"          crd3c_triggersource as string,",
						"          crd3c_warehouse as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_companywarehouse as string,",
						"          hso_purchaseorder as boolean,",
						"          hso_purchaseordername as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> DataImportExecutions",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupItem",
						"Inventsum derive(ItemSize = concat(itemid,coalesce( concat( '_',inventsizeid),'')),",
						"          DATAAREAID = upper(dataareaid),",
						"          INVENTLOCATIONID = upper(inventlocationid)) ~> ItemSize",
						"filter1 select(mapColumn(",
						"          DATAAREAID = ItemSize@DATAAREAID,",
						"          ITEMID = itemid,",
						"          INVENTSIZEID = inventsizeid,",
						"          INVENTLOCATIONID = ItemSize@INVENTLOCATIONID,",
						"          INVENTSITEID = inventsiteid,",
						"          AVAILPHYSICAL = availphysical,",
						"          ItemSize,",
						"          ORDERED = ordered",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInventSum",
						"selectInventSum, filterMinOrderQty join(lower(DATAAREAID) == lower(dataarea)",
						"     && lower(ItemSize) == lower(itemvariant)",
						"     && lower(INVENTLOCATIONID) == lower(crd3c_site),",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinInventSumRecorderQty",
						"derivedColumn5 filter((coalesce(AVAILPHYSICAL,0) + coalesce(ORDERED,0)) < MinOrderQty) ~> filterJoinInventSum",
						"EcoResProduct select(mapColumn(",
						"          DISPLAYPRODUCTNUMBER = displayproductnumber,",
						"          SEARCHNAME = searchname,",
						"          RECID = recid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProduct",
						"EcoResProductTranslation filter(equals(languageid, 'en-US')) ~> filterEcoResProductTranslation",
						"filterEcoResProductTranslation select(mapColumn(",
						"          DESCRIPTION = description,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductTranslation",
						"selectEcoResProduct, selectEcoResProductTranslation join(RECID == PRODUCT,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ITEMID = DISPLAYPRODUCTNUMBER,",
						"          DESCRIPTION,",
						"          SEARCHNAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProductDescription",
						"filterJoinInventSum, selectProductDescription join(lower(Item) == lower(selectProductDescription@ITEMID),",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> StockLessThanMinimum",
						"StockLessThanMinimum, Warehouses join(lower(crd3c_site) == lower(Warehouses@INVENTLOCATIONID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinWhs",
						"joinWhs, selectSTKWhs join(lower(itemvariant) == lower(STKItemSize)",
						"     && lower(FromWhs) == lower(STKINVENTLOCATIONID)",
						"     && lower(dataarea) == lower(STKDATAAREAID),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"selectInventSum select(mapColumn(",
						"          STKDATAAREAID = DATAAREAID,",
						"          STKITEMID = ITEMID,",
						"          STKINVENTSIZEID = INVENTSIZEID,",
						"          STKINVENTLOCATIONID = INVENTLOCATIONID,",
						"          STKAVAILPHYSICAL = AVAILPHYSICAL,",
						"          STKItemSize = ItemSize",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSTKWhs",
						"lookupInventItemGrp select(mapColumn(",
						"          cr5b1_dataarea = dataarea,",
						"          cr5b1_item = Item,",
						"          cr5b1_size = STKINVENTSIZEID,",
						"          cr5b1_site = Warehouses@INVENTSITEID,",
						"          crd3c_storeavailqty = AVAILPHYSICAL,",
						"          cr5b1_itemvariant = itemvariant,",
						"          crd3c_storeminqty = MinOrderQty,",
						"          cr5b1_itemdescription = DESCRIPTION,",
						"          cr5b1_towhs = Warehouses@INVENTLOCATIONID,",
						"          cr5b1_fromwhs = FromWhs,",
						"          crd3c_fromwhsstockqty = STKAVAILPHYSICAL,",
						"          crd3c_inboundorderqty = ORDERED,",
						"          crd3c_batchid,",
						"          hso_barcode = crd3c_barcode,",
						"          hso_purchaseorder = SEARCHNAME,",
						"          hso_itemgroupid = itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectCols",
						"crd3cstoreavailqtyzero derive(crd3c_name = uuid(),",
						"          crd3c_toqty = iif((crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty )) > crd3c_fromwhsstockqty, crd3c_fromwhsstockqty, (crd3c_storeminqty-(crd3c_storeavailqtyzero +crd3c_inboundorderqty ))),",
						"          cr5b1_createddate = currentTimestamp(),",
						"          crd3c_transferorderid = '00000000-0000-0000-0000-000000000000',",
						"          hso_purchaseorder = iif($OrderType == 'TRANSFER ORDER', false(), true()),",
						"          hso_batchnumber = 1) ~> derivedColumn2",
						"WhsUpperDataArea select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_dataarea,",
						"          crd3c_site,",
						"          crd3c_warehousename,",
						"          crd3c_name,",
						"          crd3c_sourcewh,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouse",
						"selectWarehouse filter(!isNull(crd3c_sourcewh) && !equals(crd3c_sourcewh, '')) ~> filterWarehouse",
						"filterWarehouse, selectSourceWarehouse join(crd3c_sourcewh == source_crd3c_uowarehousesid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"selectWarehouse select(mapColumn(",
						"          source_crd3c_uowarehousesid = crd3c_uowarehousesid,",
						"          source_crd3c_dataarea = crd3c_dataarea,",
						"          source_crd3c_site = crd3c_site,",
						"          source_crd3c_warehousename = crd3c_warehousename,",
						"          source_crd3c_name = crd3c_name,",
						"          source_crd3c_sourcewh = crd3c_sourcewh,",
						"          source_hso_sourceicwarehouse = hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectSourceWarehouse",
						"derivedColumn3 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCombined",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_site,",
						"          itemvariant = crd3c_itemvariant,",
						"          MinOrderQty = crd3c_quantity,",
						"          dataarea = crd3c_dataarea,",
						"          crd3c_barcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMinOrderQty",
						"MinOrderUpperDataArea filter((MinOrderQty > 0) && (equals(upper(dataarea) , upper($Company)) || equals(upper($Company) , \"ALL\") ) && (equals(crd3c_site , upper($Store))  ||  equals(upper($Store) , \"ALL\"))) ~> filterMinOrderQty",
						"UOWarehouse derive(crd3c_dataarea = upper(crd3c_dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          crd3c_name = upper(crd3c_name)) ~> WhsUpperDataArea",
						"selectMinOrderQty derive(dataarea = upper(dataarea),",
						"          crd3c_site = upper(crd3c_site),",
						"          Item = substringIndex(crd3c_name, '_', 1)) ~> MinOrderUpperDataArea",
						"derivedColumn2 aggregate(groupBy(cr5b1_dataarea,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          hso_purchaseorder,",
						"          crd3c_batchid),",
						"     each(match((name!=\"cr5b1_dataarea\")&&(name!=\"cr5b1_towhs\")&&(name!=\"cr5b1_fromwhs\")&&(name!=\"hso_purchaseorder\")&&(name!=\"crd3c_batchid\")), $$ = first($$))) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          crd3c_company = cr5b1_dataarea,",
						"          crd3c_store = cr5b1_towhs,",
						"          crd3c_warehouse = cr5b1_fromwhs,",
						"          crd3c_name = crd3c_batchid,",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ItemSize filter((equals(ItemSize@DATAAREAID , upper($Company)) || equals(upper($Company) , \"ALL\") ) && ((equals(ItemSize@INVENTLOCATIONID , upper($Store))  ||  equals(upper($Store) , \"ALL\")) \r",
						"|| (equals(ItemSize@INVENTLOCATIONID , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\")))) ~> filter1",
						"filter3 derive(crd3c_batchid = uuid()) ~> derivedColumn3",
						"derivedColumn2 filter(crd3c_toqty > 0) ~> filter2",
						"selectWarehouse filter(equals(crd3c_name,$Store) && equalsIgnoreCase(crd3c_dataarea,$Company)) ~> filteronStoreParameter",
						"selectSourceWarehouse filter(equals(source_crd3c_name,$Warehouse)) ~> filteronWarehouseParameter",
						"filteronStoreParameter, filteronWarehouseParameter join(equals(crd3c_name,$Store) && equals(source_crd3c_name,$Warehouse),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 derive(crd3c_batchid = uuid()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          INVENTLOCATIONID = crd3c_name,",
						"          DATAAREAID = crd3c_dataarea,",
						"          INVENTSITEID = crd3c_site,",
						"          FromWhs = source_crd3c_name,",
						"          warehousename = crd3c_warehousename,",
						"          source_dataarea = source_crd3c_dataarea,",
						"          source_site = source_crd3c_site,",
						"          source_warehousename = source_crd3c_warehousename,",
						"          crd3c_batchid,",
						"          hso_ordertypesplitname,",
						"          hso_ordertypesplit,",
						"          source_icwarehouse = source_hso_sourceicwarehouse",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectWarehouseOnParameters",
						"join3 filter((equals(crd3c_dataarea , upper($Company)) || equals(upper($Company) , \"ALL\") ) ",
						"&& (equals(crd3c_name , upper($Store))  ||  equals(upper($Store) , \"ALL\")) ",
						"&& (equals(source_crd3c_name , upper($Warehouse))  ||  equals(upper($Warehouse) , \"ALL\"))) ~> filter3",
						"selectWarehouseCombined, SelectWarehouseOnParameters union(byName: true)~> union1",
						"union1 aggregate(groupBy(INVENTLOCATIONID,",
						"          DATAAREAID,",
						"          FromWhs,",
						"          INVENTSITEID),",
						"     crd3c_batchid = max(crd3c_batchid)) ~> Warehouses",
						"select2 derive(crd3c_triggersource = $TriggerSource) ~> triggersource",
						"selectCols derive(crd3c_storeavailqtyzero = iif(crd3c_storeavailqty <0 ,crd3c_storeavailqty*0 ,crd3c_storeavailqty  )) ~> crd3cstoreavailqtyzero",
						"filter2 select(mapColumn(",
						"          cr5b1_dataarea,",
						"          cr5b1_item,",
						"          cr5b1_size,",
						"          cr5b1_site,",
						"          crd3c_storeavailqty,",
						"          cr5b1_itemvariant,",
						"          crd3c_storeminqty,",
						"          cr5b1_itemdescription,",
						"          cr5b1_towhs,",
						"          cr5b1_fromwhs,",
						"          crd3c_fromwhsstockqty,",
						"          crd3c_inboundorderqty,",
						"          crd3c_batchid,",
						"          crd3c_name,",
						"          crd3c_toqty,",
						"          cr5b1_createddate,",
						"          crd3c_transferorderid,",
						"          hso_barcode,",
						"          hso_batchnumber,",
						"          hso_itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"joinInventSumRecorderQty derive(AVAILPHYSICAL = coalesce(AVAILPHYSICAL,0),",
						"          ORDERED = coalesce(ORDERED,0)) ~> derivedColumn5",
						"DataImportExecutions select(mapColumn(",
						"          hso_purchaseorder",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPOBoolean",
						"InventItemGroupItem select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInvItemGrpCols",
						"join2, selectInvItemGrpCols lookup(lower(Item) == lower(selectInvItemGrpCols@itemid),",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupInventItemGrp",
						"triggersource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'dynamics',",
						"     format: 'dynamicsformat',",
						"     entity: 'crd3c_dataimportexecution',",
						"     timeout: 30,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     mapColumn(",
						"          crd3c_company,",
						"          crd3c_store,",
						"          crd3c_warehouse,",
						"          crd3c_name,",
						"          crd3c_triggersource,",
						"          hso_purchaseorder",
						"     ),",
						"     partitionBy('hash', 1)) ~> DataExecutionsTO",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat($filename, '.csv'))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     partitionBy('hash', 1)) ~> TransferOrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/powerappdataverse')]",
				"[concat(variables('factoryId'), '/datasets/DataImportExecution')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CreateUOItemsCsv')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ecoResProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductVariantDimensionValue"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResSize"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Translation"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemBarcode"
						},
						{
							"dataset": {
								"referenceName": "LegalEntity",
								"type": "DatasetReference"
							},
							"name": "LegalEntity"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResDistinctProduct"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductVariantSize"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "TempCsvFile",
								"type": "DatasetReference"
							},
							"name": "sinkUOItem"
						}
					],
					"transformations": [
						{
							"name": "selectecoResProductCols"
						},
						{
							"name": "filterEcoResProductVariantDimensionValue"
						},
						{
							"name": "selectEcoResProductVariantDimensionValue"
						},
						{
							"name": "selectEcoResSize"
						},
						{
							"name": "joinSize"
						},
						{
							"name": "joinSizeVariant"
						},
						{
							"name": "selectFinal"
						},
						{
							"name": "selectTranslation"
						},
						{
							"name": "filterTranslation",
							"description": "Add for the filter"
						},
						{
							"name": "joinTranslation"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "selectItemBarcode"
						},
						{
							"name": "joinItemBarcodeEcoResProduct"
						},
						{
							"name": "selectItemBarcodeEcoResProduct"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectActiveLegalEntity"
						},
						{
							"name": "select1"
						},
						{
							"name": "selectEcoResDistinctProduct"
						},
						{
							"name": "joinEcoResProducts"
						},
						{
							"name": "selectProducts"
						},
						{
							"name": "selectEcoResProductVariantSize"
						},
						{
							"name": "joinForSize"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproduct_partitioned',",
						"     manifestType: 'manifest') ~> ecoResProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          distinctproductvariant as long,",
						"          instancerelationtype as long,",
						"          productdimensionattribute as long,",
						"          retailweight as long,",
						"          retaildisplayorder as decimal(38,6),",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproductvariantdimensionvalue_partitioned',",
						"     manifestType: 'manifest') ~> EcoResProductVariantDimensionValue",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          name as string,",
						"          displayorder as decimal(38,6),",
						"          url as string,",
						"          hexcode as string,",
						"          refinergroup as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoressize_partitioned',",
						"     manifestType: 'manifest') ~> EcoResSize",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
						"     manifestType: 'manifest') ~> Translation",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          blocked as long,",
						"          retailshowforitem as long,",
						"          useforinput as long,",
						"          useforprinting as long,",
						"          hsoisuniqueidentifier as long,",
						"          sysdatastatecode as long,",
						"          barcodesetupid as string,",
						"          description as string,",
						"          inventdimid as string,",
						"          itembarcode as string,",
						"          itemid as string,",
						"          qty as decimal(38,6),",
						"          retailvariantid as string,",
						"          unitid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventitembarcode_partitioned',",
						"     manifestType: 'manifest') ~> InventItemBarcode",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_description as string,",
						"          crd3c_legalentitiesid as string,",
						"          crd3c_legalentity as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_legalentities\">\\n    <attribute name=\"crd3c_legalentitiesid\" />\\n    <attribute name=\"crd3c_legalentity\" />\\n    <attribute name=\"crd3c_description\" />\\n    <order attribute=\"crd3c_legalentity\" descending=\"false\" />\\n    <filter type=\"and\">\\n      <condition attribute=\"statecode\" operator=\"eq\" value=\"0\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> LegalEntity",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          hsoitembarcode as string,",
						"          hsolegacyproductnumber as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresdistinctproduct_partitioned') ~> EcoResDistinctProduct",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          size as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/ecoresproductvariantsize_partitioned') ~> EcoResProductVariantSize",
						"ecoResProduct select(mapColumn(",
						"          RECID = recid,",
						"          crd3c_name = displayproductnumber,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectecoResProductCols",
						"EcoResProductVariantDimensionValue filter(instancerelationtype == 8224) ~> filterEcoResProductVariantDimensionValue",
						"joinForSize select(mapColumn(",
						"          DISTINCTPRODUCTVARIANT = distinctproductvariant,",
						"          SIZE_,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductVariantDimensionValue",
						"EcoResSize select(mapColumn(",
						"          RECID = recid,",
						"          PRODUCTSIZEID = name,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResSize",
						"selectItemBarcodeEcoResProduct, joinSizeVariant join(selectItemBarcodeEcoResProduct@RECID == DISTINCTPRODUCTVARIANT",
						"     && selectItemBarcodeEcoResProduct@PARTITION == selectEcoResProductVariantDimensionValue@PARTITION,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSize",
						"selectEcoResProductVariantDimensionValue, selectEcoResSize join(SIZE_ == RECID",
						"     && selectEcoResProductVariantDimensionValue@PARTITION == selectEcoResSize@PARTITION,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSizeVariant",
						"joinTranslation select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_variantname,",
						"          crd3c_barcode,",
						"          crd3c_dataarea,",
						"          crd3c_size = PRODUCTSIZEID,",
						"          crd3c_productnumber = ITEMID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectFinal",
						"filterTranslation select(mapColumn(",
						"          crd3c_variantname = name,",
						"          PRODUCT = product,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectTranslation",
						"Translation filter(languageid == \"en-US\") ~> filterTranslation",
						"joinSize, selectTranslation join(selectItemBarcodeEcoResProduct@RECID == PRODUCT",
						"     && selectItemBarcodeEcoResProduct@PARTITION == selectTranslation@PARTITION,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinTranslation",
						"select1 derive(crd3c_simpleid = concat(crd3c_productnumber,iif(equals( coalesce(crd3c_size,\"\"),\"\"),\"\",concat(\"_\",crd3c_size)))) ~> derivedColumn1",
						"InventItemBarcode select(mapColumn(",
						"          ITEMBARCODE = itembarcode,",
						"          ITEMID = itemid,",
						"          crd3c_dataarea = dataareaid,",
						"          PARTITION = partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectItemBarcode",
						"selectItemBarcode, selectProducts join(ITEMBARCODE == HSOITEMBARCODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinItemBarcodeEcoResProduct",
						"joinItemBarcodeEcoResProduct select(mapColumn(",
						"          RECID,",
						"          crd3c_name,",
						"          crd3c_barcode = ITEMBARCODE,",
						"          PARTITION = selectItemBarcode@PARTITION,",
						"          crd3c_dataarea,",
						"          ITEMID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectItemBarcodeEcoResProduct",
						"selectFinal, selectActiveLegalEntity join(upper(crd3c_dataarea) == upper(crd3c_legalentity),",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"LegalEntity select(mapColumn(",
						"          crd3c_legalentity",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectActiveLegalEntity",
						"join1 select(mapColumn(",
						"          crd3c_name,",
						"          crd3c_variantname,",
						"          crd3c_barcode,",
						"          crd3c_dataarea,",
						"          crd3c_size,",
						"          crd3c_productnumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"EcoResDistinctProduct select(mapColumn(",
						"          RECID = recid,",
						"          HSOITEMBARCODE = hsoitembarcode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResDistinctProduct",
						"selectecoResProductCols, selectEcoResDistinctProduct join(selectecoResProductCols@RECID == selectEcoResDistinctProduct@RECID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEcoResProducts",
						"joinEcoResProducts select(mapColumn(",
						"          RECID = selectecoResProductCols@RECID,",
						"          crd3c_name,",
						"          PARTITION,",
						"          HSOITEMBARCODE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectProducts",
						"EcoResProductVariantSize select(mapColumn(",
						"          recid,",
						"          SIZE_ = size",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEcoResProductVariantSize",
						"filterEcoResProductVariantDimensionValue, selectEcoResProductVariantSize join(EcoResProductVariantDimensionValue@recid == selectEcoResProductVariantSize@recid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinForSize",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cr5b1_dataarea as string,",
						"          cr5b1_item as string,",
						"          cr5b1_size as string,",
						"          cr5b1_site as string,",
						"          crd3c_storeavailqty as string,",
						"          cr5b1_itemvariant as string,",
						"          crd3c_storeminqty as string,",
						"          cr5b1_itemdescription as string,",
						"          cr5b1_towhs as string,",
						"          cr5b1_fromwhs as string,",
						"          crd3c_fromwhsstockqty as string,",
						"          crd3c_inboundorderqty as string,",
						"          crd3c_batchid as string,",
						"          crd3c_name as string,",
						"          crd3c_toqty as string,",
						"          cr5b1_createddate as string,",
						"          crd3c_transferorderid as string,",
						"          hso_barcode as string,",
						"          hso_batchnumber as string,",
						"          hso_itemgroupid as string",
						"     ),",
						"     partitionFileNames:['UOItem.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkUOItem"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/LegalEntity')]",
				"[concat(variables('factoryId'), '/datasets/TempCsvFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteUOItems')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"dataset": {
								"referenceName": "UOItemCsvFile",
								"type": "DatasetReference"
							},
							"name": "UOItemCsv"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "sinkDelete"
						}
					],
					"transformations": [
						{
							"name": "exists"
						},
						{
							"name": "MarkRecordsToDelete"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_gender as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> UOItem",
						"source(output(",
						"          crd3c_name as string,",
						"          crd3c_variantname as string,",
						"          crd3c_barcode as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['UOItem.csv']) ~> UOItemCsv",
						"UOItem, UOItemCsv exists(UOItem@crd3c_dataarea == UOItemCsv@crd3c_dataarea",
						"     && UOItem@crd3c_name == UOItemCsv@crd3c_name,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists",
						"exists alterRow(deleteIf(true())) ~> MarkRecordsToDelete",
						"MarkRecordsToDelete select(mapColumn(",
						"          crd3c_name,",
						"          {@odata.etag},",
						"          crd3c_dataarea",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     alternateKeyName: 'crd3c_le_variant',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkDelete"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/datasets/UOItemCsvFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DeleteVendors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "VendTable"
						},
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "Vendors"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "DeleteVendors"
						}
					],
					"transformations": [
						{
							"name": "selectVendors"
						},
						{
							"name": "notExists"
						},
						{
							"name": "deleterows"
						},
						{
							"name": "selectDelete"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> VendTable",
						"source(output(",
						"          {@odata.etag} as string,",
						"          hso_company as string,",
						"          hso_name as string,",
						"          hso_vendorsid as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"hso_vendors\">\\n    <attribute name=\"hso_vendorsid\" />\\n    <attribute name=\"hso_name\" />\\n    <attribute name=\"hso_company\" />\\n    <order attribute=\"hso_name\" descending=\"false\" />\\n  </entity>\\n</fetch>') ~> Vendors",
						"VendTable select(mapColumn(",
						"          ACCOUNTNUM = accountnum,",
						"          DATAAREAID = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectVendors",
						"Vendors, selectVendors exists(hso_name == ACCOUNTNUM && upper (hso_company) == upper(DATAAREAID),",
						"     negate:true,",
						"     broadcast: 'auto')~> notExists",
						"notExists alterRow(deleteIf(true())) ~> deleterows",
						"deleterows select(mapColumn(",
						"          hso_name,",
						"          hso_company",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDelete",
						"selectDelete sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> DeleteVendors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProductTranslationSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProductTranslationSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          description as string,",
						"          languageid as string,",
						"          name as string,",
						"          product as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/ecoresproducttranslation_partitioned') ~> EcoResProductTranslationSample",
						"EcoResProductTranslationSample filter(toString(product) == \"5637329349\" ||\r",
						"toString(product) == \"5637299854\" ||\r",
						"toString(product) == \"5637323867\" ||\r",
						"toString(product) == \"5637267029\" ||\r",
						"toString(product) == \"5637453590\" ||\r",
						"toString(product) == \"5637338094\") ~> filter1",
						"filter1 select(mapColumn(",
						"          description,",
						"          product,",
						"          partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EcoResProductTranslationSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EcoResProduct_Sample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "EcoResProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          pdscwproduct as long,",
						"          producttype as long,",
						"          servicetype as long,",
						"          sunplmsyncwithplm as long,",
						"          sysdatastatecode as long,",
						"          displayproductnumber as string,",
						"          instancerelationtype as long,",
						"          searchname as string,",
						"          engchgproductownerid as string,",
						"          engchgproductcategorydetails as long,",
						"          engchgproductreleasepolicy as long,",
						"          engchgproductreadinesspolicy as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/ecoresproduct_partitioned') ~> EcoResProduct",
						"EcoResProduct filter(displayproductnumber == \"3ME10140264\" || \r",
						"displayproductnumber == \"3WF10061508\" || \r",
						"displayproductnumber == \"2UF10080069\" ||\r",
						"displayproductnumber == \"3WF10053037\" || \r",
						"displayproductnumber == \"2UE30660553\" || \r",
						"displayproductnumber == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          displayproductnumber,",
						"          searchname,",
						"          recid,",
						"          partition",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['EcoResProduct_Sample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesFull_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Performance"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesFull_Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "SelectMainCols"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(itemid == \"3ME10140264\" || ",
						"itemid == \"3WF10061508\" || ",
						"itemid == \"2UF10080069\" ||",
						"itemid == \"3WF10053037\" || ",
						"itemid == \"2UE30660553\" || ",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          dataareaid,",
						"          itemid,",
						"          salesqty,",
						"          inventdimid,",
						"          startdate,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectMainCols",
						"SelectMainCols sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && dataareaid == 'onuk') ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ForecastSalesSample_Performance')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Performance"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toString(toDate(toString(startdate))) == '2025-12-16'  && dataareaid == 'onuk') ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          startdate,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid,",
						"          suntafforecastchannelid,",
						"          modelid,",
						"          custgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesSample_Performance.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventItemGroupSample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventItemGroupSample"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          itemdataareaid as string,",
						"          itemgroupdataareaid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventitemgroupitem_partitioned') ~> InventItemGroupSample",
						"InventItemGroupSample filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          itemid,",
						"          itemgroupid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['InventItemGroupSample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventSum_Sample')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventSum"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          closed as long,",
						"          closedqty as long,",
						"          isexcludedfrominventoryvalue as long,",
						"          sysdatastatecode as long,",
						"          arrived as decimal(38,6),",
						"          availordered as decimal(38,6),",
						"          availphysical as decimal(38,6),",
						"          deducted as decimal(38,6),",
						"          inventdimid as string,",
						"          itemid as string,",
						"          lastupddateexpected as timestamp,",
						"          lastupddatephysical as timestamp,",
						"          onorder as decimal(38,6),",
						"          ordered as decimal(38,6),",
						"          pdscwarrived as decimal(38,6),",
						"          pdscwavailordered as decimal(38,6),",
						"          pdscwavailphysical as decimal(38,6),",
						"          pdscwdeducted as decimal(38,6),",
						"          pdscwonorder as decimal(38,6),",
						"          pdscwordered as decimal(38,6),",
						"          pdscwphysicalinvent as decimal(38,6),",
						"          pdscwpicked as decimal(38,6),",
						"          pdscwpostedqty as decimal(38,6),",
						"          pdscwquotationissue as decimal(38,6),",
						"          pdscwquotationreceipt as decimal(38,6),",
						"          pdscwreceived as decimal(38,6),",
						"          pdscwregistered as decimal(38,6),",
						"          pdscwreservordered as decimal(38,6),",
						"          pdscwreservphysical as decimal(38,6),",
						"          physicalinvent as decimal(38,6),",
						"          physicalvalue as decimal(38,6),",
						"          physicalvalueseccur_ru as decimal(38,6),",
						"          picked as decimal(38,6),",
						"          postedqty as decimal(38,6),",
						"          postedvalue as decimal(38,6),",
						"          postedvalueseccur_ru as decimal(38,6),",
						"          quotationissue as decimal(38,6),",
						"          quotationreceipt as decimal(38,6),",
						"          received as decimal(38,6),",
						"          registered as decimal(38,6),",
						"          reservordered as decimal(38,6),",
						"          reservphysical as decimal(38,6),",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventsum_partitioned') ~> InventSum",
						"InventSum filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter1",
						"filter1 select(mapColumn(",
						"          dataareaid,",
						"          itemid,",
						"          inventsiteid,",
						"          inventlocationid,",
						"          availphysical,",
						"          ordered,",
						"          inventsizeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['inventSum_Sample.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InventdimONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventdimONUKONUS"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "select2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventdimONUKONUS",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"join1 select(mapColumn(",
						"          inventdimid = InventdimONUKONUS@inventdimid,",
						"          inventlocationid,",
						"          inventsizeid,",
						"          dataareaid = InventdimONUKONUS@dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"filter2 select(mapColumn(",
						"          inventdimid,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"ForecastSales filter(itemid == \"3ME10140264\" || \r",
						"itemid == \"3WF10061508\" || \r",
						"itemid == \"2UF10080069\" ||\r",
						"itemid == \"3WF10053037\" || \r",
						"itemid == \"2UE30660553\" || \r",
						"itemid == \"3WD30120958\") ~> filter2",
						"InventdimONUKONUS, select2 join(InventdimONUKONUS@inventdimid == select2@inventdimid",
						"     && InventdimONUKONUS@dataareaid == select2@dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['InventdimONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ItemsONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "ItemONUK"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "WriteToItemONUK"
						}
					],
					"transformations": [
						{
							"name": "ONUK"
						},
						{
							"name": "SelectKeyColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_gender as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> ItemONUK",
						"ItemONUK filter(crd3c_dataarea == 'onuk' || crd3c_dataarea == 'onus') ~> ONUK",
						"ONUK select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_dataarea,",
						"          crd3c_size,",
						"          crd3c_simpleid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyColumns",
						"SelectKeyColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesONUKONUS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WriteToItemONUK"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reset MSL when no forecast')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "If there is no forecast for items today, then set their MSL to 0",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference"
							},
							"name": "RecommendedOrderQty"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RecommendedOrderQty",
								"type": "DatasetReference"
							},
							"name": "RecommendedOrderQtyResetMSL"
						}
					],
					"transformations": [
						{
							"name": "GetMSL"
						},
						{
							"name": "Update"
						},
						{
							"name": "ResetMSL"
						},
						{
							"name": "MSLGreaterThan0"
						}
					],
					"scriptLines": [
						"parameters{",
						"     companyFetchXML as string,",
						"     CompanyList as string[],",
						"     StoreList as string[],",
						"     storeFetchXML as string",
						"}",
						"source(output(",
						"          crd3c_availqty as integer,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_itemvariant as string,",
						"          crd3c_itemvariantlookupname as string,",
						"          crd3c_name as string,",
						"          crd3c_orderqtiesid as string,",
						"          crd3c_quantity as integer,",
						"          crd3c_reqorderqty as integer,",
						"          crd3c_site as string,",
						"          crd3c_variantname as string,",
						"          crd3c_warehouselookupname as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_fts as integer,",
						"          hso_hasforecast as boolean,",
						"          hso_hasforecastname as string,",
						"          hso_maxquantity as integer,",
						"          hso_minquantity as integer,",
						"          hso_size as string,",
						"          hso_teststring as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          crd3c_warehouselookup as string,",
						"          createdonbehalfby as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          crd3c_itemvariantlookup as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: (concat('<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\"><entity name=\"crd3c_orderqties\"><attribute name=\"crd3c_orderqtiesid\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_quantity\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_site\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_itemvariant\"/><order attribute=\"crd3c_barcode\" descending=\"false\"/><filter type=\"and\"><filter type=\"or\"><condition attribute=\"crd3c_quantity\" operator=\"gt\" value=\"0\"/><condition attribute=\"hso_fts\" operator=\"gt\" value=\"0\"/></filter><condition attribute=\"crd3c_site\" operator=\"in\">',$storeFetchXML,' </condition><condition attribute=\"crd3c_dataarea\" operator=\"in\">',$companyFetchXML,' </condition></filter></entity></fetch>'))) ~> RecommendedOrderQty",
						"RecommendedOrderQty select(mapColumn(",
						"          crd3c_quantity,",
						"          crd3c_barcode,",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_itemvariant,",
						"          crd3c_site",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> GetMSL",
						"ResetMSL alterRow(updateIf(true())) ~> Update",
						"MSLGreaterThan0 derive(crd3c_quantity = 0) ~> ResetMSL",
						"GetMSL filter(coalesce(crd3c_quantity,0)>0) ~> MSLGreaterThan0",
						"Update sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     alternateKeyName: 'hso_barcodekey',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RecommendedOrderQtyResetMSL"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecommendedOrderQty')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProduct')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RevenuePerProduct",
								"type": "DatasetReference"
							},
							"name": "RevenuePerProduct"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as short,",
						"          Product as string,",
						"          Price as short,",
						"          Quantity as short,",
						"          CustomerName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RevenuePerProduct",
						"RevenuePerProduct derive(Quantity = coalesce(Quantity, 0)+1) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(Product),",
						"     Price = sum(Price),",
						"          Quantity = avg(Quantity)) ~> aggregate1",
						"aggregate1 filter(Product == 'Laptop') ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['Test1.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RevenuePerProduct')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RevenuePerProduct1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RevenuePerProduct1",
								"type": "DatasetReference"
							},
							"name": "RevenuePerProduct1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as short,",
						"          Product as string,",
						"          Price as short,",
						"          Quantity as short,",
						"          CustomerName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> RevenuePerProduct1",
						"RevenuePerProduct1 aggregate(groupBy(Product),",
						"     Price = sum(Price)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['RevenuePerProductTest011.xls'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RevenuePerProduct1')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync MSL based on forecast sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Lookup activity, array of companies, Dataverse query taking in the array.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOItem",
								"type": "DatasetReference"
							},
							"name": "UOItem"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventDim"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSales"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "RecomOrderQtyCsvFile_virtualStore",
								"type": "DatasetReference"
							},
							"name": "MSLcreateCSV"
						}
					],
					"transformations": [
						{
							"name": "filterModelCustGroupChannel"
						},
						{
							"name": "SelectItemIdForecastQtyInventDimId"
						},
						{
							"name": "AddMSL"
						},
						{
							"name": "SelectInventSizeIdAndInventDimId"
						},
						{
							"name": "FSGetInventSizeId"
						},
						{
							"name": "MSL"
						},
						{
							"name": "SelectDualPurposeStores"
						},
						{
							"name": "DualPurposeStoresOnly"
						},
						{
							"name": "SelectStoreAndSize"
						},
						{
							"name": "CalculateMSL"
						},
						{
							"name": "joinMSL"
						},
						{
							"name": "filterCompany"
						},
						{
							"name": "JoinDualPurposeStores"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string,",
						"     CompanyList as string[],",
						"     companyFetchXML as string,",
						"     storeList as string[],",
						"     storeFetchXML as string",
						"}",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_barcode as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_simpleid as string,",
						"          crd3c_size as string,",
						"          crd3c_uoitemid as string,",
						"          crd3c_variantname as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><attribute name=\"crd3c_productnumber\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"crd3c_dataarea\" operator=\"in\">',$companyFetchXML,' </condition></filter></entity></fetch>')),",
						"     wildcardPaths:['UOItem.csv']) ~> UOItem",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          hashtype as long,",
						"          sysdatastatecode as long,",
						"          configid as string,",
						"          inventbatchid as string,",
						"          inventcolorid as string,",
						"          inventdimid as string,",
						"          inventgtdid_ru as string,",
						"          inventlocationid as string,",
						"          inventownerid_ru as string,",
						"          inventprofileid_ru as string,",
						"          inventserialid as string,",
						"          inventsiteid as string,",
						"          inventsizeid as string,",
						"          inventstatusid as string,",
						"          inventstyleid as string,",
						"          inventversionid as string,",
						"          licenseplateid as string,",
						"          wmslocationid as string,",
						"          wmspalletid as string,",
						"          sha1hashhex as string,",
						"          inventdimension1 as string,",
						"          inventdimension2 as string,",
						"          inventdimension3 as string,",
						"          inventdimension4 as string,",
						"          inventdimension5 as string,",
						"          inventdimension6 as string,",
						"          inventdimension7 as string,",
						"          inventdimension8 as string,",
						"          inventdimension9 as timestamp,",
						"          inventdimension10 as decimal(38,6),",
						"          inventdimension11 as string,",
						"          inventdimension12 as string,",
						"          sha3hashhex as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          statecode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/><condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"STOCK\"/><condition attribute=\"hso_ordertypesplit\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehouses",
						"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && \r",
						"equals(modelid, \"D2CE model\") && \r",
						"equals(custgroupid, \"zD2CE\") && \r",
						"(salesqty != 0) && \r",
						"toString(toDate(toString(startdate))) == toString(addDays(currentDate(), 1)) && \r",
						"in($CompanyList, dataareaid)) ~> filterModelCustGroupChannel",
						"filterModelCustGroupChannel select(mapColumn(",
						"          itemid,",
						"          inventdimid,",
						"          salesqty,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
						"joinMSL select(mapColumn(",
						"          crd3c_barcode,",
						"          crd3c_site = inventlocationid,",
						"          crd3c_dataarea = UOItem@crd3c_dataarea,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_itemvariant = crd3c_simpleid,",
						"          crd3c_variantname,",
						"          crd3c_itemvariantlookup = crd3c_uoitemid,",
						"          hso_size = crd3c_size,",
						"          crd3c_warehouselookup = crd3c_uowarehousesid,",
						"          crd3c_quantity = salesqty,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AddMSL",
						"JoinDualPurposeStores select(mapColumn(",
						"          inventdimid,",
						"          inventsizeid,",
						"          dataareaid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
						"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
						"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FSGetInventSizeId",
						"CalculateMSL select(mapColumn(",
						"          crd3c_dataarea = dataareaid,",
						"          itemid,",
						"          salesqty,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid,",
						"          inventsizeid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MSL",
						"UOWarehouses select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          crd3c_uowarehousesid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
						"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
						"     && dataareaid == crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> DualPurposeStoresOnly",
						"FSGetInventSizeId select(mapColumn(",
						"          itemid,",
						"          salesqty,",
						"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
						"          inventsizeid,",
						"          inventlocationid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
						"DualPurposeStoresOnly aggregate(groupBy(itemid,",
						"          dataareaid,",
						"          inventsizeid,",
						"          inventlocationid,",
						"          crd3c_uowarehousesid),",
						"     salesqty = sum(salesqty)) ~> CalculateMSL",
						"UOItem, MSL join(crd3c_productnumber == itemid",
						"     && coalesce(crd3c_size, '') == coalesce(inventsizeid, '')",
						"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMSL",
						"InventDim filter(in($CompanyList, dataareaid) &&\r",
						"in($storeList, inventlocationid)) ~> filterCompany",
						"filterCompany, SelectDualPurposeStores join(inventlocationid == crd3c_name,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDualPurposeStores",
						"AddMSL sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          crd3c_name as string,",
						"          crd3c_variantname as string,",
						"          crd3c_barcode as string,",
						"          crd3c_productnumber as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_size as string",
						"     ),",
						"     partitionFileNames:['RecOrderQtyVS.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> MSLcreateCSV"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOItem')]",
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/RecomOrderQtyCsvFile_virtualStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sync forecast sales')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Sync forecasted sales",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSalesSource"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "ForecastSalesTmp"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea29')",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          allocatemethod as long,",
						"          cov as long,",
						"          freqcode as long,",
						"          projforecastbudgettype as long,",
						"          report as long,",
						"          hsoisreturnorder as long,",
						"          sysdatastatecode as long,",
						"          activitynumber as string,",
						"          amount as decimal(38,6),",
						"          comment as string,",
						"          costprice as decimal(38,6),",
						"          covstatus as long,",
						"          currency as string,",
						"          custaccountid as string,",
						"          custgroupid as string,",
						"          defaultdimension as long,",
						"          discamount as decimal(38,6),",
						"          discpercent as decimal(38,6),",
						"          enddate as timestamp,",
						"          expandid as long,",
						"          freq as long,",
						"          inventdimid as string,",
						"          inventqty as decimal(38,6),",
						"          itemallocateid as string,",
						"          itembomid as string,",
						"          itemgroupid as string,",
						"          itemid as string,",
						"          itemrouteid as string,",
						"          keyid as string,",
						"          modelid as string,",
						"          pdscwqty as decimal(38,6),",
						"          pdscwunitid as string,",
						"          priceunit as decimal(38,12),",
						"          projcategoryid as string,",
						"          projforecastcostpaymdate as timestamp,",
						"          projforecasteliminationdate as timestamp,",
						"          projforecastinvoicedate as timestamp,",
						"          projforecastsalespaymdate as timestamp,",
						"          projfundingsource as long,",
						"          projid as string,",
						"          projlinepropertyid as string,",
						"          projtransid as string,",
						"          psarefpurchline as long,",
						"          salesmarkup as decimal(38,6),",
						"          salesprice as decimal(38,6),",
						"          salesqty as decimal(38,6),",
						"          salesunitid as string,",
						"          startdate as timestamp,",
						"          taxgroupid as string,",
						"          taxitemgroupid as string,",
						"          forecastentrynumber as string,",
						"          description as string,",
						"          planningpriority as decimal(38,2),",
						"          itemdescription as string,",
						"          contractlineid as string,",
						"          kittinginventtransid as string,",
						"          kittinglinenum as decimal(38,16),",
						"          suntaforigforecastdate as timestamp,",
						"          suntaforigforecastqty as decimal(38,6),",
						"          suntafforecastchannelid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290'),",
						"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSalesSource",
						"ForecastSalesSource filter(equals(itemid, '3ME10033290')) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['ForecastSalesTmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ForecastSalesTmp"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncOUWarehouse')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InventLocation"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "SinkOUWarehouse"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "filterDataAreaNonEmpty"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          allowlaborstandards as long,",
						"          allowmarkingreservationremoval as long,",
						"          consolidateshipatrtw as long,",
						"          cyclecountallowpalletmove as long,",
						"          decrementloadline as long,",
						"          fshstore as long,",
						"          inventcountinggroup_br as long,",
						"          inventlocationtype as long,",
						"          inventprofiletype_ru as long,",
						"          manual as long,",
						"          printbolbeforeshipconfirm as long,",
						"          prodreserveonlywhse as long,",
						"          removeinventblockingonstatuschange as long,",
						"          reqrefill as long,",
						"          reserveatloadpost as long,",
						"          retailinventnegfinancial as long,",
						"          retailinventnegphysical as long,",
						"          uniquecheckdigits as long,",
						"          usewmsorders as long,",
						"          whsenabled as long,",
						"          whsrawmaterialpolicy as long,",
						"          wmsaislenameactive as long,",
						"          wmslevelnameactive as long,",
						"          wmspositionnameactive as long,",
						"          wmsracknameactive as long,",
						"          warehouseautoreleasereservation as long,",
						"          releasetowarehouserule as long,",
						"          autoupdateshipment as long,",
						"          enablequalitymanagement as long,",
						"          loadreleasereservationpolicy as long,",
						"          whsprodorderbackflushmustusereservedqty as long,",
						"          inventusedefaultproductionlocationforformulabom as long,",
						"          rafpostingmethod as long,",
						"          sunecommintegrationtype as long,",
						"          sun3plintegrationtype as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafaggplanningwhse as long,",
						"          hsoatpcalculation as long,",
						"          hsoisshortpickadjustmentjour as long,",
						"          onpickingrequired as long,",
						"          oninventorycalculationmethod as long,",
						"          onprocessssccreceiptmessages as long,",
						"          on3plssccinboundenabled as long,",
						"          enableexternalwarehouse as long,",
						"          sysdatastatecode as long,",
						"          activitytype_ru as string,",
						"          branchnumber as string,",
						"          custaccount_br as string,",
						"          custaccount_hu as string,",
						"          defaultkanbanfinishedgoodslocation as string,",
						"          defaultproductionfinishgoodslocation as string,",
						"          defaultshipmaintenanceloc as string,",
						"          defaultstatusid as string,",
						"          emptypalletlocation as string,",
						"          inventlocationid as string,",
						"          inventlocationidgoodsinroute_ru as string,",
						"          inventlocationidquarantine as string,",
						"          inventlocationidreqmain as string,",
						"          inventlocationidtransit as string,",
						"          inventlocationlevel as long,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          maxpickingroutetime as long,",
						"          maxpickingroutevolume as decimal(38,6),",
						"          name as string,",
						"          numbersequencegroup_ru as string,",
						"          pickinglinetime as long,",
						"          rbodefaultinventprofileid_ru as string,",
						"          rbodefaultwmslocationid as string,",
						"          rbodefaultwmspalletid as string,",
						"          reqcalendarid as string,",
						"          retailweightex1 as decimal(38,6),",
						"          retailwmslocationiddefaultreturn as string,",
						"          retailwmspalletiddefaultreturn as string,",
						"          vendaccount as string,",
						"          vendaccountcustom_ru as string,",
						"          wmslevelformat as string,",
						"          wmslocationiddefaultissue as string,",
						"          wmslocationiddefaultreceipt as string,",
						"          wmslocationidgoodsinroute_ru as string,",
						"          wmspositionformat as string,",
						"          wmsrackformat as string,",
						"          defaultproductioninputlocation as string,",
						"          defaultreturncreditonlylocation as string,",
						"          defaultcontainertypecode as string,",
						"          workprocessingpolicyname as string,",
						"          defaultqualitymaintenancelocation as string,",
						"          hmimexportlanguage as string,",
						"          hmimdomesticlanguage as string,",
						"          defaultfinalshipmentlocation as string,",
						"          defaultsortinglocation as string,",
						"          rejectorderfulfillment as string,",
						"          itminventlocationidunder as string,",
						"          itminventlocationidgit as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafaggplanningwhseid as string,",
						"          suntafsplitpercentage as long,",
						"          hso3plvendaccount as string,",
						"          hsoinventlocationidwaiting as string,",
						"          hsoatpissuemargin as long,",
						"          hsoportwarehouse as string,",
						"          hsovirtualwarehouse as string,",
						"          hsofiscaldocumentemail as string,",
						"          oninventtodeviationvirtualwh as string,",
						"          onreturnwarehouse as string,",
						"          onvatcountry as string,",
						"          onvatid as string,",
						"          onforecastnettinggroupid as string,",
						"          onovgwarehouse as string,",
						"          ondlvdatecalendarcalculation as string,",
						"          onreturnsite as string,",
						"          externalwarehouseid as string,",
						"          externalwarehousedefaultlocation as string,",
						"          externalwarehousemanagementsystemid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onisinventtransfershortpick as long,",
						"          oninventlocationidinventtransfershortpick as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/inventlocation_partitioned',",
						"     manifestType: 'manifest') ~> InventLocation",
						"filterDataAreaNonEmpty select(mapColumn(",
						"          crd3c_name = inventlocationid,",
						"          crd3c_site = inventsiteid,",
						"          crd3c_warehousename = name,",
						"          crd3c_dataarea = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(crd3c_warehousetype = iif(endsWith(upper( crd3c_name), \"-STORE\") ,\"Store\",iif(endsWith(upper( crd3c_name), \"-STK\") ,\"Stock\",\"\")),",
						"          crd3c_warehousename = replace(replace(crd3c_warehousename, \"♂\", \" \"),\"\u000b\", \" \")) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> AlterRow1",
						"InventLocation filter(not(isNull(dataareaid))) ~> filterDataAreaNonEmpty",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     alternateKeyName: 'crd3c_warehousedataarea',",
						"     partitionFileNames:['OuWarehouseCsv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     partitionBy('hash', 1)) ~> SinkOUWarehouse"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendors"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationCustomer"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "VendorsSelect"
						},
						{
							"name": "FilterVendorsWithStoresAsInventLocation"
						},
						{
							"name": "selectWarehouseCols"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "LookUpCustomerParty"
						},
						{
							"name": "GetThePartyTableRecords"
						},
						{
							"name": "SelectInterCoCustomers"
						},
						{
							"name": "LookUpThePartyNumber"
						},
						{
							"name": "FinalCustomerSelectWithPartyNumber"
						},
						{
							"name": "select4"
						},
						{
							"name": "GetCustomerDetails"
						},
						{
							"name": "GetVendorParty"
						},
						{
							"name": "SelectVendorParty"
						},
						{
							"name": "GetVendorParty2"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "GetVendCustRelation"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "ConvertVendorPartyToString"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> Vendors",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousetype as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_uowarehouses\">\\n    <attribute name=\"crd3c_uowarehousesid\" />\\n    <attribute name=\"crd3c_name\" />\\n    <attribute name=\"crd3c_warehousetype\" />\\n    <order attribute=\"crd3c_name\" descending=\"false\" />\\n    <filter type=\"and\">\\n      <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Store\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> UOWarehouses",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationCustomer",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          irs1099cindicator as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          identificationnumber as string,",
						"          passportno_hu as string,",
						"          taxlicensenum as string,",
						"          dynfamilygroupid as string,",
						"          trigeoid as string,",
						"          onnoshortpickallowed as long,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          hsoprofileid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned',",
						"     manifestType: 'manifest') ~> Customers",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"Vendors select(mapColumn(",
						"          hso_site = inventsiteid,",
						"          hso_store = inventlocation,",
						"          hso_company = dataareaid,",
						"          hso_vendorgroup = vendgroup,",
						"          hso_name = accountnum,",
						"          hso_store2 = inventlocation,",
						"          VENDPARTY = party,",
						"          VENDRECID = recid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> VendorsSelect",
						"VendorsSelect filter(endsWith(upper(hso_store), \"-STORE\")) ~> FilterVendorsWithStoresAsInventLocation",
						"UOWarehouses select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCols",
						"FilterVendorsWithStoresAsInventLocation, selectWarehouseCols lookup(hso_store == crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(crd3c_uowarehousesid = concat(concat('crd3c_uowarehouseses','('),concat(crd3c_uowarehousesid,')'))) ~> derivedColumn1",
						"InterCompanyTradingRelationCustomer, selectInterCompanyTradingPartner lookup(intercompanytradingcustomer == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpCustomerParty",
						"LookUpCustomerParty, selectParty lookup(customerparty == selectParty@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetThePartyTableRecords",
						"Customers select(mapColumn(",
						"          PARTYRECID = party,",
						"          ACCOUNTNUM = accountnum,",
						"          INVENTLOCATION = inventlocation,",
						"          CUSTGROUP = custgroup,",
						"          INVENTSITEID = inventsiteid,",
						"          CUSTDATAAREA = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInterCoCustomers",
						"SelectInterCoCustomers, selectParty lookup(PARTYRECID == recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpThePartyNumber",
						"LookUpThePartyNumber select(mapColumn(",
						"          CUSTDATAAREA,",
						"          ACCOUNTNUM,",
						"          INVENTSITEID,",
						"          INVENTLOCATION,",
						"          CUSTPARTYNUMBER = partynumber,",
						"          CUSTPARTYRECID = PARTYRECID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalCustomerSelectWithPartyNumber",
						"GetThePartyTableRecords select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          INTERCOMPANYTRADINGCUSTOMER = intercompanytradingcustomer,",
						"          CUSTOMERPARTY = customerparty,",
						"          NAME = name,",
						"          CUSTOMERPARTYNUMBER = partynumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, FinalCustomerSelectWithPartyNumber lookup(CUSTOMERPARTYNUMBER == CUSTPARTYNUMBER,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetCustomerDetails",
						"InterCompanyTradingRelationVendor, selectInterCompanyTradingPartner lookup(intercompanytradingvendor == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty",
						"GetVendorParty select(mapColumn(",
						"          VENDORPARTY = vendorparty,",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectVendorParty",
						"GetCustomerDetails, SelectVendorParty lookup(select4@INTERCOMPANYTRADINGVENDOR == SelectVendorParty@INTERCOMPANYTRADINGVENDOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty2",
						"GetVendorParty2 select(mapColumn(",
						"          CUSTNAME = NAME,",
						"          CUSTOMERPARTYNUMBER,",
						"          CUSTACCOUNTNUM = ACCOUNTNUM,",
						"          INVENTLOCATION,",
						"          VENDORPARTY,",
						"          CUSTDATAAREA,",
						"          INVENTSITEID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"derivedColumn1, FinalSelect lookup(VENDPARTY == VENDORPARTY,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendCustRelation",
						"ConvertVendorPartyToString alterRow(upsertIf(true())) ~> alterRow1",
						"GetVendCustRelation derive(VENDPARTY = toString(VENDPARTY)) ~> ConvertVendorPartyToString",
						"InterCompanyTradingPartner select(mapColumn(",
						"          recid,",
						"          customerparty,",
						"          vendorparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          partynumber,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_site,",
						"          {hso_store@odata.bind} = crd3c_uowarehousesid,",
						"          hso_name,",
						"          hso_company,",
						"          hso_vendorgroup,",
						"          hso_store2 = hso_store,",
						"          hso_customer = CUSTACCOUNTNUM,",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_companycustomer = CUSTDATAAREA,",
						"          hso_sitecustomer = INVENTSITEID,",
						"          hso_custgroup = CUSTGROUP,",
						"          hso_customername = CUSTNAME,",
						"          hso_vendorid = VENDPARTY",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_CustWH_SourcingWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendors"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "OLTestSink",
							"description": "OLTestSink"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyVendorColumns"
						},
						{
							"name": "FilterONKRVendors",
							"description": "Filter vendors based on ONKR legal entity"
						},
						{
							"name": "SelectCustomer"
						},
						{
							"name": "SelectIntercompanyRelation"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "L1GetVendorPartner"
						},
						{
							"name": "L2SelectCustomerPartyAndDataArea"
						},
						{
							"name": "L2GetCustomer"
						},
						{
							"name": "SelectPartnerRecId"
						},
						{
							"name": "L1RelationCustomerVendor"
						},
						{
							"name": "SelectRelatedCustomer"
						},
						{
							"name": "L2SelectCustAccount"
						},
						{
							"name": "IntercompanyPartner"
						},
						{
							"name": "L3GetVendorBasedOnSourcing"
						},
						{
							"name": "FilterVendorsWithONSourcing",
							"description": "Filter vendors that have ONSourcingVendAccount not NULL"
						},
						{
							"name": "L3SelectVendorPartyAndDataArea"
						},
						{
							"name": "L3GetVendorPartner"
						},
						{
							"name": "L3SelectPartnerRecId"
						},
						{
							"name": "L3RelationCustomerVendor"
						},
						{
							"name": "L4ICCustomer"
						},
						{
							"name": "join1"
						},
						{
							"name": "L4SelectCustPartyAndDataAreaId"
						},
						{
							"name": "L4GetCustomer"
						},
						{
							"name": "FinalSelectCustomer"
						},
						{
							"name": "L1GetCustomerPartyAndDataArea"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> Vendors",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          irs1099cindicator as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          identificationnumber as string,",
						"          passportno_hu as string,",
						"          taxlicensenum as string,",
						"          dynfamilygroupid as string,",
						"          trigeoid as string,",
						"          onnoshortpickallowed as long,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          hsoprofileid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned',",
						"     manifestType: 'manifest') ~> Customers",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"Vendors select(mapColumn(",
						"          DATAAREAID = dataareaid,",
						"          VENDACCOUNT = accountnum,",
						"          VENDPARTY = party,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
						"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
						"Customers select(mapColumn(",
						"          PARTY = party,",
						"          ACCOUNTNUM = accountnum,",
						"          INVENTLOCATION = inventlocation,",
						"          CUSTGROUP = custgroup,",
						"          INVENTSITEID = inventsiteid,",
						"          CUSTDATAAREA = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
						"InterCompanyTradingRelationVendor select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
						"InterCompanyTradingPartner select(mapColumn(",
						"          partnerrecid = recid,",
						"          customerparty,",
						"          vendorparty,",
						"          vendordataareaid,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"FilterONKRVendors, IntercompanyPartner join(VENDPARTY == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1GetVendorPartner",
						"L1GetCustomerPartyAndDataArea select(mapColumn(",
						"          customerparty,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustomerPartyAndDataArea",
						"L2SelectCustomerPartyAndDataArea, SelectCustomer join(customerparty == PARTY",
						"     && customerdataareaid == CUSTDATAAREA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L2GetCustomer",
						"L1GetVendorPartner select(mapColumn(",
						"          partnerrecid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectPartnerRecId",
						"SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1RelationCustomerVendor",
						"L1RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelatedCustomer",
						"L2GetCustomer select(mapColumn(",
						"          ACCOUNTNUM,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
						"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
						"          customerdataareaid = lower(customerdataareaid)) ~> IntercompanyPartner",
						"L2SelectCustAccount, FilterVendorsWithONSourcing join(ACCOUNTNUM == onsourcingvendaccount",
						"     && customerdataareaid == DATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
						"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
						"L3GetVendorBasedOnSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          VENDPARTY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
						"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(VENDPARTY == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorPartner",
						"L3GetVendorPartner select(mapColumn(",
						"          partnerrecid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
						"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == intercompanytradingcustomer,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3RelationCustomerVendor",
						"L3RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
						"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customerparty,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
						"L4SelectCustPartyAndDataAreaId, SelectCustomer join(customerparty == PARTY",
						"     && customerdataareaid == CUSTDATAAREA,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L4GetCustomer",
						"L4GetCustomer select(mapColumn(",
						"          PARTY,",
						"          ACCOUNTNUM,",
						"          INVENTLOCATION,",
						"          CUSTGROUP,",
						"          INVENTSITEID,",
						"          CUSTDATAAREA",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
						"SelectRelatedCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1GetCustomerPartyAndDataArea",
						"FinalSelectCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['IntercompanyChain4_OL.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> OLTestSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_CustWH_SourcingWH_Test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						},
						{
							"dataset": {
								"referenceName": "OL_13082025_0914",
								"type": "DatasetReference"
							},
							"name": "myTempFile"
						},
						{
							"dataset": {
								"referenceName": "OL_Tmp_CustTable",
								"type": "DatasetReference"
							},
							"name": "CustTableTmp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "Vendors"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyVendorColumns"
						},
						{
							"name": "FilterONKRVendors",
							"description": "Filter vendors based on ONKR legal entity"
						},
						{
							"name": "SelectCustomer"
						},
						{
							"name": "SelectIntercompanyRelation"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "L1VendPartner"
						},
						{
							"name": "L2SelectCustPartner"
						},
						{
							"name": "L2GetCustomer"
						},
						{
							"name": "L1SelectVendPartnerRecId"
						},
						{
							"name": "L1VendRelation"
						},
						{
							"name": "L1SelectCustRelation"
						},
						{
							"name": "L2SelectCustAccount"
						},
						{
							"name": "IntercompanyPartner"
						},
						{
							"name": "L3GetVendorBasedOnSourcing"
						},
						{
							"name": "FilterVendorsWithONSourcing",
							"description": "Filter vendors that have ONSourcingVendAccount not NULL"
						},
						{
							"name": "L3SelectVendorPartyAndDataArea"
						},
						{
							"name": "L3GetVendorPartner"
						},
						{
							"name": "L3SelectPartnerRecId"
						},
						{
							"name": "L3RelationCustomerVendor"
						},
						{
							"name": "L4ICCustomer"
						},
						{
							"name": "join1"
						},
						{
							"name": "L4SelectCustPartyAndDataAreaId"
						},
						{
							"name": "L4GetCustomer"
						},
						{
							"name": "FinalSelectCustomer"
						},
						{
							"name": "L1CustPartner"
						},
						{
							"name": "ICCustomer"
						},
						{
							"name": "SelectONSourcingVendors"
						},
						{
							"name": "LowercaseDataArea"
						},
						{
							"name": "join2"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as string,",
						"          SinkModifiedOn as string,",
						"          bidonly as string,",
						"          blocked as string,",
						"          cashaccountingregime_es as string,",
						"          changerequestallowoverride as string,",
						"          changerequestenabled as string,",
						"          changerequestoverride as string,",
						"          cisstatus as string,",
						"          companytype_mx as string,",
						"          disabledowned as string,",
						"          fatcafilingrequirement as string,",
						"          femaleowned as string,",
						"          foreignentityindicator as string,",
						"          foreignresident_ru as string,",
						"          heir_it as string,",
						"          hubzone as string,",
						"          icmscontributor_br as string,",
						"          incltax as string,",
						"          inventprofiletype_ru as string,",
						"          ispaymfeecovered_jp as string,",
						"          isresident_lv as string,",
						"          locallyowned as string,",
						"          mandatoryvatdate_pl as string,",
						"          matchingpolicy as string,",
						"          minorityowned as string,",
						"          nontaxable_br as string,",
						"          offsetaccounttype as string,",
						"          onetimevendor as string,",
						"          operationtype_mx as string,",
						"          presencetype_br as string,",
						"          purchamountpurchaseorder as string,",
						"          secondtin as string,",
						"          servicecodeondlvaddress_br as string,",
						"          smallbusiness as string,",
						"          tax1099namechoice as string,",
						"          tax1099reports as string,",
						"          taxidtype as string,",
						"          taxwithholdcalculate as string,",
						"          taxwithholdvendortype_th as string,",
						"          unitedvatinvoice_lt as string,",
						"          usecashdisc as string,",
						"          vatpartnerkind_ru as string,",
						"          vattaxagent_ru as string,",
						"          vendconsumption_br as string,",
						"          vendortype_mx as string,",
						"          veteranowned as string,",
						"          w9 as string,",
						"          w9included as string,",
						"          vendvendorcollaborationtype as string,",
						"          withholdingtaxpayertype_mx as string,",
						"          originalvendorinreporting_it as string,",
						"          isselfinvoicevendor_it as string,",
						"          workflowstate as string,",
						"          iscprb_br as string,",
						"          cxmlorderenable as string,",
						"          vatnumtabletype as string,",
						"          overridesalestax as string,",
						"          accruesalestaxtype as string,",
						"          taxvendorchargetaxtolerancevalidation as string,",
						"          revenuetypology_it as string,",
						"          ispublicsector_it as string,",
						"          istaxationoverpayroll_br as string,",
						"          einvoiceregister_it as string,",
						"          isunidentifiedbenef_br as string,",
						"          itmimportcostingvendor as string,",
						"          itmservicesprovider as string,",
						"          itmvendtype as string,",
						"          exf_porequired as string,",
						"          exf_classified as string,",
						"          exf_vendorportalinvoicesmustbeapproved as string,",
						"          exf_istmsfreight as string,",
						"          sunplmsyncwithplm as string,",
						"          hsooscaenabled as string,",
						"          hsogitincludevendorinquery as string,",
						"          oninterface as string,",
						"          onsourcingdeliverytype as string,",
						"          onsourcingupdatechain as string,",
						"          onpoplacementenabled as string,",
						"          sysdatastatecode as string,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as string,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as string,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as string,",
						"          consday_jp as string,",
						"          contactpersonid as string,",
						"          creditmax as string,",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as string,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as string,",
						"          maincontactworker as string,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as string,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as string,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as string,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as string,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as string,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as string,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as string,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as string,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as string,",
						"          taxvendorchargetaxtolerancepercent as string,",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          onsource as string,",
						"          onexternalid as string,",
						"          vrmglobalvendor as string,",
						"          modifieddatetime as string,",
						"          modifiedby as string,",
						"          modifiedtransactionid as string,",
						"          createddatetime as string,",
						"          createdby as string,",
						"          createdtransactionid as string,",
						"          dataareaid as string,",
						"          recversion as string,",
						"          partition as string,",
						"          sysrowversion as string,",
						"          recid as string,",
						"          tableid as string,",
						"          versionnumber as string,",
						"          createdon as string,",
						"          modifiedon as string,",
						"          IsDelete as string,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> myTempFile",
						"source(output(",
						"          vendorId as string,",
						"          party as long,",
						"          inventlocation as string,",
						"          dataareaid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> CustTableTmp",
						"myTempFile select(mapColumn(",
						"          DATAAREAID = dataareaid,",
						"          VENDACCOUNT = accountnum,",
						"          VENDPARTYORIG = party,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
						"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
						"CustTableTmp select(mapColumn(",
						"          PARTY = party,",
						"          ACCOUNTNUM = vendorId,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
						"InterCompanyTradingRelationVendor select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
						"InterCompanyTradingPartner select(mapColumn(",
						"          partnerrecid = recid,",
						"          customerparty,",
						"          vendorparty,",
						"          vendordataareaid,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"FilterONKRVendors, IntercompanyPartner join(VENDPARTYORIG == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendPartner",
						"L1CustPartner select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustPartner",
						"L2SelectCustPartner, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L2GetCustomer",
						"L1VendPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG = DATAAREAID,",
						"          VENDACCOUNTORIG = VENDACCOUNT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectVendPartnerRecId",
						"L1SelectVendPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendRelation",
						"L1VendRelation select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG,",
						"          VENDACCOUNTORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectCustRelation",
						"L2GetCustomer select(mapColumn(",
						"          ACCOUNTNUM,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
						"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
						"          customerdataareaid = lower(customerdataareaid),",
						"          vendorparty = toString(vendorparty)) ~> IntercompanyPartner",
						"L2SelectCustAccount, SelectONSourcingVendors join(ACCOUNTNUM == onsourcingvendaccount",
						"     && customerdataareaid == DATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
						"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
						"L3GetVendorBasedOnSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          VENDPARTY,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
						"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(DATAAREAID == vendordataareaid",
						"     && VENDPARTY == vendorparty,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorPartner",
						"L3GetVendorPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
						"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3RelationCustomerVendor",
						"L3RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
						"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
						"L4SelectCustPartyAndDataAreaId, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L4GetCustomer",
						"L4GetCustomer select(mapColumn(",
						"          INVENTLOCATION = inventlocation,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
						"L1SelectCustRelation, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1CustPartner",
						"join2 select(mapColumn(",
						"          PARTY,",
						"          ACCOUNTNUM,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ICCustomer",
						"select1 derive(DATAAREAID = lower(DATAAREAID),",
						"          VENDPARTY = toString(VENDPARTY)) ~> SelectONSourcingVendors",
						"SelectCustomer derive(dataareaid = lower(dataareaid)) ~> LowercaseDataArea",
						"LowercaseDataArea, IntercompanyPartner join(PARTY == customerparty",
						"     && dataareaid == customerdataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"FinalSelectCustomer alterRow(updateIf(true())) ~> Upsert",
						"FilterVendorsWithONSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          onsourcingvendaccount,",
						"          VENDPARTY = VENDPARTYORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_vendorid = VENDPARTYORIG,",
						"          hso_company = DATAAREAIDORIG,",
						"          hso_name = VENDACCOUNTORIG",
						"     )) ~> Vendors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/OL_13082025_0914')]",
				"[concat(variables('factoryId'), '/datasets/OL_Tmp_CustTable')]",
				"[concat(variables('factoryId'), '/datasets/Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_IC4Way')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendor"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "Vendors"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyVendorColumns"
						},
						{
							"name": "FilterONKRVendors",
							"description": "Filter vendors based on ONKR legal entity"
						},
						{
							"name": "SelectCustomer"
						},
						{
							"name": "SelectIntercompanyRelation"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "L1VendPartner"
						},
						{
							"name": "L2SelectCustPartner"
						},
						{
							"name": "L2GetCustomer"
						},
						{
							"name": "L1SelectVendPartnerRecId"
						},
						{
							"name": "L1VendRelation"
						},
						{
							"name": "L1SelectCustRelation"
						},
						{
							"name": "L2SelectCustAccount"
						},
						{
							"name": "IntercompanyPartner"
						},
						{
							"name": "L3GetVendorBasedOnSourcing"
						},
						{
							"name": "FilterVendorsWithONSourcing",
							"description": "Filter vendors that have ONSourcingVendAccount not NULL"
						},
						{
							"name": "L3SelectVendorPartyAndDataArea"
						},
						{
							"name": "L3GetVendorPartner"
						},
						{
							"name": "L3SelectPartnerRecId"
						},
						{
							"name": "L3RelationCustomerVendor"
						},
						{
							"name": "L4ICCustomer"
						},
						{
							"name": "join1"
						},
						{
							"name": "L4SelectCustPartyAndDataAreaId"
						},
						{
							"name": "L4GetCustomer"
						},
						{
							"name": "FinalSelectCustomer"
						},
						{
							"name": "L1CustPartner"
						},
						{
							"name": "ICCustomer"
						},
						{
							"name": "SelectONSourcingVendors"
						},
						{
							"name": "LowercaseDataArea"
						},
						{
							"name": "join2"
						},
						{
							"name": "Upsert"
						},
						{
							"name": "select1"
						},
						{
							"name": "ConvertVendorParty"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          onsource as string,",
						"          onexternalid as string,",
						"          vrmglobalvendor as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned') ~> Vendor",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          irs1099cindicator as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          prepaytype as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          onnoshortpickallowed as long,",
						"          onmarketplaceautomaticsettlement as long,",
						"          onhrccreditlimitupdated as long,",
						"          qmscustomercheckitem as long,",
						"          qmsprintcustspecificcertofanalysis as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          identificationnumber as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          passportno_hu as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxlicensenum as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          prepaymentvalue as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          hsoprofileid as string,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          onmarketplacejournalname as string,",
						"          onhrccreditlimitstagingid as string,",
						"          qmsapprovedcustomergroupid as string,",
						"          qmscertofanalysiscustgroup as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned') ~> Customer",
						"Vendor select(mapColumn(",
						"          DATAAREAID = dataareaid,",
						"          VENDACCOUNT = accountnum,",
						"          VENDPARTYORIG = party,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
						"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
						"Customer select(mapColumn(",
						"          PARTY = party,",
						"          ACCOUNTNUM = accountnum,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
						"InterCompanyTradingRelationVendor select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          intercompanytradingcustomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
						"InterCompanyTradingPartner select(mapColumn(",
						"          partnerrecid = recid,",
						"          customerparty,",
						"          vendorparty,",
						"          vendordataareaid,",
						"          customerdataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"ConvertVendorParty, IntercompanyPartner join(VENDPARTYORIG == vendorparty",
						"     && DATAAREAID == vendordataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendPartner",
						"L1CustPartner select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustPartner",
						"L2SelectCustPartner, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L2GetCustomer",
						"L1VendPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG = DATAAREAID,",
						"          VENDACCOUNTORIG = VENDACCOUNT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectVendPartnerRecId",
						"L1SelectVendPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1VendRelation",
						"L1VendRelation select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG,",
						"          VENDACCOUNTORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L1SelectCustRelation",
						"L2GetCustomer select(mapColumn(",
						"          ACCOUNTNUM,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
						"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
						"          customerdataareaid = lower(customerdataareaid),",
						"          vendorparty = toString(vendorparty)) ~> IntercompanyPartner",
						"L2SelectCustAccount, SelectONSourcingVendors join(ACCOUNTNUM == onsourcingvendaccount",
						"     && customerdataareaid == DATAAREAID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
						"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
						"L3GetVendorBasedOnSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          VENDPARTY,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
						"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(DATAAREAID == vendordataareaid",
						"     && VENDPARTY == vendorparty,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3GetVendorPartner",
						"L3GetVendorPartner select(mapColumn(",
						"          partnerrecid,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
						"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L3RelationCustomerVendor",
						"L3RelationCustomerVendor select(mapColumn(",
						"          intercompanytradingcustomer,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
						"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customerparty,",
						"          VENDACCOUNTORIG,",
						"          customerdataareaid,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
						"L4SelectCustPartyAndDataAreaId, ICCustomer join(customerparty == PARTY",
						"     && customerdataareaid == dataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L4GetCustomer",
						"L4GetCustomer select(mapColumn(",
						"          INVENTLOCATION = inventlocation,",
						"          VENDACCOUNTORIG,",
						"          VENDPARTYORIG,",
						"          DATAAREAIDORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
						"L1SelectCustRelation, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> L1CustPartner",
						"join2 select(mapColumn(",
						"          PARTY,",
						"          ACCOUNTNUM,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ICCustomer",
						"select1 derive(DATAAREAID = lower(DATAAREAID),",
						"          VENDPARTY = toString(VENDPARTY)) ~> SelectONSourcingVendors",
						"SelectCustomer derive(dataareaid = lower(dataareaid)) ~> LowercaseDataArea",
						"LowercaseDataArea, IntercompanyPartner join(PARTY == customerparty",
						"     && dataareaid == customerdataareaid,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"FinalSelectCustomer alterRow(updateIf(true())) ~> Upsert",
						"FilterVendorsWithONSourcing select(mapColumn(",
						"          DATAAREAID,",
						"          onsourcingvendaccount,",
						"          VENDPARTY = VENDPARTYORIG",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"FilterONKRVendors derive(VENDPARTYORIG = toString(VENDPARTYORIG)) ~> ConvertVendorParty",
						"Upsert sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_vendorid = VENDPARTYORIG,",
						"          hso_company = DATAAREAIDORIG,",
						"          hso_name = VENDACCOUNTORIG",
						"     )) ~> Vendors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SyncVendors_SourcingWH')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Vendors"
						},
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "UOWarehouses"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationCustomer"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Customers"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingPartner"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Party"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "InterCompanyTradingRelationVendor"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Vendors",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "VendorsSelect"
						},
						{
							"name": "FilterVendorsWithStoresAsInventLocation"
						},
						{
							"name": "selectWarehouseCols"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColWH"
						},
						{
							"name": "LookUpCustomerParty"
						},
						{
							"name": "GetThePartyTableRecords"
						},
						{
							"name": "SelectInterCoCustomers"
						},
						{
							"name": "LookUpThePartyNumber"
						},
						{
							"name": "FinalCustomerSelectWithPartyNumber"
						},
						{
							"name": "select4"
						},
						{
							"name": "GetCustomerDetails"
						},
						{
							"name": "GetVendorParty"
						},
						{
							"name": "SelectVendorParty"
						},
						{
							"name": "GetVendorParty2"
						},
						{
							"name": "FinalSelect"
						},
						{
							"name": "GetVendCustRelation"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "ConvertVendorPartyToString"
						},
						{
							"name": "selectInterCompanyTradingPartner"
						},
						{
							"name": "selectParty"
						},
						{
							"name": "GetVendorPartyL2"
						},
						{
							"name": "SelectVendorPartyL2"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          onsource as string,",
						"          onexternalid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned',",
						"     manifestType: 'manifest') ~> Vendors",
						"source(output(",
						"          {@odata.etag} as string,",
						"          crd3c_name as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousetype as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_uowarehouses\">\\n    <attribute name=\"crd3c_uowarehousesid\" />\\n    <attribute name=\"crd3c_name\" />\\n    <attribute name=\"crd3c_warehousetype\" />\\n    <order attribute=\"crd3c_name\" descending=\"false\" />\\n    <filter type=\"or\">\\n      <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Store\" />\\n       <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Stock\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> UOWarehouses",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationCustomer",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string,",
						"          irs1099cindicator as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          identificationnumber as string,",
						"          passportno_hu as string,",
						"          taxlicensenum as string,",
						"          dynfamilygroupid as string,",
						"          trigeoid as string,",
						"          onnoshortpickallowed as long,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          hsoprofileid as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned',",
						"     manifestType: 'manifest') ~> Customers",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          sysdatastatecode as long,",
						"          instancerelationtype as long,",
						"          knownas as string,",
						"          languageid as string,",
						"          name as string,",
						"          namealias as string,",
						"          partynumber as string,",
						"          primaryaddresslocation as long,",
						"          primarycontactemail as long,",
						"          primarycontactfax as long,",
						"          primarycontactphone as long,",
						"          primarycontacttelex as long,",
						"          primarycontacturl as long,",
						"          primarycontactfacebook as long,",
						"          primarycontacttwitter as long,",
						"          primarycontactlinkedin as long,",
						"          addressbooknames as string,",
						"          legacyinstancerelationtype as long,",
						"          hsoexternalcontactreference as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/dirpartytable_partitioned',",
						"     manifestType: 'manifest') ~> Party",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          active as long,",
						"          excludeihbnetting as long,",
						"          sysdatastatecode as long,",
						"          intercompanytradingcustomer as long,",
						"          intercompanytradingvendor as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
						"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
						"Vendors select(mapColumn(",
						"          hso_site = inventsiteid,",
						"          hso_store = inventlocation,",
						"          hso_company = dataareaid,",
						"          hso_vendorgroup = vendgroup,",
						"          hso_name = accountnum,",
						"          hso_store2 = inventlocation,",
						"          VENDPARTY = party,",
						"          VENDRECID = recid,",
						"          onsourcingvendaccount",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> VendorsSelect",
						"VendorsSelect filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithStoresAsInventLocation",
						"UOWarehouses select(mapColumn(",
						"          crd3c_uowarehousesid,",
						"          crd3c_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectWarehouseCols",
						"FilterVendorsWithStoresAsInventLocation, selectWarehouseCols lookup(hso_store == crd3c_name,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(crd3c_uowarehousesid = concat(concat('crd3c_uowarehouseses','('),concat(crd3c_uowarehousesid,')'))) ~> derivedColWH",
						"InterCompanyTradingRelationCustomer, selectInterCompanyTradingPartner lookup(intercompanytradingcustomer == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpCustomerParty",
						"LookUpCustomerParty, selectParty lookup(customerparty == selectParty@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetThePartyTableRecords",
						"Customers select(mapColumn(",
						"          PARTYRECID = party,",
						"          ACCOUNTNUM = accountnum,",
						"          INVENTLOCATION = inventlocation,",
						"          CUSTGROUP = custgroup,",
						"          INVENTSITEID = inventsiteid,",
						"          CUSTDATAAREA = dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInterCoCustomers",
						"SelectInterCoCustomers, selectParty lookup(PARTYRECID == recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookUpThePartyNumber",
						"LookUpThePartyNumber select(mapColumn(",
						"          CUSTDATAAREA,",
						"          ACCOUNTNUM,",
						"          INVENTSITEID,",
						"          INVENTLOCATION,",
						"          CUSTPARTYNUMBER = partynumber,",
						"          CUSTPARTYRECID = PARTYRECID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalCustomerSelectWithPartyNumber",
						"GetThePartyTableRecords select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
						"          INTERCOMPANYTRADINGCUSTOMER = intercompanytradingcustomer,",
						"          CUSTOMERPARTY = customerparty,",
						"          NAME = name,",
						"          CUSTOMERPARTYNUMBER = partynumber",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select4, FinalCustomerSelectWithPartyNumber lookup(CUSTOMERPARTYNUMBER == CUSTPARTYNUMBER,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetCustomerDetails",
						"InterCompanyTradingRelationVendor, selectInterCompanyTradingPartner lookup(intercompanytradingvendor == selectInterCompanyTradingPartner@recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty",
						"GetVendorParty select(mapColumn(",
						"          VENDORPARTY1 = vendorparty,",
						"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectVendorParty",
						"GetCustomerDetails, SelectVendorPartyL2 lookup(select4@INTERCOMPANYTRADINGVENDOR == SelectVendorPartyL2@INTERCOMPANYTRADINGVENDOR,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorParty2",
						"GetVendorParty2 select(mapColumn(",
						"          CUSTNAME = NAME,",
						"          CUSTOMERPARTYNUMBER,",
						"          CUSTACCOUNTNUM = ACCOUNTNUM,",
						"          INVENTLOCATION,",
						"          VENDORPARTY,",
						"          CUSTDATAAREA,",
						"          INVENTSITEID,",
						"          CUSTGROUP",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalSelect",
						"derivedColWH, FinalSelect lookup(VENDPARTY == VENDORPARTY,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendCustRelation",
						"ConvertVendorPartyToString alterRow(upsertIf(true())) ~> alterRow1",
						"GetVendCustRelation derive(VENDPARTY = toString(VENDPARTY)) ~> ConvertVendorPartyToString",
						"InterCompanyTradingPartner select(mapColumn(",
						"          recid,",
						"          customerparty,",
						"          vendorparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
						"Party select(mapColumn(",
						"          recid,",
						"          partynumber,",
						"          name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectParty",
						"SelectVendorParty, selectInterCompanyTradingPartner lookup(INTERCOMPANYTRADINGVENDOR == recid,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> GetVendorPartyL2",
						"GetVendorPartyL2 select(mapColumn(",
						"          INTERCOMPANYTRADINGVENDOR,",
						"          VENDORPARTY = vendorparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectVendorPartyL2",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     alternateKeyName: 'hso_vendorsid',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          hso_site,",
						"          {hso_store@odata.bind} = crd3c_uowarehousesid,",
						"          hso_name,",
						"          hso_company,",
						"          hso_vendorgroup,",
						"          hso_store2 = hso_store,",
						"          hso_customer = CUSTACCOUNTNUM,",
						"          hso_sourcewarehouse = INVENTLOCATION,",
						"          hso_companycustomer = CUSTDATAAREA,",
						"          hso_sitecustomer = INVENTSITEID,",
						"          hso_custgroup = CUSTGROUP,",
						"          hso_customername = CUSTNAME,",
						"          hso_vendorid = VENDPARTY",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/datasets/Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Vendors ONKR')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "VendorsONKR",
							"description": "Pull only vendors ONKR from Synapse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "SinkVendorONKR"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string ('dataverse-ontest-unqccd0037834be4cec846b41a3ea290')",
						"}",
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
						"     folderPath: 'silver_delta/vend_onkr') ~> VendorsONKR",
						"VendorsONKR select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['vendorONKR_1'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkVendorONKR"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WarehouseONUKONUS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "OL/Sample Data"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UOWarehouses",
								"type": "DatasetReference"
							},
							"name": "WHONUKONUS"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          crd3c_automatictocreation as boolean,",
						"          crd3c_automatictocreationname as string,",
						"          crd3c_dataarea as string,",
						"          crd3c_datastatus as integer,",
						"          crd3c_datastatusname as string,",
						"          crd3c_deliveryterms as string,",
						"          crd3c_modeofdelivery as string,",
						"          crd3c_name as string,",
						"          crd3c_refreshday as string,",
						"          crd3c_refreshdayname as string,",
						"          crd3c_refreshfrequency as integer,",
						"          crd3c_refreshtime as timestamp,",
						"          crd3c_site as string,",
						"          crd3c_sourcewhname as string,",
						"          crd3c_uowarehousesid as string,",
						"          crd3c_warehousename as string,",
						"          crd3c_warehousetype as string,",
						"          createdbyname as string,",
						"          createdbyyominame as string,",
						"          createdon as timestamp,",
						"          createdonbehalfbyname as string,",
						"          createdonbehalfbyyominame as string,",
						"          hso_automaticpocreation as boolean,",
						"          hso_automaticpocreationname as string,",
						"          hso_autoreservation as boolean,",
						"          hso_autoreservationname as string,",
						"          hso_companyicwarehouse as string,",
						"          hso_companylocalwarehouse as string,",
						"          hso_dualpurpose as boolean,",
						"          hso_dualpurposename as string,",
						"          hso_icwarehousename as string,",
						"          hso_maxtoqty as integer,",
						"          hso_ordertypesplit as integer,",
						"          hso_ordertypesplitname as string,",
						"          hso_sourceicwarehouse as string,",
						"          hso_storeleadername as string,",
						"          hso_storeleaderyominame as string,",
						"          hso_vendorname as string,",
						"          importsequencenumber as integer,",
						"          modifiedbyname as string,",
						"          modifiedbyyominame as string,",
						"          modifiedon as timestamp,",
						"          modifiedonbehalfbyname as string,",
						"          modifiedonbehalfbyyominame as string,",
						"          overriddencreatedon as timestamp,",
						"          owneridname as string,",
						"          owneridtype as string,",
						"          owneridyominame as string,",
						"          owningbusinessunitname as string,",
						"          statecode as integer,",
						"          statecodename as string,",
						"          statuscode as integer,",
						"          statuscodename as string,",
						"          timezoneruleversionnumber as integer,",
						"          utcconversiontimezonecode as integer,",
						"          versionnumber as long,",
						"          createdonbehalfby as string,",
						"          hso_vendor as string,",
						"          hso_icwarehouse as string,",
						"          owninguser as string,",
						"          modifiedby as string,",
						"          hso_storeleader as string,",
						"          modifiedonbehalfby as string,",
						"          ownerid as string,",
						"          {@odata.etag} as string,",
						"          crd3c_sourcewh as string,",
						"          createdby as string,",
						"          owningbusinessunit as string,",
						"          owningteam as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false) ~> WHONUKONUS",
						"WHONUKONUS filter(crd3c_dataarea == 'onuk' || crd3c_dataarea == 'onus') ~> filter1",
						"filter1 select(mapColumn(",
						"          crd3c_dataarea,",
						"          crd3c_name,",
						"          hso_vendor,",
						"          crd3c_sourcewhname,",
						"          hso_dualpurpose",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'OL/',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['WHONUSONUK.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UOWarehouses')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ProductCategories",
								"type": "DatasetReference"
							},
							"name": "ProductCategories"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          TransactionID as short,",
						"          Category as string,",
						"          Product as string,",
						"          Amount as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductCategories",
						"ProductCategories aggregate(groupBy(Category),",
						"     Amount = sum(Amount),",
						"          TotalRevenu = sum(Amount)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['CategoryPerProductTotal.xls'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ProductCategories')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "JoinedWithInventory"
						},
						{
							"name": "FilteredToOnlyWarehouses"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectItemIdSizeWHN"
						},
						{
							"name": "SelectThreeRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"FilteredToOnlyWarehouses, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedWithInventory",
						"Warehouse filter(SourcingWarehouse == 'BLUE' || SourcingWarehouse == 'GREEN' || SourcingWarehouse == 'YELLOW') ~> FilteredToOnlyWarehouses",
						"SelectItemIdSizeWHN, SelectThreeRows join(SelectItemIdSizeWHN@itemid == SelectThreeRows@itemid",
						"     && SelectItemIdSizeWHN@size == SelectThreeRows@Size",
						"     && SourcingWarehouse == WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"JoinedWithInventory select(mapColumn(",
						"          SourcingWarehouse,",
						"          itemid,",
						"          size,",
						"          {PhysicalQuantity }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdSizeWHN",
						"derivedColumn1 select(mapColumn(",
						"          WarehouseName,",
						"          itemid,",
						"          {PhysicalQuantity },",
						"          Ordered,",
						"          Size = MinimumStockLevel@Size,",
						"          Warehouse,",
						"          Company = MinimumStockLevel@Company,",
						"          MSL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectThreeRows",
						"filterMSLGreaterthanPQAndOrdered derive(column1 = MSL-({PhysicalQuantity }+Ordered)) ~> derivedColumn1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MinimumStockLevel')]",
				"[concat(variables('factoryId'), '/datasets/Inventory')]",
				"[concat(variables('factoryId'), '/datasets/Warehouse')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2_copy1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"Warehouse, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MinimumStockLevel')]",
				"[concat(variables('factoryId'), '/datasets/Inventory')]",
				"[concat(variables('factoryId'), '/datasets/Warehouse')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2_copy2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/MinimumStockLevel"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MinimumStockLevel",
								"type": "DatasetReference"
							},
							"name": "MinimumStockLevel"
						},
						{
							"dataset": {
								"referenceName": "Inventory",
								"type": "DatasetReference"
							},
							"name": "Inventory"
						},
						{
							"dataset": {
								"referenceName": "Warehouse",
								"type": "DatasetReference"
							},
							"name": "Warehouse"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MSLGreaterthanZero"
						},
						{
							"name": "joinMinStockAndInventory"
						},
						{
							"name": "filterMSLGreaterthanPQAndOrdered"
						},
						{
							"name": "JoinedWithInventory"
						},
						{
							"name": "FilteredToOnlyWarehouses"
						},
						{
							"name": "join1"
						},
						{
							"name": "SelectItemIdSizeWHN"
						},
						{
							"name": "SelectThreeRows"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Item as string,",
						"          Size as short,",
						"          Warehouse as string,",
						"          Company as string,",
						"          MSL as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MinimumStockLevel",
						"source(output(",
						"          WarehouseName as string,",
						"          company as string,",
						"          itemid as string,",
						"          size as short,",
						"          {PhysicalQuantity } as short,",
						"          Ordered as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Inventory",
						"source(output(",
						"          WarehouseName as string,",
						"          Company as string,",
						"          SourcingWarehouse as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Warehouse",
						"MinimumStockLevel filter(MSL>0) ~> MSLGreaterthanZero",
						"Inventory, MSLGreaterthanZero join(itemid == Item,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinMinStockAndInventory",
						"joinMinStockAndInventory filter(MSL> {PhysicalQuantity } + Ordered) ~> filterMSLGreaterthanPQAndOrdered",
						"FilteredToOnlyWarehouses, Inventory join(Warehouse@WarehouseName == Inventory@WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinedWithInventory",
						"Warehouse filter(SourcingWarehouse == 'BLUE' || SourcingWarehouse == 'GREEN' || SourcingWarehouse == 'YELLOW') ~> FilteredToOnlyWarehouses",
						"SelectItemIdSizeWHN, SelectThreeRows join(SelectItemIdSizeWHN@itemid == SelectThreeRows@itemid",
						"     && SelectItemIdSizeWHN@size == SelectThreeRows@Size",
						"     && SourcingWarehouse == WarehouseName,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"JoinedWithInventory select(mapColumn(",
						"          SourcingWarehouse,",
						"          itemid,",
						"          size,",
						"          {PhysicalQuantity }",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectItemIdSizeWHN",
						"derivedColumn1 select(mapColumn(",
						"          WarehouseName,",
						"          itemid,",
						"          {PhysicalQuantity },",
						"          Ordered,",
						"          Size = MinimumStockLevel@Size,",
						"          Warehouse,",
						"          Company = MinimumStockLevel@Company,",
						"          MSL",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectThreeRows",
						"filterMSLGreaterthanPQAndOrdered derive(column1 = MSL-({PhysicalQuantity }+Ordered)) ~> derivedColumn1",
						"MSLGreaterthanZero sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL/MinimumStockTask',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MinimumStockLevel')]",
				"[concat(variables('factoryId'), '/datasets/Inventory')]",
				"[concat(variables('factoryId'), '/datasets/Warehouse')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummyorders')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "JL/New folder"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dummy_orders",
								"type": "DatasetReference"
							},
							"name": "dummyorders"
						},
						{
							"dataset": {
								"referenceName": "dummy_company",
								"type": "DatasetReference"
							},
							"name": "dummycompany"
						},
						{
							"dataset": {
								"referenceName": "testOrders",
								"type": "DatasetReference"
							},
							"name": "testOrders"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          itemid as string,",
						"          quantity as short,",
						"          company as string,",
						"          {order date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummyorders",
						"source(output(",
						"          company as string,",
						"          revenue as short,",
						"          {start date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dummycompany",
						"source(output(",
						"          itemid as string,",
						"          quantity as short,",
						"          company as string,",
						"          {order date} as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> testOrders",
						"dummyorders filter(company == 'COMP_A') ~> filter1",
						"dummycompany select(mapColumn(",
						"          company",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"testOrders, dummycompany lookup(testOrders@company == dummycompany@company,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['dummyOrders.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     folderPath: 'JL',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dummy_orders')]",
				"[concat(variables('factoryId'), '/datasets/dummy_company')]",
				"[concat(variables('factoryId'), '/datasets/testOrders')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_sinkfile_customers')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get a file based on vendors input",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "CustTable",
							"description": "F&O Vendors"
						},
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "Intercompany"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "olsinkcusttable"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "join1"
						},
						{
							"name": "FilterCustomers"
						},
						{
							"name": "IntercompanyCustomer"
						},
						{
							"name": "FinalCustomer"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          accountstatement as long,",
						"          affiliated_ru as long,",
						"          blocked as long,",
						"          companytype_mx as long,",
						"          creditcardaddressverification as long,",
						"          creditcardaddressverificationlevel as long,",
						"          creditcardaddressverificationvoid as long,",
						"          creditcardcvc as long,",
						"          custexcludecollectionfee as long,",
						"          custexcludeinterestcharges as long,",
						"          custfinaluser_br as long,",
						"          custwhtcontributiontype_br as long,",
						"          einvoice as long,",
						"          einvoiceattachment as long,",
						"          entrycertificaterequired_w as long,",
						"          exportsales_pl as long,",
						"          expressbilloflading as long,",
						"          fednonfedindicator as long,",
						"          fiscaldoctype_pl as long,",
						"          forecastdmpinclude as long,",
						"          foreignresident_ru as long,",
						"          generateincomingfiscaldocument_br as long,",
						"          girotype as long,",
						"          girotypeaccountstatement as long,",
						"          girotypecollectionletter as long,",
						"          girotypefreetextinvoice as long,",
						"          girotypeinterestnote as long,",
						"          girotypeprojinvoice as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          intercompanyallowindirectcreation as long,",
						"          intercompanyautocreateorders as long,",
						"          intercompanydirectdelivery as long,",
						"          inventprofiletype_ru as long,",
						"          invoiceaddress as long,",
						"          invoicepostingtype_ru as long,",
						"          irs1099cindicator as long,",
						"          isresident_lv as long,",
						"          issueownentrycertificate_w as long,",
						"          mandatorycreditlimit as long,",
						"          mandatoryvatdate_pl as long,",
						"          onetimecustomer as long,",
						"          packagedepositexcempt_pl as long,",
						"          pdsfreightaccrued as long,",
						"          rfidcasetagging as long,",
						"          rfiditemtagging as long,",
						"          rfidpallettagging as long,",
						"          servicecodeondlvaddress_br as long,",
						"          shipcarrierblindshipment as long,",
						"          shipcarrierfuelsurcharge as long,",
						"          suframa_br as long,",
						"          suframapiscofins_br as long,",
						"          taxwithholdcalculate_in as long,",
						"          taxwithholdcalculate_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          usepurchrequest as long,",
						"          websalesorderdisplay as long,",
						"          einvoiceregister_it as long,",
						"          presencetype_br as long,",
						"          isexternallymaintained as long,",
						"          cfdienabled_mx as long,",
						"          foreigntrade_mx as long,",
						"          workflowstate as long,",
						"          useoriginaldocumentasfacture_ru as long,",
						"          collectionlettercode as long,",
						"          blockfloorlimituseinchannel as long,",
						"          cfdiskipiepstaxes_mx as long,",
						"          simplifytaxintgrexportdocvalidation_cn as long,",
						"          simplenational_br as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          prepaytype as long,",
						"          usualexporter_it as long,",
						"          ispublicsector_it as long,",
						"          simplifytaxintgrexporttaxregvalidation_cn as long,",
						"          printdynamicqrcode_in as long,",
						"          invoicetype_w as long,",
						"          cfditemporaryexport_mx as long,",
						"          credmanexclude as long,",
						"          credmantitleheld as long,",
						"          credmanwithagency as long,",
						"          credmancustunlimitedcredit as long,",
						"          revrecdisableintercompany as long,",
						"          suntafreleasegrpmethod as long,",
						"          suntafreleasethreshmethod as long,",
						"          suntafskipbulkconsumption as long,",
						"          sks_epy_custfilter as long,",
						"          sks_epy_paymenttype as long,",
						"          sks_cc_disablecardsync as long,",
						"          sks_cc_walletlinkstatus as long,",
						"          sks_lb_autosettlement as long,",
						"          hsoedicustcountrycode as long,",
						"          hsoediprovider as long,",
						"          hsoediisdespatchadvicerecordid as long,",
						"          hsoedimarkforaddressrequirement as long,",
						"          hsoomnicsenabled as long,",
						"          hsokeyaccount as long,",
						"          hsousingaotsystem as long,",
						"          oncustomerrefautofill as long,",
						"          oncustomerconsolidatedinvoice as long,",
						"          hsouseshipwindow as long,",
						"          oninvoicedatesummary as long,",
						"          hsoisinternalcustomer as long,",
						"          hsoapplyifdirectdelivery as long,",
						"          onnoshortpickallowed as long,",
						"          onmarketplaceautomaticsettlement as long,",
						"          onhrccreditlimitupdated as long,",
						"          qmscustomercheckitem as long,",
						"          qmsprintcustspecificcertofanalysis as long,",
						"          sysdatastatecode as long,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          taxwithholdgroup_th as string,",
						"          partycountry as string,",
						"          accountnum as string,",
						"          agencylocationcode as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcustpaymidtable as long,",
						"          birthcountycode_it as string,",
						"          birthplace_it as string,",
						"          cashdisc as string,",
						"          cashdiscbasedays as long,",
						"          ccmnum_br as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          commissiongroup as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          custclassificationid as string,",
						"          custgroup as string,",
						"          custitemgroupid as string,",
						"          custtradingpartnercode as long,",
						"          defaultdimension as long,",
						"          defaultdirectdebitmandate as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          dlvmode as string,",
						"          dlvreason as string,",
						"          dlvterm as string,",
						"          einvoiceeannum as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          factoringaccount as string,",
						"          federalcomments as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          freightzone as string,",
						"          identificationnumber as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          issuercountry_hu as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          mcrmergedparent as string,",
						"          mcrmergedroot as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          orderentrydeadlinegroupid as string,",
						"          orgid as string,",
						"          ouraccountnum as string,",
						"          packmaterialfeelicensenum as string,",
						"          party as long,",
						"          partystate as string,",
						"          passportno_hu as string,",
						"          paymdayid as string,",
						"          paymentreference_ee as string,",
						"          paymidtype as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pdscustrebategroupid as string,",
						"          pdsrebatetmagroup as string,",
						"          pricegroup as string,",
						"          residenceforeigncountryregionid_it as string,",
						"          rfc_mx as string,",
						"          salescalendarid as string,",
						"          salesdistrictid as string,",
						"          salesgroup as string,",
						"          salespoolid as string,",
						"          segmentid as string,",
						"          shipcarrieraccount as string,",
						"          shipcarrieraccountcode as string,",
						"          shipcarrierid as string,",
						"          stateinscription_mx as string,",
						"          statisticsgroup as string,",
						"          subsegmentid as string,",
						"          suframanumber_br as string,",
						"          suppitemgroupid as string,",
						"          taxgroup as string,",
						"          taxlicensenum as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vendaccount as string,",
						"          authorityoffice_it as string,",
						"          foreignerid_br as string,",
						"          taxgstreliefgroupheading_my as long,",
						"          foreigntaxregistration_mx as string,",
						"          custwriteoffrefrecid as long,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          taxbordernumber_fi as string,",
						"          birthdate_it as timestamp,",
						"          satpaymmethod_mx as string,",
						"          satpurpose_mx as string,",
						"          vatnumrecid as long,",
						"          prepaymentvalue as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          taxregimecode_mx as string,",
						"          satregistrationname_mx as string,",
						"          credmaneligiblecreditlimitdate as timestamp,",
						"          credmangroupid as string,",
						"          credmannotes as string,",
						"          credmanaccountstatusid as string,",
						"          credmaneligiblecreditmax as decimal(38,6),",
						"          credmanbusinessstarted as timestamp,",
						"          credmancustcreditmaxalt as decimal(38,6),",
						"          credmaneligiblecreditlimitcurrency as string,",
						"          credmancustomersince as timestamp,",
						"          credmanstatusreasonid as string,",
						"          credmancollectiongroupid as string,",
						"          credmancreditlimitexpirydate as timestamp,",
						"          credmancreditlimitdate as timestamp,",
						"          credmanlastreviewdate as timestamp,",
						"          credmannextschedreviewdate as timestamp,",
						"          sunecommcustomerid as string,",
						"          suntafreleasethreshold as decimal(38,6),",
						"          suntafcustomergroup as string,",
						"          suntafforecastchannelid as string,",
						"          suntafreleasegroupthreshold as decimal(38,6),",
						"          sks_lb_tpmdedcat as string,",
						"          sks_br_ebankreccustgroupid as string,",
						"          sks_cc_journalpaymmode as string,",
						"          sks_cc_walletlinkcount as long,",
						"          sks_cc_walletlinkerrormsg as string,",
						"          hsoediinterchangeid as string,",
						"          hsoedilocationid as string,",
						"          hsoedideliverypartygln as string,",
						"          hsoedibuyergln as string,",
						"          hsoedifrominventlocationid as string,",
						"          hsoediaccountnumber as string,",
						"          hsoshippingcarrier as string,",
						"          hsoshippingcarrieraccountnum as string,",
						"          hsolocalname as string,",
						"          onedibuyergln as string,",
						"          hsoroutetimesalesorders as long,",
						"          hsodaysbetweenshipdates as long,",
						"          oninventbarcodesetupid as string,",
						"          hsoprofileid as string,",
						"          hsocustomsnumber as string,",
						"          hsodlvtermreturn as string,",
						"          onmarketplacejournalname as string,",
						"          onhrccreditlimitstagingid as string,",
						"          qmsapprovedcustomergroupid as string,",
						"          qmscertofanalysiscustgroup as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/custtable_partitioned') ~> CustTable",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          tradingpartnertype as long,",
						"          sysdatastatecode as long,",
						"          vendordataareaid as string,",
						"          customerdataareaid as string,",
						"          customerparty as long,",
						"          vendorparty as long,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: 'dataverse-onuat-unqcf615afe7fa74991bdf042631c79c',",
						"     folderPath: 'deltalake/intercompanytradingpartner_partitioned') ~> Intercompany",
						"CustTable select(mapColumn(",
						"          vendorId = accountnum,",
						"          party,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, IntercompanyCustomer join(party == customerparty,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"Intercompany filter(notEquals(toString(customerparty), 'NULL')) ~> FilterCustomers",
						"FilterCustomers select(mapColumn(",
						"          customerparty",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> IntercompanyCustomer",
						"join1 select(mapColumn(",
						"          vendorId,",
						"          party,",
						"          inventlocation,",
						"          dataareaid",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FinalCustomer",
						"FinalCustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('OL-CustTable', concat(toString(currentDate(), 'yyyyMMdd'), '.csv')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> olsinkcusttable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get_sinkfile_vendors')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Get a file based on vendors input",
				"folder": {
					"name": "OL/General"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "D365FOSynapseDelta",
								"type": "LinkedServiceReference"
							},
							"name": "VendTable",
							"description": "F&O Vendors"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "storageaccount",
								"type": "LinkedServiceReference"
							},
							"name": "olsinkvendors"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Container as string",
						"}",
						"source(output(",
						"          Id as string,",
						"          SinkCreatedOn as timestamp,",
						"          SinkModifiedOn as timestamp,",
						"          bidonly as long,",
						"          blocked as long,",
						"          cashaccountingregime_es as long,",
						"          changerequestallowoverride as long,",
						"          changerequestenabled as long,",
						"          changerequestoverride as long,",
						"          cisstatus as long,",
						"          companytype_mx as long,",
						"          disabledowned as long,",
						"          fatcafilingrequirement as long,",
						"          femaleowned as long,",
						"          foreignentityindicator as long,",
						"          foreignresident_ru as long,",
						"          heir_it as long,",
						"          hubzone as long,",
						"          icmscontributor_br as long,",
						"          incltax as long,",
						"          inventprofiletype_ru as long,",
						"          ispaymfeecovered_jp as long,",
						"          isresident_lv as long,",
						"          locallyowned as long,",
						"          mandatoryvatdate_pl as long,",
						"          matchingpolicy as long,",
						"          minorityowned as long,",
						"          nontaxable_br as long,",
						"          offsetaccounttype as long,",
						"          onetimevendor as long,",
						"          operationtype_mx as long,",
						"          presencetype_br as long,",
						"          purchamountpurchaseorder as long,",
						"          secondtin as long,",
						"          servicecodeondlvaddress_br as long,",
						"          smallbusiness as long,",
						"          tax1099namechoice as long,",
						"          tax1099reports as long,",
						"          taxidtype as long,",
						"          taxwithholdcalculate as long,",
						"          taxwithholdvendortype_th as long,",
						"          unitedvatinvoice_lt as long,",
						"          usecashdisc as long,",
						"          vatpartnerkind_ru as long,",
						"          vattaxagent_ru as long,",
						"          vendconsumption_br as long,",
						"          vendortype_mx as long,",
						"          veteranowned as long,",
						"          w9 as long,",
						"          w9included as long,",
						"          vendvendorcollaborationtype as long,",
						"          withholdingtaxpayertype_mx as long,",
						"          originalvendorinreporting_it as long,",
						"          isselfinvoicevendor_it as long,",
						"          workflowstate as long,",
						"          iscprb_br as long,",
						"          cxmlorderenable as long,",
						"          vatnumtabletype as long,",
						"          overridesalestax as long,",
						"          accruesalestaxtype as long,",
						"          taxvendorchargetaxtolerancevalidation as long,",
						"          revenuetypology_it as long,",
						"          ispublicsector_it as long,",
						"          istaxationoverpayroll_br as long,",
						"          einvoiceregister_it as long,",
						"          isunidentifiedbenef_br as long,",
						"          itmimportcostingvendor as long,",
						"          itmservicesprovider as long,",
						"          itmvendtype as long,",
						"          exf_porequired as long,",
						"          exf_classified as long,",
						"          exf_vendorportalinvoicesmustbeapproved as long,",
						"          exf_istmsfreight as long,",
						"          sunplmsyncwithplm as long,",
						"          hsooscaenabled as long,",
						"          hsogitincludevendorinquery as long,",
						"          oninterface as long,",
						"          onsourcingdeliverytype as long,",
						"          onsourcingupdatechain as long,",
						"          onpoplacementenabled as long,",
						"          sysdatastatecode as long,",
						"          taxwithholdgroup as string,",
						"          residenceforeigncountryregionid as string,",
						"          paymtermid as string,",
						"          linedisc as string,",
						"          accountnum as string,",
						"          bankaccount as string,",
						"          bankcentralbankpurposecode as string,",
						"          bankcentralbankpurposetext as string,",
						"          bankcentralbanktranstypecur_ru as string,",
						"          bankorderofpayment_ru as string,",
						"          birthcountycode_it as string,",
						"          birthplace as string,",
						"          blockedreleasedate as timestamp,",
						"          cashdisc as string,",
						"          ccmnum_br as string,",
						"          ciscompanyregnum as string,",
						"          cisnationalinsurancenum as string,",
						"          cisuniquetaxpayerref as string,",
						"          cisverificationdate as timestamp,",
						"          cisverificationnum as string,",
						"          clearingperiod as string,",
						"          cnae_br as string,",
						"          cnpjcpfnum_br as string,",
						"          commercialregister as string,",
						"          commercialregisterinsetnumber as string,",
						"          commercialregistersection as string,",
						"          companychainid as string,",
						"          companyidsiret as string,",
						"          companynafcode as long,",
						"          consday_jp as long,",
						"          contactpersonid as string,",
						"          creditmax as decimal(38,6),",
						"          creditrating as string,",
						"          curp_mx as string,",
						"          currency as string,",
						"          dba as string,",
						"          defaultdimension as long,",
						"          defaultinventstatusid as string,",
						"          destinationcodeid as string,",
						"          diotcountrycode_mx as string,",
						"          dlvmode as string,",
						"          dlvterm as string,",
						"          enddisc as string,",
						"          enterprisenumber as string,",
						"          ethnicoriginid as string,",
						"          factoringaccount as string,",
						"          finecode_br as string,",
						"          fiscalcode as string,",
						"          foreignerid_br as string,",
						"          foreigntaxregistration_mx as string,",
						"          freightzone as string,",
						"          ienum_br as string,",
						"          insscei_br as string,",
						"          intbank_lv as string,",
						"          interestcode_br as string,",
						"          inventlocation as string,",
						"          inventprofileid_ru as string,",
						"          inventsiteid as string,",
						"          invoiceaccount as string,",
						"          itembuyergroupid as string,",
						"          lineofbusinessid as string,",
						"          lvpaymtranscodes as long,",
						"          maincontactworker as long,",
						"          markupgroup as string,",
						"          memo as string,",
						"          multilinedisc as string,",
						"          namecontrol as string,",
						"          nationality_mx as string,",
						"          nit_br as string,",
						"          numbersequencegroup as string,",
						"          offsetledgerdimension as long,",
						"          organizationnumber as string,",
						"          orgid as string,",
						"          party as long,",
						"          paymdayid as string,",
						"          paymid as string,",
						"          paymmode as string,",
						"          paymsched as string,",
						"          paymspec as string,",
						"          pricegroup as string,",
						"          purchcalendarid as string,",
						"          purchpoolid as string,",
						"          rfc_mx as string,",
						"          segmentid as string,",
						"          separatedivisionid_ru as string,",
						"          stateinscription_mx as string,",
						"          structdepartment_ru as string,",
						"          subsegmentid as string,",
						"          suppitemgroupid as string,",
						"          tamrebategroupid as string,",
						"          tax1099fields as long,",
						"          tax1099regnum as string,",
						"          taxgroup as string,",
						"          taxperiodpaymentcode_pl as string,",
						"          vatnum as string,",
						"          vatoperationcode_ru as string,",
						"          vendexceptiongroup as long,",
						"          vendgroup as string,",
						"          vendincomecode_br as string,",
						"          vendinvoicedeclaration_is as long,",
						"          venditemgroupid as string,",
						"          vendorportaladministratorrecid as long,",
						"          vendpaymfeegroup_jp as string,",
						"          vendpricetolerancegroupid as string,",
						"          youraccountnum as string,",
						"          legalrepresentativecurp_mx as string,",
						"          legalrepresentativename_mx as string,",
						"          legalrepresentativerfc_mx as string,",
						"          withholdingtypecode_mx as string,",
						"          birthdate as timestamp,",
						"          regnum_w as string,",
						"          enterprisecode as string,",
						"          vatnumrecid as long,",
						"          purchaseshipcalendarid as string,",
						"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
						"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
						"          freenotesgroup_it as string,",
						"          coderevenuetypology_it as string,",
						"          itmfromport as string,",
						"          itmoverundertolerancegroupid as string,",
						"          itmagent as string,",
						"          itmvendaccount as string,",
						"          itmcosttypegroupid as string,",
						"          exf_systemapprovalgroupid as string,",
						"          exf_invoicetype as string,",
						"          gupdiscountvendorclaimgroupname as string,",
						"          hsolocalname as string,",
						"          onsourcingvendaccount as string,",
						"          onsource as string,",
						"          onexternalid as string,",
						"          vrmglobalvendor as string,",
						"          modifieddatetime as timestamp,",
						"          modifiedby as string,",
						"          modifiedtransactionid as long,",
						"          createddatetime as timestamp,",
						"          createdby as string,",
						"          createdtransactionid as long,",
						"          dataareaid as string,",
						"          recversion as long,",
						"          partition as long,",
						"          sysrowversion as long,",
						"          recid as long,",
						"          tableid as long,",
						"          versionnumber as long,",
						"          createdon as timestamp,",
						"          modifiedon as timestamp,",
						"          IsDelete as boolean,",
						"          createdonpartition as string,",
						"          PartitionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delta',",
						"     fileSystem: ($Container),",
						"     folderPath: 'deltalake/vendtable_partitioned') ~> VendTable",
						"VendTable select(mapColumn(",
						"          vendorId = accountnum",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'whsstockreplenish',",
						"     columnDelimiter: ';',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:[(concat('OL-', concat(toString(currentDate(), 'yyyyMMdd'), '.csv')))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> olsinkvendors"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/D365FOSynapseDelta')]",
				"[concat(variables('factoryId'), '/linkedServices/storageaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InterfaceApplication')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ServicePrincipal",
				"typeProperties": {
					"tenant": "fcc89525-2fcb-4f0f-af11-57eb85e11fe4",
					"servicePrincipalId": "362a81c8-7bbc-4ad5-b505-db6723d62b4e",
					"servicePrincipalKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ONKeys",
							"type": "LinkedServiceReference"
						},
						"secretName": "AppRegistrationClientSecret"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ONKeys')]"
			]
		}
	]
}