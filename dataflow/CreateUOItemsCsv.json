{
	"name": "CreateUOItemsCsv",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "ecoResProduct"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "EcoResProductVariantDimensionValue"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "EcoResSize"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Translation"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InventItemBarcode"
				},
				{
					"dataset": {
						"referenceName": "LegalEntity",
						"type": "DatasetReference"
					},
					"name": "LegalEntity"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "EcoResDistinctProduct"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "EcoResProductVariantSize"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "TempCsvFile",
						"type": "DatasetReference"
					},
					"name": "sinkUOItem"
				}
			],
			"transformations": [
				{
					"name": "selectecoResProductCols"
				},
				{
					"name": "filterEcoResProductVariantDimensionValue"
				},
				{
					"name": "selectEcoResProductVariantDimensionValue"
				},
				{
					"name": "selectEcoResSize"
				},
				{
					"name": "joinSize"
				},
				{
					"name": "joinSizeVariant"
				},
				{
					"name": "selectFinal"
				},
				{
					"name": "selectTranslation"
				},
				{
					"name": "filterTranslation",
					"description": "Add for the filter"
				},
				{
					"name": "joinTranslation"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "selectItemBarcode"
				},
				{
					"name": "joinItemBarcodeEcoResProduct"
				},
				{
					"name": "selectItemBarcodeEcoResProduct"
				},
				{
					"name": "join1"
				},
				{
					"name": "selectActiveLegalEntity"
				},
				{
					"name": "select1"
				},
				{
					"name": "selectEcoResDistinctProduct"
				},
				{
					"name": "joinEcoResProducts"
				},
				{
					"name": "selectProducts"
				},
				{
					"name": "selectEcoResProductVariantSize"
				},
				{
					"name": "joinForSize"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string",
				"}",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          pdscwproduct as long,",
				"          producttype as long,",
				"          servicetype as long,",
				"          sunplmsyncwithplm as long,",
				"          sysdatastatecode as long,",
				"          displayproductnumber as string,",
				"          instancerelationtype as long,",
				"          searchname as string,",
				"          engchgproductownerid as string,",
				"          engchgproductcategorydetails as long,",
				"          engchgproductreleasepolicy as long,",
				"          engchgproductreadinesspolicy as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoresproduct_partitioned',",
				"     manifestType: 'manifest') ~> ecoResProduct",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          distinctproductvariant as long,",
				"          instancerelationtype as long,",
				"          productdimensionattribute as long,",
				"          retailweight as long,",
				"          retaildisplayorder as decimal(38,6),",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoresproductvariantdimensionvalue_partitioned',",
				"     manifestType: 'manifest') ~> EcoResProductVariantDimensionValue",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          name as string,",
				"          displayorder as decimal(38,6),",
				"          url as string,",
				"          hexcode as string,",
				"          refinergroup as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoressize_partitioned',",
				"     manifestType: 'manifest') ~> EcoResSize",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          description as string,",
				"          languageid as string,",
				"          name as string,",
				"          product as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoresproducttranslation_partitioned',",
				"     manifestType: 'manifest') ~> Translation",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          blocked as long,",
				"          retailshowforitem as long,",
				"          useforinput as long,",
				"          useforprinting as long,",
				"          hsoisuniqueidentifier as long,",
				"          sysdatastatecode as long,",
				"          barcodesetupid as string,",
				"          description as string,",
				"          inventdimid as string,",
				"          itembarcode as string,",
				"          itemid as string,",
				"          qty as decimal(38,6),",
				"          retailvariantid as string,",
				"          unitid as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/inventitembarcode_partitioned',",
				"     manifestType: 'manifest') ~> InventItemBarcode",
				"source(output(",
				"          {@odata.etag} as string,",
				"          crd3c_description as string,",
				"          crd3c_legalentitiesid as string,",
				"          crd3c_legalentity as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_legalentities\">\\n    <attribute name=\"crd3c_legalentitiesid\" />\\n    <attribute name=\"crd3c_legalentity\" />\\n    <attribute name=\"crd3c_description\" />\\n    <order attribute=\"crd3c_legalentity\" descending=\"false\" />\\n    <filter type=\"and\">\\n      <condition attribute=\"statecode\" operator=\"eq\" value=\"0\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> LegalEntity",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          hsoitembarcode as string,",
				"          hsolegacyproductnumber as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoresdistinctproduct_partitioned') ~> EcoResDistinctProduct",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          size as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/ecoresproductvariantsize_partitioned') ~> EcoResProductVariantSize",
				"ecoResProduct select(mapColumn(",
				"          RECID = recid,",
				"          crd3c_name = displayproductnumber,",
				"          PARTITION = partition",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectecoResProductCols",
				"EcoResProductVariantDimensionValue filter(instancerelationtype == 8224) ~> filterEcoResProductVariantDimensionValue",
				"joinForSize select(mapColumn(",
				"          DISTINCTPRODUCTVARIANT = distinctproductvariant,",
				"          SIZE_,",
				"          PARTITION = partition",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEcoResProductVariantDimensionValue",
				"EcoResSize select(mapColumn(",
				"          RECID = recid,",
				"          PRODUCTSIZEID = name,",
				"          PARTITION = partition",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEcoResSize",
				"selectItemBarcodeEcoResProduct, joinSizeVariant join(selectItemBarcodeEcoResProduct@RECID == DISTINCTPRODUCTVARIANT",
				"     && selectItemBarcodeEcoResProduct@PARTITION == selectEcoResProductVariantDimensionValue@PARTITION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSize",
				"selectEcoResProductVariantDimensionValue, selectEcoResSize join(SIZE_ == RECID",
				"     && selectEcoResProductVariantDimensionValue@PARTITION == selectEcoResSize@PARTITION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinSizeVariant",
				"joinTranslation select(mapColumn(",
				"          crd3c_name,",
				"          crd3c_variantname,",
				"          crd3c_barcode,",
				"          crd3c_dataarea,",
				"          crd3c_size = PRODUCTSIZEID,",
				"          crd3c_productnumber = ITEMID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinal",
				"filterTranslation select(mapColumn(",
				"          crd3c_variantname = name,",
				"          PRODUCT = product,",
				"          PARTITION = partition",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTranslation",
				"Translation filter(languageid == \"en-US\") ~> filterTranslation",
				"joinSize, selectTranslation join(selectItemBarcodeEcoResProduct@RECID == PRODUCT",
				"     && selectItemBarcodeEcoResProduct@PARTITION == selectTranslation@PARTITION,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTranslation",
				"select1 derive(crd3c_simpleid = concat(crd3c_productnumber,iif(equals( coalesce(crd3c_size,\"\"),\"\"),\"\",concat(\"_\",crd3c_size)))) ~> derivedColumn1",
				"InventItemBarcode select(mapColumn(",
				"          ITEMBARCODE = itembarcode,",
				"          ITEMID = itemid,",
				"          crd3c_dataarea = dataareaid,",
				"          PARTITION = partition",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectItemBarcode",
				"selectItemBarcode, selectProducts join(ITEMBARCODE == HSOITEMBARCODE,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinItemBarcodeEcoResProduct",
				"joinItemBarcodeEcoResProduct select(mapColumn(",
				"          RECID,",
				"          crd3c_name,",
				"          crd3c_barcode = ITEMBARCODE,",
				"          PARTITION = selectItemBarcode@PARTITION,",
				"          crd3c_dataarea,",
				"          ITEMID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectItemBarcodeEcoResProduct",
				"selectFinal, selectActiveLegalEntity join(upper(crd3c_dataarea) == upper(crd3c_legalentity),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"LegalEntity select(mapColumn(",
				"          crd3c_legalentity",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectActiveLegalEntity",
				"join1 select(mapColumn(",
				"          crd3c_name,",
				"          crd3c_variantname,",
				"          crd3c_barcode,",
				"          crd3c_dataarea,",
				"          crd3c_size,",
				"          crd3c_productnumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"EcoResDistinctProduct select(mapColumn(",
				"          RECID = recid,",
				"          HSOITEMBARCODE = hsoitembarcode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEcoResDistinctProduct",
				"selectecoResProductCols, selectEcoResDistinctProduct join(selectecoResProductCols@RECID == selectEcoResDistinctProduct@RECID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinEcoResProducts",
				"joinEcoResProducts select(mapColumn(",
				"          RECID = selectecoResProductCols@RECID,",
				"          crd3c_name,",
				"          PARTITION,",
				"          HSOITEMBARCODE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectProducts",
				"EcoResProductVariantSize select(mapColumn(",
				"          recid,",
				"          SIZE_ = size",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectEcoResProductVariantSize",
				"filterEcoResProductVariantDimensionValue, selectEcoResProductVariantSize join(EcoResProductVariantDimensionValue@recid == selectEcoResProductVariantSize@recid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinForSize",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          cr5b1_dataarea as string,",
				"          cr5b1_item as string,",
				"          cr5b1_size as string,",
				"          cr5b1_site as string,",
				"          crd3c_storeavailqty as string,",
				"          cr5b1_itemvariant as string,",
				"          crd3c_storeminqty as string,",
				"          cr5b1_itemdescription as string,",
				"          cr5b1_towhs as string,",
				"          cr5b1_fromwhs as string,",
				"          crd3c_fromwhsstockqty as string,",
				"          crd3c_inboundorderqty as string,",
				"          crd3c_batchid as string,",
				"          crd3c_name as string,",
				"          crd3c_toqty as string,",
				"          cr5b1_createddate as string,",
				"          crd3c_transferorderid as string,",
				"          hso_barcode as string,",
				"          hso_batchnumber as string,",
				"          hso_itemgroupid as string",
				"     ),",
				"     partitionFileNames:['UOItem.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkUOItem"
			]
		}
	}
}