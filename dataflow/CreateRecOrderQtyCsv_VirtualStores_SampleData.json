{
	"name": "CreateRecOrderQtyCsv_VirtualStores_SampleData",
	"properties": {
		"folder": {
			"name": "OL/MSL Sync"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UOWarehouses",
						"type": "DatasetReference"
					},
					"name": "UOWarehousesSample"
				},
				{
					"dataset": {
						"referenceName": "UOItem",
						"type": "DatasetReference"
					},
					"name": "UOItemSample"
				},
				{
					"dataset": {
						"referenceName": "InventdimONUKONUS",
						"type": "DatasetReference"
					},
					"name": "InventDimSample"
				},
				{
					"dataset": {
						"referenceName": "BarcodeONUKONUS",
						"type": "DatasetReference"
					},
					"name": "BarcodeSample"
				},
				{
					"dataset": {
						"referenceName": "ForecastSalesONUKONUS",
						"type": "DatasetReference"
					},
					"name": "ForecastSalesSample"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RecomOrderQtyCsvFile_virtualStore",
						"type": "DatasetReference"
					},
					"name": "MSLcreateCSV"
				}
			],
			"transformations": [
				{
					"name": "filterModelCustGroupChannel"
				},
				{
					"name": "SelectItemIdForecastQtyInventDimId"
				},
				{
					"name": "SelectInventDimIdAndBarcodeNum"
				},
				{
					"name": "GetBarcode"
				},
				{
					"name": "AddMSL"
				},
				{
					"name": "SelectInventSizeIdAndInventDimId"
				},
				{
					"name": "GetInventSizeId"
				},
				{
					"name": "FinalSelectBarcodeInventSizeId"
				},
				{
					"name": "FSGetInventSizeId"
				},
				{
					"name": "MSL"
				},
				{
					"name": "GetDualPurposeStores"
				},
				{
					"name": "SelectDualPurposeStores"
				},
				{
					"name": "DualPurposeStoresOnly"
				},
				{
					"name": "SelectStoreAndSize"
				},
				{
					"name": "CalculateMSL"
				},
				{
					"name": "joinMSL"
				},
				{
					"name": "SelectPreBarcode"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string",
				"}",
				"source(output(",
				"          crd3c_automatictocreation as boolean,",
				"          crd3c_automatictocreationname as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_datastatus as integer,",
				"          crd3c_datastatusname as string,",
				"          crd3c_deliveryterms as string,",
				"          crd3c_modeofdelivery as string,",
				"          crd3c_name as string,",
				"          crd3c_refreshday as string,",
				"          crd3c_refreshdayname as string,",
				"          crd3c_refreshfrequency as integer,",
				"          crd3c_refreshtime as timestamp,",
				"          crd3c_site as string,",
				"          crd3c_sourcewhname as string,",
				"          crd3c_uowarehousesid as string,",
				"          crd3c_warehousename as string,",
				"          crd3c_warehousetype as string,",
				"          createdbyname as string,",
				"          createdbyyominame as string,",
				"          createdon as timestamp,",
				"          createdonbehalfbyname as string,",
				"          createdonbehalfbyyominame as string,",
				"          hso_automaticpocreation as boolean,",
				"          hso_automaticpocreationname as string,",
				"          hso_companyicwarehouse as string,",
				"          hso_companylocalwarehouse as string,",
				"          hso_dualpurpose as boolean,",
				"          hso_dualpurposename as string,",
				"          hso_icwarehousename as string,",
				"          hso_maxtoqty as integer,",
				"          hso_ordertypesplit as integer,",
				"          hso_ordertypesplitname as string,",
				"          hso_sourceicwarehouse as string,",
				"          hso_storeleadername as string,",
				"          hso_storeleaderyominame as string,",
				"          hso_vendorname as string,",
				"          importsequencenumber as integer,",
				"          modifiedbyname as string,",
				"          modifiedbyyominame as string,",
				"          modifiedon as timestamp,",
				"          modifiedonbehalfbyname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          overriddencreatedon as timestamp,",
				"          owneridname as string,",
				"          owneridtype as string,",
				"          owneridyominame as string,",
				"          owningbusinessunitname as string,",
				"          statecode as integer,",
				"          statecodename as string,",
				"          statuscode as integer,",
				"          statuscodename as string,",
				"          timezoneruleversionnumber as integer,",
				"          utcconversiontimezonecode as integer,",
				"          versionnumber as long,",
				"          createdonbehalfby as string,",
				"          hso_vendor as string,",
				"          hso_icwarehouse as string,",
				"          owninguser as string,",
				"          modifiedby as string,",
				"          hso_storeleader as string,",
				"          modifiedonbehalfby as string,",
				"          ownerid as string,",
				"          {@odata.etag} as string,",
				"          crd3c_sourcewh as string,",
				"          createdby as string,",
				"          owningbusinessunit as string,",
				"          owningteam as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><order attribute=\"hso_ordertypesplit\" descending=\"true\"/><order attribute=\"crd3c_warehousename\" descending=\"false\"/><attribute name=\"crd3c_warehousetype\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehousesSample",
				"source(output(",
				"          crd3c_barcode as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_datastatus as integer,",
				"          crd3c_datastatusname as string,",
				"          crd3c_gender as string,",
				"          crd3c_name as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_simpleid as string,",
				"          crd3c_size as string,",
				"          crd3c_uoitemid as string,",
				"          crd3c_variantname as string,",
				"          createdbyname as string,",
				"          createdbyyominame as string,",
				"          createdon as timestamp,",
				"          createdonbehalfbyname as string,",
				"          createdonbehalfbyyominame as string,",
				"          importsequencenumber as integer,",
				"          modifiedbyname as string,",
				"          modifiedbyyominame as string,",
				"          modifiedon as timestamp,",
				"          modifiedonbehalfbyname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          overriddencreatedon as timestamp,",
				"          owneridname as string,",
				"          owneridtype as string,",
				"          owneridyominame as string,",
				"          owningbusinessunitname as string,",
				"          statecode as integer,",
				"          statecodename as string,",
				"          statuscode as integer,",
				"          statuscodename as string,",
				"          timezoneruleversionnumber as integer,",
				"          utcconversiontimezonecode as integer,",
				"          versionnumber as long,",
				"          createdonbehalfby as string,",
				"          owninguser as string,",
				"          modifiedby as string,",
				"          modifiedonbehalfby as string,",
				"          ownerid as string,",
				"          {@odata.etag} as string,",
				"          createdby as string,",
				"          owningbusinessunit as string,",
				"          owningteam as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: ('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><order attribute=\"crd3c_name\" descending=\"false\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><filter type=\"or\"><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3ME10140264\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WF10061508\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"2UF10080069\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WF10053037\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"2UE30660553\"/><condition attribute=\"crd3c_productnumber\" operator=\"eq\" value=\"3WD30120958\"/></filter></filter></entity></fetch>'),",
				"     wildcardPaths:['UOItem.csv']) ~> UOItemSample",
				"source(output(",
				"          inventdimid as string,",
				"          inventlocationid as string,",
				"          inventsizeid as string,",
				"          dataareaid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> InventDimSample",
				"source(output(",
				"          inventdimid as string,",
				"          itembarcode as string,",
				"          itemid as string,",
				"          dataareaid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> BarcodeSample",
				"source(output(",
				"          dataareaid as string,",
				"          itemid as string,",
				"          salesqty as double,",
				"          inventdimid as string,",
				"          startdate as timestamp,",
				"          suntafforecastchannelid as string,",
				"          modelid as string,",
				"          custgroupid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ForecastSalesSample",
				"ForecastSalesSample filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toDate(toString(startdate)) == addDays(currentDate(), 1)) ~> filterModelCustGroupChannel",
				"filterModelCustGroupChannel select(mapColumn(",
				"          itemid,",
				"          inventdimid,",
				"          salesqty,",
				"          dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
				"BarcodeSample select(mapColumn(",
				"          inventdimid,",
				"          itemid,",
				"          dataareaid,",
				"          itembarcode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInventDimIdAndBarcodeNum",
				"SelectPreBarcode, FinalSelectBarcodeInventSizeId lookup(SelectPreBarcode@itemid == FinalSelectBarcodeInventSizeId@itemid",
				"     && SelectPreBarcode@dataareaid == FinalSelectBarcodeInventSizeId@dataareaid",
				"     && SelectPreBarcode@inventsizeid == FinalSelectBarcodeInventSizeId@inventsizeid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetBarcode",
				"joinMSL select(mapColumn(",
				"          crd3c_barcode,",
				"          crd3c_site = inventlocationid,",
				"          crd3c_dataarea = UOItemSample@crd3c_dataarea,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_itemvariant = crd3c_simpleid,",
				"          crd3c_variantname,",
				"          crd3c_itemvariantlookup = crd3c_uoitemid,",
				"          hso_size = crd3c_size,",
				"          crd3c_warehouselookup = crd3c_uowarehousesid,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddMSL",
				"InventDimSample select(mapColumn(",
				"          inventdimid,",
				"          inventsizeid,",
				"          dataareaid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
				"SelectInventDimIdAndBarcodeNum, SelectInventSizeIdAndInventDimId join(SelectInventDimIdAndBarcodeNum@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
				"     && SelectInventDimIdAndBarcodeNum@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> GetInventSizeId",
				"GetInventSizeId select(mapColumn(",
				"          inventdimid = SelectInventDimIdAndBarcodeNum@inventdimid,",
				"          dataareaid = SelectInventDimIdAndBarcodeNum@dataareaid,",
				"          itembarcode,",
				"          inventsizeid,",
				"          itemid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelectBarcodeInventSizeId",
				"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
				"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FSGetInventSizeId",
				"GetBarcode select(mapColumn(",
				"          itembarcode,",
				"          crd3c_dataarea = SelectPreBarcode@dataareaid,",
				"          salesqty,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MSL",
				"UOWarehousesSample filter(upper(crd3c_warehousetype) == \"STOCK\" && statecode == 0) ~> GetDualPurposeStores",
				"GetDualPurposeStores select(mapColumn(",
				"          crd3c_dataarea,",
				"          crd3c_name,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
				"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
				"     && dataareaid == crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DualPurposeStoresOnly",
				"FSGetInventSizeId select(mapColumn(",
				"          itemid,",
				"          salesqty,",
				"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
				"          inventsizeid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
				"DualPurposeStoresOnly aggregate(groupBy(itemid,",
				"          dataareaid,",
				"          inventsizeid,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid),",
				"     salesqty = sum(salesqty)) ~> CalculateMSL",
				"UOItemSample, MSL join(crd3c_barcode == itembarcode",
				"     && UOItemSample@crd3c_dataarea == MSL@crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMSL",
				"CalculateMSL select(mapColumn(",
				"          itemid,",
				"          dataareaid,",
				"          inventsizeid,",
				"          inventlocationid,",
				"          salesqty,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPreBarcode",
				"AddMSL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          crd3c_name as string,",
				"          crd3c_variantname as string,",
				"          crd3c_barcode as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_size as string",
				"     ),",
				"     partitionFileNames:['RecOrderQtyVS.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MSLcreateCSV"
			]
		}
	}
}