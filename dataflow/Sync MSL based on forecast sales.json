{
	"name": "Sync MSL based on forecast sales",
	"properties": {
		"description": "Lookup activity, array of companies, Dataverse query taking in the array.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UOItem",
						"type": "DatasetReference"
					},
					"name": "UOItem"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InventDim"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "ForecastSales"
				},
				{
					"dataset": {
						"referenceName": "UOWarehouses",
						"type": "DatasetReference"
					},
					"name": "UOWarehouses"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RecomOrderQtyCsvFile_virtualStore",
						"type": "DatasetReference"
					},
					"name": "MSLcreateCSV"
				}
			],
			"transformations": [
				{
					"name": "filterModelCustGroupChannel"
				},
				{
					"name": "SelectItemIdForecastQtyInventDimId"
				},
				{
					"name": "AddMSL"
				},
				{
					"name": "SelectInventSizeIdAndInventDimId"
				},
				{
					"name": "FSGetInventSizeId"
				},
				{
					"name": "MSL"
				},
				{
					"name": "SelectDualPurposeStores"
				},
				{
					"name": "DualPurposeStoresOnly"
				},
				{
					"name": "SelectStoreAndSize"
				},
				{
					"name": "CalculateMSL"
				},
				{
					"name": "joinMSL"
				},
				{
					"name": "filterCompany"
				},
				{
					"name": "JoinDualPurposeStores"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string,",
				"     CompanyList as string[],",
				"     companyFetchXML as string,",
				"     storeList as string[],",
				"     storeFetchXML as string",
				"}",
				"source(output(",
				"          {@odata.etag} as string,",
				"          crd3c_barcode as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_name as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_simpleid as string,",
				"          crd3c_size as string,",
				"          crd3c_uoitemid as string,",
				"          crd3c_variantname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: (concat('<fetch version=\"1.0\" mapping=\"logical\" no-lock=\"false\" distinct=\"true\"><entity name=\"crd3c_uoitem\"><attribute name=\"crd3c_uoitemid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_simpleid\"/><attribute name=\"crd3c_variantname\"/><attribute name=\"crd3c_dataarea\"/><attribute name=\"crd3c_barcode\"/><attribute name=\"crd3c_size\"/><attribute name=\"crd3c_productnumber\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"crd3c_dataarea\" operator=\"in\">',$companyFetchXML,' </condition></filter></entity></fetch>')),",
				"     wildcardPaths:['UOItem.csv']) ~> UOItem",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          hashtype as long,",
				"          sysdatastatecode as long,",
				"          configid as string,",
				"          inventbatchid as string,",
				"          inventcolorid as string,",
				"          inventdimid as string,",
				"          inventgtdid_ru as string,",
				"          inventlocationid as string,",
				"          inventownerid_ru as string,",
				"          inventprofileid_ru as string,",
				"          inventserialid as string,",
				"          inventsiteid as string,",
				"          inventsizeid as string,",
				"          inventstatusid as string,",
				"          inventstyleid as string,",
				"          inventversionid as string,",
				"          licenseplateid as string,",
				"          wmslocationid as string,",
				"          wmspalletid as string,",
				"          sha1hashhex as string,",
				"          inventdimension1 as string,",
				"          inventdimension2 as string,",
				"          inventdimension3 as string,",
				"          inventdimension4 as string,",
				"          inventdimension5 as string,",
				"          inventdimension6 as string,",
				"          inventdimension7 as string,",
				"          inventdimension8 as string,",
				"          inventdimension9 as timestamp,",
				"          inventdimension10 as decimal(38,6),",
				"          inventdimension11 as string,",
				"          inventdimension12 as string,",
				"          sha3hashhex as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
				"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          active as long,",
				"          allocatemethod as long,",
				"          cov as long,",
				"          freqcode as long,",
				"          projforecastbudgettype as long,",
				"          report as long,",
				"          hsoisreturnorder as long,",
				"          sysdatastatecode as long,",
				"          activitynumber as string,",
				"          amount as decimal(38,6),",
				"          comment as string,",
				"          costprice as decimal(38,6),",
				"          covstatus as long,",
				"          currency as string,",
				"          custaccountid as string,",
				"          custgroupid as string,",
				"          defaultdimension as long,",
				"          discamount as decimal(38,6),",
				"          discpercent as decimal(38,6),",
				"          enddate as timestamp,",
				"          expandid as long,",
				"          freq as long,",
				"          inventdimid as string,",
				"          inventqty as decimal(38,6),",
				"          itemallocateid as string,",
				"          itembomid as string,",
				"          itemgroupid as string,",
				"          itemid as string,",
				"          itemrouteid as string,",
				"          keyid as string,",
				"          modelid as string,",
				"          pdscwqty as decimal(38,6),",
				"          pdscwunitid as string,",
				"          priceunit as decimal(38,12),",
				"          projcategoryid as string,",
				"          projforecastcostpaymdate as timestamp,",
				"          projforecasteliminationdate as timestamp,",
				"          projforecastinvoicedate as timestamp,",
				"          projforecastsalespaymdate as timestamp,",
				"          projfundingsource as long,",
				"          projid as string,",
				"          projlinepropertyid as string,",
				"          projtransid as string,",
				"          psarefpurchline as long,",
				"          salesmarkup as decimal(38,6),",
				"          salesprice as decimal(38,6),",
				"          salesqty as decimal(38,6),",
				"          salesunitid as string,",
				"          startdate as timestamp,",
				"          taxgroupid as string,",
				"          taxitemgroupid as string,",
				"          forecastentrynumber as string,",
				"          description as string,",
				"          planningpriority as decimal(38,2),",
				"          itemdescription as string,",
				"          contractlineid as string,",
				"          kittinginventtransid as string,",
				"          kittinglinenum as decimal(38,16),",
				"          suntaforigforecastdate as timestamp,",
				"          suntaforigforecastqty as decimal(38,6),",
				"          suntafforecastchannelid as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
				"source(output(",
				"          {@odata.etag} as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_name as string,",
				"          crd3c_uowarehousesid as string,",
				"          statecode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: ('<fetch version=\"1.0\" mapping=\"logical\" distinct=\"true\" savedqueryid=\"41c7362d-ac5a-ed11-9562-000d3aba35c5\" no-lock=\"false\"><entity name=\"crd3c_uowarehouses\"><attribute name=\"statecode\"/><attribute name=\"crd3c_uowarehousesid\"/><attribute name=\"crd3c_name\"/><attribute name=\"crd3c_dataarea\"/><filter type=\"and\"><condition attribute=\"statecode\" operator=\"eq\" value=\"0\"/><condition attribute=\"hso_dualpurpose\" operator=\"eq\" value=\"1\"/><condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"STOCK\"/><condition attribute=\"hso_ordertypesplit\" operator=\"eq\" value=\"1\"/></filter></entity></fetch>')) ~> UOWarehouses",
				"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && \r",
				"equals(modelid, \"D2CE model\") && \r",
				"equals(custgroupid, \"zD2CE\") && \r",
				"(salesqty != 0) && \r",
				"toString(toDate(toString(startdate))) == toString(addDays(currentDate(), 1)) && \r",
				"in($CompanyList, dataareaid)) ~> filterModelCustGroupChannel",
				"filterModelCustGroupChannel select(mapColumn(",
				"          itemid,",
				"          inventdimid,",
				"          salesqty,",
				"          dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
				"joinMSL select(mapColumn(",
				"          crd3c_barcode,",
				"          crd3c_site = inventlocationid,",
				"          crd3c_dataarea = UOItem@crd3c_dataarea,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_itemvariant = crd3c_simpleid,",
				"          crd3c_variantname,",
				"          crd3c_itemvariantlookup = crd3c_uoitemid,",
				"          hso_size = crd3c_size,",
				"          crd3c_warehouselookup = crd3c_uowarehousesid,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddMSL",
				"JoinDualPurposeStores select(mapColumn(",
				"          inventdimid,",
				"          inventsizeid,",
				"          dataareaid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
				"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
				"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FSGetInventSizeId",
				"CalculateMSL select(mapColumn(",
				"          crd3c_dataarea = dataareaid,",
				"          itemid,",
				"          salesqty,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid,",
				"          inventsizeid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MSL",
				"UOWarehouses select(mapColumn(",
				"          crd3c_dataarea,",
				"          crd3c_name,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
				"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
				"     && dataareaid == crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DualPurposeStoresOnly",
				"FSGetInventSizeId select(mapColumn(",
				"          itemid,",
				"          salesqty,",
				"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
				"          inventsizeid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
				"DualPurposeStoresOnly aggregate(groupBy(itemid,",
				"          dataareaid,",
				"          inventsizeid,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid),",
				"     salesqty = sum(salesqty)) ~> CalculateMSL",
				"UOItem, MSL join(crd3c_productnumber == itemid",
				"     && coalesce(crd3c_size, '') == coalesce(inventsizeid, '')",
				"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMSL",
				"InventDim filter(in($CompanyList, dataareaid) &&\r",
				"in($storeList, inventlocationid)) ~> filterCompany",
				"filterCompany, SelectDualPurposeStores join(inventlocationid == crd3c_name,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDualPurposeStores",
				"AddMSL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          crd3c_name as string,",
				"          crd3c_variantname as string,",
				"          crd3c_barcode as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_size as string",
				"     ),",
				"     partitionFileNames:['RecOrderQtyVS.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MSLcreateCSV"
			]
		}
	}
}