{
	"name": "SyncVendors_CustWH_SourcingWH_Test",
	"properties": {
		"description": "ONKR vendors should get customer sourcing WH in Dataverse using this logic: vendor (LE-1)->Intercompany customer (LE-2)->sourcing vendor (LE-2)->intercompany customer(LE-3)->InventLocation for this customer.",
		"folder": {
			"name": "OL/General"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InterCompanyTradingPartner"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Party"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InterCompanyTradingRelationVendor"
				},
				{
					"dataset": {
						"referenceName": "OL_13082025_0914",
						"type": "DatasetReference"
					},
					"name": "myTempFile"
				},
				{
					"dataset": {
						"referenceName": "OL_Tmp_CustTable",
						"type": "DatasetReference"
					},
					"name": "CustTableTmp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Vendors",
						"type": "DatasetReference"
					},
					"name": "Vendors"
				}
			],
			"transformations": [
				{
					"name": "SelectKeyVendorColumns"
				},
				{
					"name": "FilterONKRVendors",
					"description": "Filter vendors based on ONKR legal entity"
				},
				{
					"name": "SelectCustomer"
				},
				{
					"name": "SelectIntercompanyRelation"
				},
				{
					"name": "selectInterCompanyTradingPartner"
				},
				{
					"name": "selectParty"
				},
				{
					"name": "L1VendPartner"
				},
				{
					"name": "L2SelectCustPartner"
				},
				{
					"name": "L2GetCustomer"
				},
				{
					"name": "L1SelectVendPartnerRecId"
				},
				{
					"name": "L1VendRelation"
				},
				{
					"name": "L1SelectCustRelation"
				},
				{
					"name": "L2SelectCustAccount"
				},
				{
					"name": "IntercompanyPartner"
				},
				{
					"name": "L3GetVendorBasedOnSourcing"
				},
				{
					"name": "FilterVendorsWithONSourcing",
					"description": "Filter vendors that have ONSourcingVendAccount not NULL"
				},
				{
					"name": "L3SelectVendorPartyAndDataArea"
				},
				{
					"name": "L3GetVendorPartner"
				},
				{
					"name": "L3SelectPartnerRecId"
				},
				{
					"name": "L3RelationCustomerVendor"
				},
				{
					"name": "L4ICCustomer"
				},
				{
					"name": "join1"
				},
				{
					"name": "L4SelectCustPartyAndDataAreaId"
				},
				{
					"name": "L4GetCustomer"
				},
				{
					"name": "FinalSelectCustomer"
				},
				{
					"name": "L1CustPartner"
				},
				{
					"name": "ICCustomer"
				},
				{
					"name": "SelectONSourcingVendors"
				},
				{
					"name": "LowercaseDataArea"
				},
				{
					"name": "join2"
				},
				{
					"name": "Upsert"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string",
				"}",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          tradingpartnertype as long,",
				"          sysdatastatecode as long,",
				"          vendordataareaid as string,",
				"          customerdataareaid as string,",
				"          customerparty as long,",
				"          vendorparty as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
				"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          instancerelationtype as long,",
				"          knownas as string,",
				"          languageid as string,",
				"          name as string,",
				"          namealias as string,",
				"          partynumber as string,",
				"          primaryaddresslocation as long,",
				"          primarycontactemail as long,",
				"          primarycontactfax as long,",
				"          primarycontactphone as long,",
				"          primarycontacttelex as long,",
				"          primarycontacturl as long,",
				"          primarycontactfacebook as long,",
				"          primarycontacttwitter as long,",
				"          primarycontactlinkedin as long,",
				"          addressbooknames as string,",
				"          legacyinstancerelationtype as long,",
				"          hsoexternalcontactreference as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/dirpartytable_partitioned',",
				"     manifestType: 'manifest') ~> Party",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          active as long,",
				"          excludeihbnetting as long,",
				"          sysdatastatecode as long,",
				"          intercompanytradingcustomer as long,",
				"          intercompanytradingvendor as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
				"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as string,",
				"          SinkModifiedOn as string,",
				"          bidonly as string,",
				"          blocked as string,",
				"          cashaccountingregime_es as string,",
				"          changerequestallowoverride as string,",
				"          changerequestenabled as string,",
				"          changerequestoverride as string,",
				"          cisstatus as string,",
				"          companytype_mx as string,",
				"          disabledowned as string,",
				"          fatcafilingrequirement as string,",
				"          femaleowned as string,",
				"          foreignentityindicator as string,",
				"          foreignresident_ru as string,",
				"          heir_it as string,",
				"          hubzone as string,",
				"          icmscontributor_br as string,",
				"          incltax as string,",
				"          inventprofiletype_ru as string,",
				"          ispaymfeecovered_jp as string,",
				"          isresident_lv as string,",
				"          locallyowned as string,",
				"          mandatoryvatdate_pl as string,",
				"          matchingpolicy as string,",
				"          minorityowned as string,",
				"          nontaxable_br as string,",
				"          offsetaccounttype as string,",
				"          onetimevendor as string,",
				"          operationtype_mx as string,",
				"          presencetype_br as string,",
				"          purchamountpurchaseorder as string,",
				"          secondtin as string,",
				"          servicecodeondlvaddress_br as string,",
				"          smallbusiness as string,",
				"          tax1099namechoice as string,",
				"          tax1099reports as string,",
				"          taxidtype as string,",
				"          taxwithholdcalculate as string,",
				"          taxwithholdvendortype_th as string,",
				"          unitedvatinvoice_lt as string,",
				"          usecashdisc as string,",
				"          vatpartnerkind_ru as string,",
				"          vattaxagent_ru as string,",
				"          vendconsumption_br as string,",
				"          vendortype_mx as string,",
				"          veteranowned as string,",
				"          w9 as string,",
				"          w9included as string,",
				"          vendvendorcollaborationtype as string,",
				"          withholdingtaxpayertype_mx as string,",
				"          originalvendorinreporting_it as string,",
				"          isselfinvoicevendor_it as string,",
				"          workflowstate as string,",
				"          iscprb_br as string,",
				"          cxmlorderenable as string,",
				"          vatnumtabletype as string,",
				"          overridesalestax as string,",
				"          accruesalestaxtype as string,",
				"          taxvendorchargetaxtolerancevalidation as string,",
				"          revenuetypology_it as string,",
				"          ispublicsector_it as string,",
				"          istaxationoverpayroll_br as string,",
				"          einvoiceregister_it as string,",
				"          isunidentifiedbenef_br as string,",
				"          itmimportcostingvendor as string,",
				"          itmservicesprovider as string,",
				"          itmvendtype as string,",
				"          exf_porequired as string,",
				"          exf_classified as string,",
				"          exf_vendorportalinvoicesmustbeapproved as string,",
				"          exf_istmsfreight as string,",
				"          sunplmsyncwithplm as string,",
				"          hsooscaenabled as string,",
				"          hsogitincludevendorinquery as string,",
				"          oninterface as string,",
				"          onsourcingdeliverytype as string,",
				"          onsourcingupdatechain as string,",
				"          onpoplacementenabled as string,",
				"          sysdatastatecode as string,",
				"          taxwithholdgroup as string,",
				"          residenceforeigncountryregionid as string,",
				"          paymtermid as string,",
				"          linedisc as string,",
				"          accountnum as string,",
				"          bankaccount as string,",
				"          bankcentralbankpurposecode as string,",
				"          bankcentralbankpurposetext as string,",
				"          bankcentralbanktranstypecur_ru as string,",
				"          bankorderofpayment_ru as string,",
				"          birthcountycode_it as string,",
				"          birthplace as string,",
				"          blockedreleasedate as string,",
				"          cashdisc as string,",
				"          ccmnum_br as string,",
				"          ciscompanyregnum as string,",
				"          cisnationalinsurancenum as string,",
				"          cisuniquetaxpayerref as string,",
				"          cisverificationdate as string,",
				"          cisverificationnum as string,",
				"          clearingperiod as string,",
				"          cnae_br as string,",
				"          cnpjcpfnum_br as string,",
				"          commercialregister as string,",
				"          commercialregisterinsetnumber as string,",
				"          commercialregistersection as string,",
				"          companychainid as string,",
				"          companyidsiret as string,",
				"          companynafcode as string,",
				"          consday_jp as string,",
				"          contactpersonid as string,",
				"          creditmax as string,",
				"          creditrating as string,",
				"          curp_mx as string,",
				"          currency as string,",
				"          dba as string,",
				"          defaultdimension as string,",
				"          defaultinventstatusid as string,",
				"          destinationcodeid as string,",
				"          diotcountrycode_mx as string,",
				"          dlvmode as string,",
				"          dlvterm as string,",
				"          enddisc as string,",
				"          enterprisenumber as string,",
				"          ethnicoriginid as string,",
				"          factoringaccount as string,",
				"          finecode_br as string,",
				"          fiscalcode as string,",
				"          foreignerid_br as string,",
				"          foreigntaxregistration_mx as string,",
				"          freightzone as string,",
				"          ienum_br as string,",
				"          insscei_br as string,",
				"          intbank_lv as string,",
				"          interestcode_br as string,",
				"          inventlocation as string,",
				"          inventprofileid_ru as string,",
				"          inventsiteid as string,",
				"          invoiceaccount as string,",
				"          itembuyergroupid as string,",
				"          lineofbusinessid as string,",
				"          lvpaymtranscodes as string,",
				"          maincontactworker as string,",
				"          markupgroup as string,",
				"          memo as string,",
				"          multilinedisc as string,",
				"          namecontrol as string,",
				"          nationality_mx as string,",
				"          nit_br as string,",
				"          numbersequencegroup as string,",
				"          offsetledgerdimension as string,",
				"          organizationnumber as string,",
				"          orgid as string,",
				"          party as string,",
				"          paymdayid as string,",
				"          paymid as string,",
				"          paymmode as string,",
				"          paymsched as string,",
				"          paymspec as string,",
				"          pricegroup as string,",
				"          purchcalendarid as string,",
				"          purchpoolid as string,",
				"          rfc_mx as string,",
				"          segmentid as string,",
				"          separatedivisionid_ru as string,",
				"          stateinscription_mx as string,",
				"          structdepartment_ru as string,",
				"          subsegmentid as string,",
				"          suppitemgroupid as string,",
				"          tamrebategroupid as string,",
				"          tax1099fields as string,",
				"          tax1099regnum as string,",
				"          taxgroup as string,",
				"          taxperiodpaymentcode_pl as string,",
				"          vatnum as string,",
				"          vatoperationcode_ru as string,",
				"          vendexceptiongroup as string,",
				"          vendgroup as string,",
				"          vendincomecode_br as string,",
				"          vendinvoicedeclaration_is as string,",
				"          venditemgroupid as string,",
				"          vendorportaladministratorrecid as string,",
				"          vendpaymfeegroup_jp as string,",
				"          vendpricetolerancegroupid as string,",
				"          youraccountnum as string,",
				"          legalrepresentativecurp_mx as string,",
				"          legalrepresentativename_mx as string,",
				"          legalrepresentativerfc_mx as string,",
				"          withholdingtypecode_mx as string,",
				"          birthdate as string,",
				"          regnum_w as string,",
				"          enterprisecode as string,",
				"          vatnumrecid as string,",
				"          purchaseshipcalendarid as string,",
				"          taxvendorchargetaxtoleranceamount as string,",
				"          taxvendorchargetaxtolerancepercent as string,",
				"          freenotesgroup_it as string,",
				"          coderevenuetypology_it as string,",
				"          itmfromport as string,",
				"          itmoverundertolerancegroupid as string,",
				"          itmagent as string,",
				"          itmvendaccount as string,",
				"          itmcosttypegroupid as string,",
				"          exf_systemapprovalgroupid as string,",
				"          exf_invoicetype as string,",
				"          gupdiscountvendorclaimgroupname as string,",
				"          hsolocalname as string,",
				"          onsourcingvendaccount as string,",
				"          onsource as string,",
				"          onexternalid as string,",
				"          vrmglobalvendor as string,",
				"          modifieddatetime as string,",
				"          modifiedby as string,",
				"          modifiedtransactionid as string,",
				"          createddatetime as string,",
				"          createdby as string,",
				"          createdtransactionid as string,",
				"          dataareaid as string,",
				"          recversion as string,",
				"          partition as string,",
				"          sysrowversion as string,",
				"          recid as string,",
				"          tableid as string,",
				"          versionnumber as string,",
				"          createdon as string,",
				"          modifiedon as string,",
				"          IsDelete as string,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> myTempFile",
				"source(output(",
				"          vendorId as string,",
				"          party as long,",
				"          inventlocation as string,",
				"          dataareaid as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> CustTableTmp",
				"myTempFile select(mapColumn(",
				"          DATAAREAID = dataareaid,",
				"          VENDACCOUNT = accountnum,",
				"          VENDPARTYORIG = party,",
				"          onsourcingvendaccount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectKeyVendorColumns",
				"SelectKeyVendorColumns filter(equals(DATAAREAID, 'onkr')) ~> FilterONKRVendors",
				"CustTableTmp select(mapColumn(",
				"          PARTY = party,",
				"          ACCOUNTNUM = vendorId,",
				"          inventlocation,",
				"          dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCustomer",
				"InterCompanyTradingRelationVendor select(mapColumn(",
				"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
				"          intercompanytradingcustomer",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectIntercompanyRelation",
				"InterCompanyTradingPartner select(mapColumn(",
				"          partnerrecid = recid,",
				"          customerparty,",
				"          vendorparty,",
				"          vendordataareaid,",
				"          customerdataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
				"Party select(mapColumn(",
				"          recid,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectParty",
				"FilterONKRVendors, IntercompanyPartner join(VENDPARTYORIG == vendorparty",
				"     && DATAAREAID == vendordataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L1VendPartner",
				"L1CustPartner select(mapColumn(",
				"          customerparty,",
				"          VENDACCOUNTORIG,",
				"          customerdataareaid,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L2SelectCustPartner",
				"L2SelectCustPartner, ICCustomer join(customerparty == PARTY",
				"     && customerdataareaid == dataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L2GetCustomer",
				"L1VendPartner select(mapColumn(",
				"          partnerrecid,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG = DATAAREAID,",
				"          VENDACCOUNTORIG = VENDACCOUNT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L1SelectVendPartnerRecId",
				"L1SelectVendPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L1VendRelation",
				"L1VendRelation select(mapColumn(",
				"          intercompanytradingcustomer,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG,",
				"          VENDACCOUNTORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L1SelectCustRelation",
				"L2GetCustomer select(mapColumn(",
				"          ACCOUNTNUM,",
				"          VENDACCOUNTORIG,",
				"          customerdataareaid,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L2SelectCustAccount",
				"selectInterCompanyTradingPartner derive(vendordataareaid = lower(vendordataareaid),",
				"          customerdataareaid = lower(customerdataareaid),",
				"          vendorparty = toString(vendorparty)) ~> IntercompanyPartner",
				"L2SelectCustAccount, SelectONSourcingVendors join(ACCOUNTNUM == onsourcingvendaccount",
				"     && customerdataareaid == DATAAREAID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L3GetVendorBasedOnSourcing",
				"SelectKeyVendorColumns filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithONSourcing",
				"L3GetVendorBasedOnSourcing select(mapColumn(",
				"          DATAAREAID,",
				"          VENDACCOUNTORIG,",
				"          VENDPARTYORIG,",
				"          VENDPARTY,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L3SelectVendorPartyAndDataArea",
				"L3SelectVendorPartyAndDataArea, IntercompanyPartner join(DATAAREAID == vendordataareaid",
				"     && VENDPARTY == vendorparty,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L3GetVendorPartner",
				"L3GetVendorPartner select(mapColumn(",
				"          partnerrecid,",
				"          VENDACCOUNTORIG,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L3SelectPartnerRecId",
				"L3SelectPartnerRecId, SelectIntercompanyRelation join(partnerrecid == INTERCOMPANYTRADINGVENDOR,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L3RelationCustomerVendor",
				"L3RelationCustomerVendor select(mapColumn(",
				"          intercompanytradingcustomer,",
				"          VENDACCOUNTORIG,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L4ICCustomer",
				"L4ICCustomer, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          customerparty,",
				"          VENDACCOUNTORIG,",
				"          customerdataareaid,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> L4SelectCustPartyAndDataAreaId",
				"L4SelectCustPartyAndDataAreaId, ICCustomer join(customerparty == PARTY",
				"     && customerdataareaid == dataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L4GetCustomer",
				"L4GetCustomer select(mapColumn(",
				"          INVENTLOCATION = inventlocation,",
				"          VENDACCOUNTORIG,",
				"          VENDPARTYORIG,",
				"          DATAAREAIDORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelectCustomer",
				"L1SelectCustRelation, IntercompanyPartner join(intercompanytradingcustomer == partnerrecid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> L1CustPartner",
				"join2 select(mapColumn(",
				"          PARTY,",
				"          ACCOUNTNUM,",
				"          inventlocation,",
				"          dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ICCustomer",
				"select1 derive(DATAAREAID = lower(DATAAREAID),",
				"          VENDPARTY = toString(VENDPARTY)) ~> SelectONSourcingVendors",
				"SelectCustomer derive(dataareaid = lower(dataareaid)) ~> LowercaseDataArea",
				"LowercaseDataArea, IntercompanyPartner join(PARTY == customerparty",
				"     && dataareaid == customerdataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"FinalSelectCustomer alterRow(updateIf(true())) ~> Upsert",
				"FilterVendorsWithONSourcing select(mapColumn(",
				"          DATAAREAID,",
				"          onsourcingvendaccount,",
				"          VENDPARTY = VENDPARTYORIG",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"Upsert sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     alternateKeyName: 'hso_vendorsid',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          hso_sourcewarehouse = INVENTLOCATION,",
				"          hso_vendorid = VENDPARTYORIG,",
				"          hso_company = DATAAREAIDORIG,",
				"          hso_name = VENDACCOUNTORIG",
				"     )) ~> Vendors"
			]
		}
	}
}