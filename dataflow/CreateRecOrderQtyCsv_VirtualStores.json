{
	"name": "CreateRecOrderQtyCsv_VirtualStores",
	"properties": {
		"folder": {
			"name": "OL/MSL Sync"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "UOWarehouses",
						"type": "DatasetReference"
					},
					"name": "UOWarehouses"
				},
				{
					"dataset": {
						"referenceName": "UOItem",
						"type": "DatasetReference"
					},
					"name": "UOItem"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Barcode"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InventDim"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "ForecastSales"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "RecomOrderQtyCsvFile_virtualStore",
						"type": "DatasetReference"
					},
					"name": "MSLcreateCSV"
				}
			],
			"transformations": [
				{
					"name": "filterModelCustGroupChannel"
				},
				{
					"name": "SelectItemIdForecastQtyInventDimId"
				},
				{
					"name": "SelectInventDimIdAndBarcodeNum"
				},
				{
					"name": "GetBarcode"
				},
				{
					"name": "AddMSL"
				},
				{
					"name": "SelectInventSizeIdAndInventDimId"
				},
				{
					"name": "GetInventSizeId"
				},
				{
					"name": "FinalSelectBarcodeInventSizeId"
				},
				{
					"name": "FSGetInventSizeId"
				},
				{
					"name": "MSL"
				},
				{
					"name": "GetDualPurposeStores"
				},
				{
					"name": "SelectDualPurposeStores"
				},
				{
					"name": "DualPurposeStoresOnly"
				},
				{
					"name": "SelectStoreAndSize"
				},
				{
					"name": "CalculateMSL"
				},
				{
					"name": "joinMSL"
				},
				{
					"name": "SelectPreBarcode"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string",
				"}",
				"source(output(",
				"          crd3c_automatictocreation as boolean,",
				"          crd3c_automatictocreationname as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_datastatus as integer,",
				"          crd3c_datastatusname as string,",
				"          crd3c_deliveryterms as string,",
				"          crd3c_modeofdelivery as string,",
				"          crd3c_name as string,",
				"          crd3c_refreshday as string,",
				"          crd3c_refreshdayname as string,",
				"          crd3c_refreshfrequency as integer,",
				"          crd3c_refreshtime as timestamp,",
				"          crd3c_site as string,",
				"          crd3c_sourcewhname as string,",
				"          crd3c_uowarehousesid as string,",
				"          crd3c_warehousename as string,",
				"          crd3c_warehousetype as string,",
				"          createdbyname as string,",
				"          createdbyyominame as string,",
				"          createdon as timestamp,",
				"          createdonbehalfbyname as string,",
				"          createdonbehalfbyyominame as string,",
				"          hso_automaticpocreation as boolean,",
				"          hso_automaticpocreationname as string,",
				"          hso_companyicwarehouse as string,",
				"          hso_companylocalwarehouse as string,",
				"          hso_dualpurpose as boolean,",
				"          hso_dualpurposename as string,",
				"          hso_icwarehousename as string,",
				"          hso_maxtoqty as integer,",
				"          hso_ordertypesplit as integer,",
				"          hso_ordertypesplitname as string,",
				"          hso_sourceicwarehouse as string,",
				"          hso_storeleadername as string,",
				"          hso_storeleaderyominame as string,",
				"          hso_vendorname as string,",
				"          importsequencenumber as integer,",
				"          modifiedbyname as string,",
				"          modifiedbyyominame as string,",
				"          modifiedon as timestamp,",
				"          modifiedonbehalfbyname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          overriddencreatedon as timestamp,",
				"          owneridname as string,",
				"          owneridtype as string,",
				"          owneridyominame as string,",
				"          owningbusinessunitname as string,",
				"          statecode as integer,",
				"          statecodename as string,",
				"          statuscode as integer,",
				"          statuscodename as string,",
				"          timezoneruleversionnumber as integer,",
				"          utcconversiontimezonecode as integer,",
				"          versionnumber as long,",
				"          createdonbehalfby as string,",
				"          hso_vendor as string,",
				"          hso_icwarehouse as string,",
				"          owninguser as string,",
				"          modifiedby as string,",
				"          hso_storeleader as string,",
				"          modifiedonbehalfby as string,",
				"          ownerid as string,",
				"          {@odata.etag} as string,",
				"          crd3c_sourcewh as string,",
				"          createdby as string,",
				"          owningbusinessunit as string,",
				"          owningteam as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false) ~> UOWarehouses",
				"source(output(",
				"          crd3c_barcode as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_datastatus as integer,",
				"          crd3c_datastatusname as string,",
				"          crd3c_gender as string,",
				"          crd3c_name as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_simpleid as string,",
				"          crd3c_size as string,",
				"          crd3c_uoitemid as string,",
				"          crd3c_variantname as string,",
				"          createdbyname as string,",
				"          createdbyyominame as string,",
				"          createdon as timestamp,",
				"          createdonbehalfbyname as string,",
				"          createdonbehalfbyyominame as string,",
				"          importsequencenumber as integer,",
				"          modifiedbyname as string,",
				"          modifiedbyyominame as string,",
				"          modifiedon as timestamp,",
				"          modifiedonbehalfbyname as string,",
				"          modifiedonbehalfbyyominame as string,",
				"          overriddencreatedon as timestamp,",
				"          owneridname as string,",
				"          owneridtype as string,",
				"          owneridyominame as string,",
				"          owningbusinessunitname as string,",
				"          statecode as integer,",
				"          statecodename as string,",
				"          statuscode as integer,",
				"          statuscodename as string,",
				"          timezoneruleversionnumber as integer,",
				"          utcconversiontimezonecode as integer,",
				"          versionnumber as long,",
				"          createdonbehalfby as string,",
				"          owninguser as string,",
				"          modifiedby as string,",
				"          modifiedonbehalfby as string,",
				"          ownerid as string,",
				"          {@odata.etag} as string,",
				"          createdby as string,",
				"          owningbusinessunit as string,",
				"          owningteam as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     wildcardPaths:['UOItem.csv']) ~> UOItem",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          blocked as long,",
				"          retailshowforitem as long,",
				"          useforinput as long,",
				"          useforprinting as long,",
				"          hsoisuniqueidentifier as long,",
				"          sysdatastatecode as long,",
				"          barcodesetupid as string,",
				"          description as string,",
				"          inventdimid as string,",
				"          itembarcode as string,",
				"          itemid as string,",
				"          qty as decimal(38,6),",
				"          retailvariantid as string,",
				"          unitid as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/inventitembarcode_partitioned') ~> Barcode",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          hashtype as long,",
				"          sysdatastatecode as long,",
				"          configid as string,",
				"          inventbatchid as string,",
				"          inventcolorid as string,",
				"          inventdimid as string,",
				"          inventgtdid_ru as string,",
				"          inventlocationid as string,",
				"          inventownerid_ru as string,",
				"          inventprofileid_ru as string,",
				"          inventserialid as string,",
				"          inventsiteid as string,",
				"          inventsizeid as string,",
				"          inventstatusid as string,",
				"          inventstyleid as string,",
				"          inventversionid as string,",
				"          licenseplateid as string,",
				"          wmslocationid as string,",
				"          wmspalletid as string,",
				"          sha1hashhex as string,",
				"          inventdimension1 as string,",
				"          inventdimension2 as string,",
				"          inventdimension3 as string,",
				"          inventdimension4 as string,",
				"          inventdimension5 as string,",
				"          inventdimension6 as string,",
				"          inventdimension7 as string,",
				"          inventdimension8 as string,",
				"          inventdimension9 as timestamp,",
				"          inventdimension10 as decimal(38,6),",
				"          inventdimension11 as string,",
				"          inventdimension12 as string,",
				"          sha3hashhex as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: 'dataverse-ontest-unqccd0037834be4cec846b41a3ea290',",
				"     folderPath: 'deltalake/inventdim_partitioned') ~> InventDim",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          active as long,",
				"          allocatemethod as long,",
				"          cov as long,",
				"          freqcode as long,",
				"          projforecastbudgettype as long,",
				"          report as long,",
				"          hsoisreturnorder as long,",
				"          sysdatastatecode as long,",
				"          activitynumber as string,",
				"          amount as decimal(38,6),",
				"          comment as string,",
				"          costprice as decimal(38,6),",
				"          covstatus as long,",
				"          currency as string,",
				"          custaccountid as string,",
				"          custgroupid as string,",
				"          defaultdimension as long,",
				"          discamount as decimal(38,6),",
				"          discpercent as decimal(38,6),",
				"          enddate as timestamp,",
				"          expandid as long,",
				"          freq as long,",
				"          inventdimid as string,",
				"          inventqty as decimal(38,6),",
				"          itemallocateid as string,",
				"          itembomid as string,",
				"          itemgroupid as string,",
				"          itemid as string,",
				"          itemrouteid as string,",
				"          keyid as string,",
				"          modelid as string,",
				"          pdscwqty as decimal(38,6),",
				"          pdscwunitid as string,",
				"          priceunit as decimal(38,12),",
				"          projcategoryid as string,",
				"          projforecastcostpaymdate as timestamp,",
				"          projforecasteliminationdate as timestamp,",
				"          projforecastinvoicedate as timestamp,",
				"          projforecastsalespaymdate as timestamp,",
				"          projfundingsource as long,",
				"          projid as string,",
				"          projlinepropertyid as string,",
				"          projtransid as string,",
				"          psarefpurchline as long,",
				"          salesmarkup as decimal(38,6),",
				"          salesprice as decimal(38,6),",
				"          salesqty as decimal(38,6),",
				"          salesunitid as string,",
				"          startdate as timestamp,",
				"          taxgroupid as string,",
				"          taxitemgroupid as string,",
				"          forecastentrynumber as string,",
				"          description as string,",
				"          planningpriority as decimal(38,2),",
				"          itemdescription as string,",
				"          contractlineid as string,",
				"          kittinginventtransid as string,",
				"          kittinglinenum as decimal(38,16),",
				"          suntaforigforecastdate as timestamp,",
				"          suntaforigforecastqty as decimal(38,6),",
				"          suntafforecastchannelid as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/forecastsales_partitioned') ~> ForecastSales",
				"ForecastSales filter(equals(suntafforecastchannelid, \"D2CE\") && equals(modelid, \"D2CE model\") && equals(custgroupid, \"zD2CE\") && (salesqty != 0) && toDate(toString(startdate)) == addDays(currentDate(),1)) ~> filterModelCustGroupChannel",
				"filterModelCustGroupChannel select(mapColumn(",
				"          itemid,",
				"          inventdimid,",
				"          salesqty,",
				"          dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectItemIdForecastQtyInventDimId",
				"Barcode select(mapColumn(",
				"          inventdimid,",
				"          itemid,",
				"          dataareaid,",
				"          itembarcode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInventDimIdAndBarcodeNum",
				"SelectPreBarcode, FinalSelectBarcodeInventSizeId lookup(SelectPreBarcode@itemid == FinalSelectBarcodeInventSizeId@itemid",
				"     && SelectPreBarcode@dataareaid == FinalSelectBarcodeInventSizeId@dataareaid",
				"     && SelectPreBarcode@inventsizeid == FinalSelectBarcodeInventSizeId@inventsizeid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetBarcode",
				"joinMSL select(mapColumn(",
				"          crd3c_barcode,",
				"          crd3c_site = inventlocationid,",
				"          crd3c_dataarea = UOItem@crd3c_dataarea,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_itemvariant = crd3c_simpleid,",
				"          crd3c_variantname,",
				"          crd3c_itemvariantlookup = crd3c_uoitemid,",
				"          hso_size = crd3c_size,",
				"          crd3c_warehouselookup = crd3c_uowarehousesid,",
				"          crd3c_quantity = salesqty,",
				"          crd3c_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AddMSL",
				"InventDim select(mapColumn(",
				"          inventdimid,",
				"          inventsizeid,",
				"          dataareaid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInventSizeIdAndInventDimId",
				"SelectInventDimIdAndBarcodeNum, SelectInventSizeIdAndInventDimId join(SelectInventDimIdAndBarcodeNum@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
				"     && SelectInventDimIdAndBarcodeNum@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> GetInventSizeId",
				"GetInventSizeId select(mapColumn(",
				"          inventdimid = SelectInventDimIdAndBarcodeNum@inventdimid,",
				"          dataareaid = SelectInventDimIdAndBarcodeNum@dataareaid,",
				"          itembarcode,",
				"          inventsizeid,",
				"          itemid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelectBarcodeInventSizeId",
				"SelectItemIdForecastQtyInventDimId, SelectInventSizeIdAndInventDimId lookup(SelectItemIdForecastQtyInventDimId@inventdimid == SelectInventSizeIdAndInventDimId@inventdimid",
				"     && SelectItemIdForecastQtyInventDimId@dataareaid == SelectInventSizeIdAndInventDimId@dataareaid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FSGetInventSizeId",
				"GetBarcode select(mapColumn(",
				"          itembarcode,",
				"          crd3c_dataarea = SelectPreBarcode@dataareaid,",
				"          salesqty,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MSL",
				"UOWarehouses filter(upper(crd3c_warehousetype) == \"STOCK\" && hso_dualpurpose == true() && statecode == 0) ~> GetDualPurposeStores",
				"GetDualPurposeStores select(mapColumn(",
				"          crd3c_dataarea,",
				"          crd3c_name,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectDualPurposeStores",
				"SelectStoreAndSize, SelectDualPurposeStores join(inventlocationid == crd3c_name",
				"     && dataareaid == crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> DualPurposeStoresOnly",
				"FSGetInventSizeId select(mapColumn(",
				"          itemid,",
				"          salesqty,",
				"          dataareaid = SelectItemIdForecastQtyInventDimId@dataareaid,",
				"          inventsizeid,",
				"          inventlocationid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectStoreAndSize",
				"DualPurposeStoresOnly aggregate(groupBy(itemid,",
				"          dataareaid,",
				"          inventsizeid,",
				"          inventlocationid,",
				"          crd3c_uowarehousesid),",
				"     salesqty = sum(salesqty)) ~> CalculateMSL",
				"UOItem, MSL join(crd3c_barcode == itembarcode",
				"     && UOItem@crd3c_dataarea == MSL@crd3c_dataarea,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinMSL",
				"CalculateMSL select(mapColumn(",
				"          itemid,",
				"          dataareaid,",
				"          inventsizeid,",
				"          inventlocationid,",
				"          salesqty,",
				"          crd3c_uowarehousesid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectPreBarcode",
				"AddMSL sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          crd3c_name as string,",
				"          crd3c_variantname as string,",
				"          crd3c_barcode as string,",
				"          crd3c_productnumber as string,",
				"          crd3c_dataarea as string,",
				"          crd3c_size as string",
				"     ),",
				"     partitionFileNames:['RecOrderQtyVS.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MSLcreateCSV"
			]
		}
	}
}