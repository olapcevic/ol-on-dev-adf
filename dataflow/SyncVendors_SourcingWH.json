{
	"name": "SyncVendors_SourcingWH",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Vendors"
				},
				{
					"dataset": {
						"referenceName": "UOWarehouses",
						"type": "DatasetReference"
					},
					"name": "UOWarehouses"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InterCompanyTradingRelationCustomer"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Customers"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InterCompanyTradingPartner"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "Party"
				},
				{
					"linkedService": {
						"referenceName": "D365FOSynapseDelta",
						"type": "LinkedServiceReference"
					},
					"name": "InterCompanyTradingRelationVendor"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Vendors",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "VendorsSelect"
				},
				{
					"name": "FilterVendorsWithStoresAsInventLocation"
				},
				{
					"name": "selectWarehouseCols"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "derivedColWH"
				},
				{
					"name": "LookUpCustomerParty"
				},
				{
					"name": "GetThePartyTableRecords"
				},
				{
					"name": "SelectInterCoCustomers"
				},
				{
					"name": "LookUpThePartyNumber"
				},
				{
					"name": "FinalCustomerSelectWithPartyNumber"
				},
				{
					"name": "select4"
				},
				{
					"name": "GetCustomerDetails"
				},
				{
					"name": "GetVendorParty"
				},
				{
					"name": "SelectVendorParty"
				},
				{
					"name": "GetVendorParty2"
				},
				{
					"name": "FinalSelect"
				},
				{
					"name": "GetVendCustRelation"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "ConvertVendorPartyToString"
				},
				{
					"name": "selectInterCompanyTradingPartner"
				},
				{
					"name": "selectParty"
				},
				{
					"name": "GetVendorPartyL2"
				},
				{
					"name": "SelectVendorPartyL2"
				}
			],
			"scriptLines": [
				"parameters{",
				"     Container as string",
				"}",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          bidonly as long,",
				"          blocked as long,",
				"          cashaccountingregime_es as long,",
				"          changerequestallowoverride as long,",
				"          changerequestenabled as long,",
				"          changerequestoverride as long,",
				"          cisstatus as long,",
				"          companytype_mx as long,",
				"          disabledowned as long,",
				"          fatcafilingrequirement as long,",
				"          femaleowned as long,",
				"          foreignentityindicator as long,",
				"          foreignresident_ru as long,",
				"          heir_it as long,",
				"          hubzone as long,",
				"          icmscontributor_br as long,",
				"          incltax as long,",
				"          inventprofiletype_ru as long,",
				"          ispaymfeecovered_jp as long,",
				"          isresident_lv as long,",
				"          locallyowned as long,",
				"          mandatoryvatdate_pl as long,",
				"          matchingpolicy as long,",
				"          minorityowned as long,",
				"          nontaxable_br as long,",
				"          offsetaccounttype as long,",
				"          onetimevendor as long,",
				"          operationtype_mx as long,",
				"          presencetype_br as long,",
				"          purchamountpurchaseorder as long,",
				"          secondtin as long,",
				"          servicecodeondlvaddress_br as long,",
				"          smallbusiness as long,",
				"          tax1099namechoice as long,",
				"          tax1099reports as long,",
				"          taxidtype as long,",
				"          taxwithholdcalculate as long,",
				"          taxwithholdvendortype_th as long,",
				"          unitedvatinvoice_lt as long,",
				"          usecashdisc as long,",
				"          vatpartnerkind_ru as long,",
				"          vattaxagent_ru as long,",
				"          vendconsumption_br as long,",
				"          vendortype_mx as long,",
				"          veteranowned as long,",
				"          w9 as long,",
				"          w9included as long,",
				"          vendvendorcollaborationtype as long,",
				"          withholdingtaxpayertype_mx as long,",
				"          originalvendorinreporting_it as long,",
				"          isselfinvoicevendor_it as long,",
				"          workflowstate as long,",
				"          iscprb_br as long,",
				"          cxmlorderenable as long,",
				"          vatnumtabletype as long,",
				"          overridesalestax as long,",
				"          accruesalestaxtype as long,",
				"          taxvendorchargetaxtolerancevalidation as long,",
				"          revenuetypology_it as long,",
				"          ispublicsector_it as long,",
				"          istaxationoverpayroll_br as long,",
				"          einvoiceregister_it as long,",
				"          isunidentifiedbenef_br as long,",
				"          itmimportcostingvendor as long,",
				"          itmservicesprovider as long,",
				"          itmvendtype as long,",
				"          exf_porequired as long,",
				"          exf_classified as long,",
				"          exf_vendorportalinvoicesmustbeapproved as long,",
				"          exf_istmsfreight as long,",
				"          sunplmsyncwithplm as long,",
				"          hsooscaenabled as long,",
				"          hsogitincludevendorinquery as long,",
				"          oninterface as long,",
				"          onsourcingdeliverytype as long,",
				"          onsourcingupdatechain as long,",
				"          onpoplacementenabled as long,",
				"          sysdatastatecode as long,",
				"          taxwithholdgroup as string,",
				"          residenceforeigncountryregionid as string,",
				"          paymtermid as string,",
				"          linedisc as string,",
				"          accountnum as string,",
				"          bankaccount as string,",
				"          bankcentralbankpurposecode as string,",
				"          bankcentralbankpurposetext as string,",
				"          bankcentralbanktranstypecur_ru as string,",
				"          bankorderofpayment_ru as string,",
				"          birthcountycode_it as string,",
				"          birthplace as string,",
				"          blockedreleasedate as timestamp,",
				"          cashdisc as string,",
				"          ccmnum_br as string,",
				"          ciscompanyregnum as string,",
				"          cisnationalinsurancenum as string,",
				"          cisuniquetaxpayerref as string,",
				"          cisverificationdate as timestamp,",
				"          cisverificationnum as string,",
				"          clearingperiod as string,",
				"          cnae_br as string,",
				"          cnpjcpfnum_br as string,",
				"          commercialregister as string,",
				"          commercialregisterinsetnumber as string,",
				"          commercialregistersection as string,",
				"          companychainid as string,",
				"          companyidsiret as string,",
				"          companynafcode as long,",
				"          consday_jp as long,",
				"          contactpersonid as string,",
				"          creditmax as decimal(38,6),",
				"          creditrating as string,",
				"          curp_mx as string,",
				"          currency as string,",
				"          dba as string,",
				"          defaultdimension as long,",
				"          defaultinventstatusid as string,",
				"          destinationcodeid as string,",
				"          diotcountrycode_mx as string,",
				"          dlvmode as string,",
				"          dlvterm as string,",
				"          enddisc as string,",
				"          enterprisenumber as string,",
				"          ethnicoriginid as string,",
				"          factoringaccount as string,",
				"          finecode_br as string,",
				"          fiscalcode as string,",
				"          foreignerid_br as string,",
				"          foreigntaxregistration_mx as string,",
				"          freightzone as string,",
				"          ienum_br as string,",
				"          insscei_br as string,",
				"          intbank_lv as string,",
				"          interestcode_br as string,",
				"          inventlocation as string,",
				"          inventprofileid_ru as string,",
				"          inventsiteid as string,",
				"          invoiceaccount as string,",
				"          itembuyergroupid as string,",
				"          lineofbusinessid as string,",
				"          lvpaymtranscodes as long,",
				"          maincontactworker as long,",
				"          markupgroup as string,",
				"          memo as string,",
				"          multilinedisc as string,",
				"          namecontrol as string,",
				"          nationality_mx as string,",
				"          nit_br as string,",
				"          numbersequencegroup as string,",
				"          offsetledgerdimension as long,",
				"          organizationnumber as string,",
				"          orgid as string,",
				"          party as long,",
				"          paymdayid as string,",
				"          paymid as string,",
				"          paymmode as string,",
				"          paymsched as string,",
				"          paymspec as string,",
				"          pricegroup as string,",
				"          purchcalendarid as string,",
				"          purchpoolid as string,",
				"          rfc_mx as string,",
				"          segmentid as string,",
				"          separatedivisionid_ru as string,",
				"          stateinscription_mx as string,",
				"          structdepartment_ru as string,",
				"          subsegmentid as string,",
				"          suppitemgroupid as string,",
				"          tamrebategroupid as string,",
				"          tax1099fields as long,",
				"          tax1099regnum as string,",
				"          taxgroup as string,",
				"          taxperiodpaymentcode_pl as string,",
				"          vatnum as string,",
				"          vatoperationcode_ru as string,",
				"          vendexceptiongroup as long,",
				"          vendgroup as string,",
				"          vendincomecode_br as string,",
				"          vendinvoicedeclaration_is as long,",
				"          venditemgroupid as string,",
				"          vendorportaladministratorrecid as long,",
				"          vendpaymfeegroup_jp as string,",
				"          vendpricetolerancegroupid as string,",
				"          youraccountnum as string,",
				"          legalrepresentativecurp_mx as string,",
				"          legalrepresentativename_mx as string,",
				"          legalrepresentativerfc_mx as string,",
				"          withholdingtypecode_mx as string,",
				"          birthdate as timestamp,",
				"          regnum_w as string,",
				"          enterprisecode as string,",
				"          vatnumrecid as long,",
				"          purchaseshipcalendarid as string,",
				"          taxvendorchargetaxtoleranceamount as decimal(38,6),",
				"          taxvendorchargetaxtolerancepercent as decimal(38,6),",
				"          freenotesgroup_it as string,",
				"          coderevenuetypology_it as string,",
				"          itmfromport as string,",
				"          itmoverundertolerancegroupid as string,",
				"          itmagent as string,",
				"          itmvendaccount as string,",
				"          itmcosttypegroupid as string,",
				"          exf_systemapprovalgroupid as string,",
				"          exf_invoicetype as string,",
				"          gupdiscountvendorclaimgroupname as string,",
				"          hsolocalname as string,",
				"          onsourcingvendaccount as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string,",
				"          onsource as string,",
				"          onexternalid as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/vendtable_partitioned',",
				"     manifestType: 'manifest') ~> Vendors",
				"source(output(",
				"          {@odata.etag} as string,",
				"          crd3c_name as string,",
				"          crd3c_uowarehousesid as string,",
				"          crd3c_warehousetype as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: '<fetch version=\"1.0\" output-format=\"xml-platform\" mapping=\"logical\" distinct=\"false\">\\n  <entity name=\"crd3c_uowarehouses\">\\n    <attribute name=\"crd3c_uowarehousesid\" />\\n    <attribute name=\"crd3c_name\" />\\n    <attribute name=\"crd3c_warehousetype\" />\\n    <order attribute=\"crd3c_name\" descending=\"false\" />\\n    <filter type=\"or\">\\n      <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Store\" />\\n       <condition attribute=\"crd3c_warehousetype\" operator=\"eq\" value=\"Stock\" />\\n    </filter>\\n  </entity>\\n</fetch>') ~> UOWarehouses",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          active as long,",
				"          excludeihbnetting as long,",
				"          sysdatastatecode as long,",
				"          intercompanytradingcustomer as long,",
				"          intercompanytradingvendor as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
				"     manifestType: 'manifest') ~> InterCompanyTradingRelationCustomer",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          accountstatement as long,",
				"          affiliated_ru as long,",
				"          blocked as long,",
				"          companytype_mx as long,",
				"          creditcardaddressverification as long,",
				"          creditcardaddressverificationlevel as long,",
				"          creditcardaddressverificationvoid as long,",
				"          creditcardcvc as long,",
				"          custexcludecollectionfee as long,",
				"          custexcludeinterestcharges as long,",
				"          custfinaluser_br as long,",
				"          custwhtcontributiontype_br as long,",
				"          einvoice as long,",
				"          einvoiceattachment as long,",
				"          entrycertificaterequired_w as long,",
				"          exportsales_pl as long,",
				"          expressbilloflading as long,",
				"          fednonfedindicator as long,",
				"          fiscaldoctype_pl as long,",
				"          forecastdmpinclude as long,",
				"          foreignresident_ru as long,",
				"          generateincomingfiscaldocument_br as long,",
				"          girotype as long,",
				"          girotypeaccountstatement as long,",
				"          girotypecollectionletter as long,",
				"          girotypefreetextinvoice as long,",
				"          girotypeinterestnote as long,",
				"          girotypeprojinvoice as long,",
				"          icmscontributor_br as long,",
				"          incltax as long,",
				"          intercompanyallowindirectcreation as long,",
				"          intercompanyautocreateorders as long,",
				"          intercompanydirectdelivery as long,",
				"          inventprofiletype_ru as long,",
				"          invoiceaddress as long,",
				"          invoicepostingtype_ru as long,",
				"          isresident_lv as long,",
				"          issueownentrycertificate_w as long,",
				"          mandatorycreditlimit as long,",
				"          mandatoryvatdate_pl as long,",
				"          onetimecustomer as long,",
				"          packagedepositexcempt_pl as long,",
				"          pdsfreightaccrued as long,",
				"          rfidcasetagging as long,",
				"          rfiditemtagging as long,",
				"          rfidpallettagging as long,",
				"          servicecodeondlvaddress_br as long,",
				"          shipcarrierblindshipment as long,",
				"          shipcarrierfuelsurcharge as long,",
				"          suframa_br as long,",
				"          suframapiscofins_br as long,",
				"          taxwithholdcalculate_in as long,",
				"          taxwithholdcalculate_th as long,",
				"          unitedvatinvoice_lt as long,",
				"          usecashdisc as long,",
				"          usepurchrequest as long,",
				"          websalesorderdisplay as long,",
				"          einvoiceregister_it as long,",
				"          presencetype_br as long,",
				"          isexternallymaintained as long,",
				"          cfdienabled_mx as long,",
				"          foreigntrade_mx as long,",
				"          workflowstate as long,",
				"          useoriginaldocumentasfacture_ru as long,",
				"          collectionlettercode as long,",
				"          blockfloorlimituseinchannel as long,",
				"          cfdiskipiepstaxes_mx as long,",
				"          simplifytaxintgrexportdocvalidation_cn as long,",
				"          simplenational_br as long,",
				"          vatnumtabletype as long,",
				"          overridesalestax as long,",
				"          usualexporter_it as long,",
				"          ispublicsector_it as long,",
				"          simplifytaxintgrexporttaxregvalidation_cn as long,",
				"          printdynamicqrcode_in as long,",
				"          invoicetype_w as long,",
				"          cfditemporaryexport_mx as long,",
				"          credmanexclude as long,",
				"          credmantitleheld as long,",
				"          credmanwithagency as long,",
				"          credmancustunlimitedcredit as long,",
				"          revrecdisableintercompany as long,",
				"          suntafreleasegrpmethod as long,",
				"          suntafreleasethreshmethod as long,",
				"          suntafskipbulkconsumption as long,",
				"          sks_epy_custfilter as long,",
				"          sks_epy_paymenttype as long,",
				"          sks_cc_disablecardsync as long,",
				"          sks_cc_walletlinkstatus as long,",
				"          sks_lb_autosettlement as long,",
				"          hsoedicustcountrycode as long,",
				"          hsoediprovider as long,",
				"          hsoediisdespatchadvicerecordid as long,",
				"          hsoedimarkforaddressrequirement as long,",
				"          hsoomnicsenabled as long,",
				"          hsokeyaccount as long,",
				"          hsousingaotsystem as long,",
				"          oncustomerrefautofill as long,",
				"          oncustomerconsolidatedinvoice as long,",
				"          hsouseshipwindow as long,",
				"          oninvoicedatesummary as long,",
				"          hsoisinternalcustomer as long,",
				"          hsoapplyifdirectdelivery as long,",
				"          sysdatastatecode as long,",
				"          paymtermid as string,",
				"          linedisc as string,",
				"          taxwithholdgroup_th as string,",
				"          partycountry as string,",
				"          accountnum as string,",
				"          agencylocationcode as string,",
				"          bankaccount as string,",
				"          bankcentralbankpurposecode as string,",
				"          bankcentralbankpurposetext as string,",
				"          bankcustpaymidtable as long,",
				"          cashdisc as string,",
				"          cashdiscbasedays as long,",
				"          ccmnum_br as string,",
				"          clearingperiod as string,",
				"          cnae_br as string,",
				"          cnpjcpfnum_br as string,",
				"          commercialregister as string,",
				"          commercialregisterinsetnumber as string,",
				"          commercialregistersection as string,",
				"          commissiongroup as string,",
				"          companychainid as string,",
				"          companyidsiret as string,",
				"          companynafcode as long,",
				"          consday_jp as long,",
				"          contactpersonid as string,",
				"          creditmax as decimal(38,6),",
				"          creditrating as string,",
				"          curp_mx as string,",
				"          currency as string,",
				"          custclassificationid as string,",
				"          custgroup as string,",
				"          custitemgroupid as string,",
				"          custtradingpartnercode as long,",
				"          defaultdimension as long,",
				"          defaultdirectdebitmandate as long,",
				"          defaultinventstatusid as string,",
				"          destinationcodeid as string,",
				"          dlvmode as string,",
				"          dlvreason as string,",
				"          dlvterm as string,",
				"          einvoiceeannum as string,",
				"          enddisc as string,",
				"          enterprisenumber as string,",
				"          factoringaccount as string,",
				"          federalcomments as string,",
				"          finecode_br as string,",
				"          fiscalcode as string,",
				"          freightzone as string,",
				"          ienum_br as string,",
				"          insscei_br as string,",
				"          intbank_lv as string,",
				"          interestcode_br as string,",
				"          inventlocation as string,",
				"          inventprofileid_ru as string,",
				"          inventsiteid as string,",
				"          invoiceaccount as string,",
				"          issuercountry_hu as string,",
				"          lineofbusinessid as string,",
				"          lvpaymtranscodes as long,",
				"          maincontactworker as long,",
				"          markupgroup as string,",
				"          mcrmergedparent as string,",
				"          mcrmergedroot as string,",
				"          memo as string,",
				"          multilinedisc as string,",
				"          nit_br as string,",
				"          numbersequencegroup as string,",
				"          orderentrydeadlinegroupid as string,",
				"          orgid as string,",
				"          ouraccountnum as string,",
				"          packmaterialfeelicensenum as string,",
				"          party as long,",
				"          partystate as string,",
				"          paymdayid as string,",
				"          paymentreference_ee as string,",
				"          paymidtype as string,",
				"          paymmode as string,",
				"          paymsched as string,",
				"          paymspec as string,",
				"          pdscustrebategroupid as string,",
				"          pdsrebatetmagroup as string,",
				"          pricegroup as string,",
				"          residenceforeigncountryregionid_it as string,",
				"          rfc_mx as string,",
				"          salescalendarid as string,",
				"          salesdistrictid as string,",
				"          salesgroup as string,",
				"          salespoolid as string,",
				"          segmentid as string,",
				"          shipcarrieraccount as string,",
				"          shipcarrieraccountcode as string,",
				"          shipcarrierid as string,",
				"          stateinscription_mx as string,",
				"          statisticsgroup as string,",
				"          subsegmentid as string,",
				"          suframanumber_br as string,",
				"          suppitemgroupid as string,",
				"          taxgroup as string,",
				"          taxperiodpaymentcode_pl as string,",
				"          vatnum as string,",
				"          vendaccount as string,",
				"          authorityoffice_it as string,",
				"          foreignerid_br as string,",
				"          taxgstreliefgroupheading_my as long,",
				"          foreigntaxregistration_mx as string,",
				"          custwriteoffrefrecid as long,",
				"          regnum_w as string,",
				"          enterprisecode as string,",
				"          taxbordernumber_fi as string,",
				"          birthdate_it as timestamp,",
				"          satpaymmethod_mx as string,",
				"          satpurpose_mx as string,",
				"          vatnumrecid as long,",
				"          freenotesgroup_it as string,",
				"          taxregimecode_mx as string,",
				"          satregistrationname_mx as string,",
				"          credmaneligiblecreditlimitdate as timestamp,",
				"          credmangroupid as string,",
				"          credmannotes as string,",
				"          credmanaccountstatusid as string,",
				"          credmaneligiblecreditmax as decimal(38,6),",
				"          credmanbusinessstarted as timestamp,",
				"          credmancustcreditmaxalt as decimal(38,6),",
				"          credmaneligiblecreditlimitcurrency as string,",
				"          credmancustomersince as timestamp,",
				"          credmanstatusreasonid as string,",
				"          credmancollectiongroupid as string,",
				"          credmancreditlimitexpirydate as timestamp,",
				"          credmancreditlimitdate as timestamp,",
				"          credmanlastreviewdate as timestamp,",
				"          credmannextschedreviewdate as timestamp,",
				"          sunecommcustomerid as string,",
				"          suntafreleasethreshold as decimal(38,6),",
				"          suntafcustomergroup as string,",
				"          suntafforecastchannelid as string,",
				"          suntafreleasegroupthreshold as decimal(38,6),",
				"          sks_lb_tpmdedcat as string,",
				"          sks_br_ebankreccustgroupid as string,",
				"          sks_cc_journalpaymmode as string,",
				"          sks_cc_walletlinkcount as long,",
				"          sks_cc_walletlinkerrormsg as string,",
				"          hsoediinterchangeid as string,",
				"          hsoedilocationid as string,",
				"          hsoedideliverypartygln as string,",
				"          hsoedibuyergln as string,",
				"          hsoedifrominventlocationid as string,",
				"          hsoediaccountnumber as string,",
				"          hsoshippingcarrier as string,",
				"          hsoshippingcarrieraccountnum as string,",
				"          hsolocalname as string,",
				"          onedibuyergln as string,",
				"          hsoroutetimesalesorders as long,",
				"          hsodaysbetweenshipdates as long,",
				"          oninventbarcodesetupid as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string,",
				"          irs1099cindicator as long,",
				"          birthcountycode_it as string,",
				"          birthplace_it as string,",
				"          identificationnumber as string,",
				"          passportno_hu as string,",
				"          taxlicensenum as string,",
				"          dynfamilygroupid as string,",
				"          trigeoid as string,",
				"          onnoshortpickallowed as long,",
				"          hsocustomsnumber as string,",
				"          hsodlvtermreturn as string,",
				"          hsoprofileid as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/custtable_partitioned',",
				"     manifestType: 'manifest') ~> Customers",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          tradingpartnertype as long,",
				"          sysdatastatecode as long,",
				"          vendordataareaid as string,",
				"          customerdataareaid as string,",
				"          customerparty as long,",
				"          vendorparty as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/intercompanytradingpartner_partitioned',",
				"     manifestType: 'manifest') ~> InterCompanyTradingPartner",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          sysdatastatecode as long,",
				"          instancerelationtype as long,",
				"          knownas as string,",
				"          languageid as string,",
				"          name as string,",
				"          namealias as string,",
				"          partynumber as string,",
				"          primaryaddresslocation as long,",
				"          primarycontactemail as long,",
				"          primarycontactfax as long,",
				"          primarycontactphone as long,",
				"          primarycontacttelex as long,",
				"          primarycontacturl as long,",
				"          primarycontactfacebook as long,",
				"          primarycontacttwitter as long,",
				"          primarycontactlinkedin as long,",
				"          addressbooknames as string,",
				"          legacyinstancerelationtype as long,",
				"          hsoexternalcontactreference as string,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/dirpartytable_partitioned',",
				"     manifestType: 'manifest') ~> Party",
				"source(output(",
				"          Id as string,",
				"          SinkCreatedOn as timestamp,",
				"          SinkModifiedOn as timestamp,",
				"          active as long,",
				"          excludeihbnetting as long,",
				"          sysdatastatecode as long,",
				"          intercompanytradingcustomer as long,",
				"          intercompanytradingvendor as long,",
				"          modifieddatetime as timestamp,",
				"          modifiedby as string,",
				"          modifiedtransactionid as long,",
				"          createddatetime as timestamp,",
				"          createdby as string,",
				"          createdtransactionid as long,",
				"          dataareaid as string,",
				"          recversion as long,",
				"          partition as long,",
				"          sysrowversion as long,",
				"          recid as long,",
				"          tableid as long,",
				"          versionnumber as long,",
				"          createdon as timestamp,",
				"          modifiedon as timestamp,",
				"          IsDelete as boolean,",
				"          createdonpartition as string,",
				"          PartitionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($Container),",
				"     folderPath: 'deltalake/intercompanytradingrelation_partitioned',",
				"     manifestType: 'manifest') ~> InterCompanyTradingRelationVendor",
				"Vendors select(mapColumn(",
				"          hso_site = inventsiteid,",
				"          hso_store = inventlocation,",
				"          hso_company = dataareaid,",
				"          hso_vendorgroup = vendgroup,",
				"          hso_name = accountnum,",
				"          hso_store2 = inventlocation,",
				"          VENDPARTY = party,",
				"          VENDRECID = recid,",
				"          onsourcingvendaccount",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> VendorsSelect",
				"VendorsSelect filter(notEquals(onsourcingvendaccount, 'NULL')) ~> FilterVendorsWithStoresAsInventLocation",
				"UOWarehouses select(mapColumn(",
				"          crd3c_uowarehousesid,",
				"          crd3c_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWarehouseCols",
				"FilterVendorsWithStoresAsInventLocation, selectWarehouseCols lookup(hso_store == crd3c_name,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(crd3c_uowarehousesid = concat(concat('crd3c_uowarehouseses','('),concat(crd3c_uowarehousesid,')'))) ~> derivedColWH",
				"InterCompanyTradingRelationCustomer, selectInterCompanyTradingPartner lookup(intercompanytradingcustomer == selectInterCompanyTradingPartner@recid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpCustomerParty",
				"LookUpCustomerParty, selectParty lookup(customerparty == selectParty@recid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetThePartyTableRecords",
				"Customers select(mapColumn(",
				"          PARTYRECID = party,",
				"          ACCOUNTNUM = accountnum,",
				"          INVENTLOCATION = inventlocation,",
				"          CUSTGROUP = custgroup,",
				"          INVENTSITEID = inventsiteid,",
				"          CUSTDATAAREA = dataareaid",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectInterCoCustomers",
				"SelectInterCoCustomers, selectParty lookup(PARTYRECID == recid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookUpThePartyNumber",
				"LookUpThePartyNumber select(mapColumn(",
				"          CUSTDATAAREA,",
				"          ACCOUNTNUM,",
				"          INVENTSITEID,",
				"          INVENTLOCATION,",
				"          CUSTPARTYNUMBER = partynumber,",
				"          CUSTPARTYRECID = PARTYRECID,",
				"          CUSTGROUP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalCustomerSelectWithPartyNumber",
				"GetThePartyTableRecords select(mapColumn(",
				"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor,",
				"          INTERCOMPANYTRADINGCUSTOMER = intercompanytradingcustomer,",
				"          CUSTOMERPARTY = customerparty,",
				"          NAME = name,",
				"          CUSTOMERPARTYNUMBER = partynumber",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, FinalCustomerSelectWithPartyNumber lookup(CUSTOMERPARTYNUMBER == CUSTPARTYNUMBER,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetCustomerDetails",
				"InterCompanyTradingRelationVendor, selectInterCompanyTradingPartner lookup(intercompanytradingvendor == selectInterCompanyTradingPartner@recid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetVendorParty",
				"GetVendorParty select(mapColumn(",
				"          VENDORPARTY1 = vendorparty,",
				"          INTERCOMPANYTRADINGVENDOR = intercompanytradingvendor",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectVendorParty",
				"GetCustomerDetails, SelectVendorPartyL2 lookup(select4@INTERCOMPANYTRADINGVENDOR == SelectVendorPartyL2@INTERCOMPANYTRADINGVENDOR,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetVendorParty2",
				"GetVendorParty2 select(mapColumn(",
				"          CUSTNAME = NAME,",
				"          CUSTOMERPARTYNUMBER,",
				"          CUSTACCOUNTNUM = ACCOUNTNUM,",
				"          INVENTLOCATION,",
				"          VENDORPARTY,",
				"          CUSTDATAAREA,",
				"          INVENTSITEID,",
				"          CUSTGROUP",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelect",
				"derivedColWH, FinalSelect lookup(VENDPARTY == VENDORPARTY,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetVendCustRelation",
				"ConvertVendorPartyToString alterRow(upsertIf(true())) ~> alterRow1",
				"GetVendCustRelation derive(VENDPARTY = toString(VENDPARTY)) ~> ConvertVendorPartyToString",
				"InterCompanyTradingPartner select(mapColumn(",
				"          recid,",
				"          customerparty,",
				"          vendorparty",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectInterCompanyTradingPartner",
				"Party select(mapColumn(",
				"          recid,",
				"          partynumber,",
				"          name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectParty",
				"SelectVendorParty, selectInterCompanyTradingPartner lookup(INTERCOMPANYTRADINGVENDOR == recid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> GetVendorPartyL2",
				"GetVendorPartyL2 select(mapColumn(",
				"          INTERCOMPANYTRADINGVENDOR,",
				"          VENDORPARTY = vendorparty",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectVendorPartyL2",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     alternateKeyName: 'hso_vendorsid',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          hso_site,",
				"          {hso_store@odata.bind} = crd3c_uowarehousesid,",
				"          hso_name,",
				"          hso_company,",
				"          hso_vendorgroup,",
				"          hso_store2 = hso_store,",
				"          hso_customer = CUSTACCOUNTNUM,",
				"          hso_sourcewarehouse = INVENTLOCATION,",
				"          hso_companycustomer = CUSTDATAAREA,",
				"          hso_sitecustomer = INVENTSITEID,",
				"          hso_custgroup = CUSTGROUP,",
				"          hso_customername = CUSTNAME,",
				"          hso_vendorid = VENDPARTY",
				"     )) ~> sink1"
			]
		}
	}
}